
JBC controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c7c  08003c7c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003c7c  08003c7c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c7c  08003c7c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000030  08003cb4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  200001b0  08003cb4  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e59  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e1  00000000  00000000  00035ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000902c  00000000  00000000  000398d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e48  00000000  00000000  00042908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b12  00000000  00000000  00043750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001414f  00000000  00000000  00044262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019511  00000000  00000000  000583b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000728c2  00000000  00000000  000718c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026e4  00000000  00000000  000e4184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e6868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b34 	.word	0x08003b34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08003b34 	.word	0x08003b34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0008      	movs	r0, r1
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 fb71 	bl	8000920 <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 fafd 	bl	8000848 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb63 	bl	8000920 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb59 	bl	8000920 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fb09 	bl	8000894 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 faff 	bl	8000894 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_f2uiz>:
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	b510      	push	{r4, lr}
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	1c04      	adds	r4, r0, #0
 80002ac:	f7ff fff0 	bl	8000290 <__aeabi_fcmpge>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d103      	bne.n	80002bc <__aeabi_f2uiz+0x18>
 80002b4:	1c20      	adds	r0, r4, #0
 80002b6:	f000 fe65 	bl	8000f84 <__aeabi_f2iz>
 80002ba:	bd10      	pop	{r4, pc}
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	1c20      	adds	r0, r4, #0
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	f000 fcbf 	bl	8000c44 <__aeabi_fsub>
 80002c6:	f000 fe5d 	bl	8000f84 <__aeabi_f2iz>
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	061b      	lsls	r3, r3, #24
 80002ce:	469c      	mov	ip, r3
 80002d0:	4460      	add	r0, ip
 80002d2:	e7f2      	b.n	80002ba <__aeabi_f2uiz+0x16>

080002d4 <__aeabi_fadd>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	4647      	mov	r7, r8
 80002d8:	46ce      	mov	lr, r9
 80002da:	024a      	lsls	r2, r1, #9
 80002dc:	0243      	lsls	r3, r0, #9
 80002de:	0045      	lsls	r5, r0, #1
 80002e0:	0fc4      	lsrs	r4, r0, #31
 80002e2:	0a50      	lsrs	r0, r2, #9
 80002e4:	4680      	mov	r8, r0
 80002e6:	0048      	lsls	r0, r1, #1
 80002e8:	0a5b      	lsrs	r3, r3, #9
 80002ea:	0e00      	lsrs	r0, r0, #24
 80002ec:	0992      	lsrs	r2, r2, #6
 80002ee:	4694      	mov	ip, r2
 80002f0:	b580      	push	{r7, lr}
 80002f2:	001e      	movs	r6, r3
 80002f4:	4681      	mov	r9, r0
 80002f6:	0002      	movs	r2, r0
 80002f8:	0e2d      	lsrs	r5, r5, #24
 80002fa:	00df      	lsls	r7, r3, #3
 80002fc:	0fc9      	lsrs	r1, r1, #31
 80002fe:	428c      	cmp	r4, r1
 8000300:	d024      	beq.n	800034c <__aeabi_fadd+0x78>
 8000302:	1a28      	subs	r0, r5, r0
 8000304:	2800      	cmp	r0, #0
 8000306:	dd0e      	ble.n	8000326 <__aeabi_fadd+0x52>
 8000308:	2a00      	cmp	r2, #0
 800030a:	d13e      	bne.n	800038a <__aeabi_fadd+0xb6>
 800030c:	4662      	mov	r2, ip
 800030e:	2a00      	cmp	r2, #0
 8000310:	d100      	bne.n	8000314 <__aeabi_fadd+0x40>
 8000312:	e0fd      	b.n	8000510 <__aeabi_fadd+0x23c>
 8000314:	1e42      	subs	r2, r0, #1
 8000316:	2801      	cmp	r0, #1
 8000318:	d100      	bne.n	800031c <__aeabi_fadd+0x48>
 800031a:	e137      	b.n	800058c <__aeabi_fadd+0x2b8>
 800031c:	28ff      	cmp	r0, #255	; 0xff
 800031e:	d100      	bne.n	8000322 <__aeabi_fadd+0x4e>
 8000320:	e0a9      	b.n	8000476 <__aeabi_fadd+0x1a2>
 8000322:	0010      	movs	r0, r2
 8000324:	e039      	b.n	800039a <__aeabi_fadd+0xc6>
 8000326:	2800      	cmp	r0, #0
 8000328:	d063      	beq.n	80003f2 <__aeabi_fadd+0x11e>
 800032a:	464b      	mov	r3, r9
 800032c:	1b52      	subs	r2, r2, r5
 800032e:	2d00      	cmp	r5, #0
 8000330:	d000      	beq.n	8000334 <__aeabi_fadd+0x60>
 8000332:	e0e0      	b.n	80004f6 <__aeabi_fadd+0x222>
 8000334:	2f00      	cmp	r7, #0
 8000336:	d100      	bne.n	800033a <__aeabi_fadd+0x66>
 8000338:	e0ce      	b.n	80004d8 <__aeabi_fadd+0x204>
 800033a:	1e53      	subs	r3, r2, #1
 800033c:	2a01      	cmp	r2, #1
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x6e>
 8000340:	e155      	b.n	80005ee <__aeabi_fadd+0x31a>
 8000342:	2aff      	cmp	r2, #255	; 0xff
 8000344:	d100      	bne.n	8000348 <__aeabi_fadd+0x74>
 8000346:	e094      	b.n	8000472 <__aeabi_fadd+0x19e>
 8000348:	001a      	movs	r2, r3
 800034a:	e0d9      	b.n	8000500 <__aeabi_fadd+0x22c>
 800034c:	1a2a      	subs	r2, r5, r0
 800034e:	2a00      	cmp	r2, #0
 8000350:	dc00      	bgt.n	8000354 <__aeabi_fadd+0x80>
 8000352:	e099      	b.n	8000488 <__aeabi_fadd+0x1b4>
 8000354:	2800      	cmp	r0, #0
 8000356:	d062      	beq.n	800041e <__aeabi_fadd+0x14a>
 8000358:	2dff      	cmp	r5, #255	; 0xff
 800035a:	d100      	bne.n	800035e <__aeabi_fadd+0x8a>
 800035c:	e08b      	b.n	8000476 <__aeabi_fadd+0x1a2>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	4661      	mov	r1, ip
 8000362:	04db      	lsls	r3, r3, #19
 8000364:	4319      	orrs	r1, r3
 8000366:	468c      	mov	ip, r1
 8000368:	2a1b      	cmp	r2, #27
 800036a:	dc00      	bgt.n	800036e <__aeabi_fadd+0x9a>
 800036c:	e0d2      	b.n	8000514 <__aeabi_fadd+0x240>
 800036e:	2301      	movs	r3, #1
 8000370:	19db      	adds	r3, r3, r7
 8000372:	015a      	lsls	r2, r3, #5
 8000374:	d56a      	bpl.n	800044c <__aeabi_fadd+0x178>
 8000376:	3501      	adds	r5, #1
 8000378:	2dff      	cmp	r5, #255	; 0xff
 800037a:	d05b      	beq.n	8000434 <__aeabi_fadd+0x160>
 800037c:	2201      	movs	r2, #1
 800037e:	49a3      	ldr	r1, [pc, #652]	; (800060c <__aeabi_fadd+0x338>)
 8000380:	401a      	ands	r2, r3
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	400b      	ands	r3, r1
 8000386:	4313      	orrs	r3, r2
 8000388:	e01c      	b.n	80003c4 <__aeabi_fadd+0xf0>
 800038a:	2dff      	cmp	r5, #255	; 0xff
 800038c:	d100      	bne.n	8000390 <__aeabi_fadd+0xbc>
 800038e:	e072      	b.n	8000476 <__aeabi_fadd+0x1a2>
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	4662      	mov	r2, ip
 8000394:	04db      	lsls	r3, r3, #19
 8000396:	431a      	orrs	r2, r3
 8000398:	4694      	mov	ip, r2
 800039a:	281b      	cmp	r0, #27
 800039c:	dc00      	bgt.n	80003a0 <__aeabi_fadd+0xcc>
 800039e:	e090      	b.n	80004c2 <__aeabi_fadd+0x1ee>
 80003a0:	2301      	movs	r3, #1
 80003a2:	1afb      	subs	r3, r7, r3
 80003a4:	015a      	lsls	r2, r3, #5
 80003a6:	d551      	bpl.n	800044c <__aeabi_fadd+0x178>
 80003a8:	019b      	lsls	r3, r3, #6
 80003aa:	099e      	lsrs	r6, r3, #6
 80003ac:	0030      	movs	r0, r6
 80003ae:	f000 fe51 	bl	8001054 <__clzsi2>
 80003b2:	0033      	movs	r3, r6
 80003b4:	3805      	subs	r0, #5
 80003b6:	4083      	lsls	r3, r0
 80003b8:	4285      	cmp	r5, r0
 80003ba:	dc00      	bgt.n	80003be <__aeabi_fadd+0xea>
 80003bc:	e075      	b.n	80004aa <__aeabi_fadd+0x1d6>
 80003be:	4a94      	ldr	r2, [pc, #592]	; (8000610 <__aeabi_fadd+0x33c>)
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	4013      	ands	r3, r2
 80003c4:	075a      	lsls	r2, r3, #29
 80003c6:	d004      	beq.n	80003d2 <__aeabi_fadd+0xfe>
 80003c8:	220f      	movs	r2, #15
 80003ca:	401a      	ands	r2, r3
 80003cc:	2a04      	cmp	r2, #4
 80003ce:	d000      	beq.n	80003d2 <__aeabi_fadd+0xfe>
 80003d0:	3304      	adds	r3, #4
 80003d2:	015a      	lsls	r2, r3, #5
 80003d4:	d53c      	bpl.n	8000450 <__aeabi_fadd+0x17c>
 80003d6:	1c68      	adds	r0, r5, #1
 80003d8:	2dfe      	cmp	r5, #254	; 0xfe
 80003da:	d02b      	beq.n	8000434 <__aeabi_fadd+0x160>
 80003dc:	019b      	lsls	r3, r3, #6
 80003de:	0a5e      	lsrs	r6, r3, #9
 80003e0:	b2c0      	uxtb	r0, r0
 80003e2:	05c0      	lsls	r0, r0, #23
 80003e4:	4330      	orrs	r0, r6
 80003e6:	07e4      	lsls	r4, r4, #31
 80003e8:	4320      	orrs	r0, r4
 80003ea:	bcc0      	pop	{r6, r7}
 80003ec:	46b9      	mov	r9, r7
 80003ee:	46b0      	mov	r8, r6
 80003f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003f2:	20fe      	movs	r0, #254	; 0xfe
 80003f4:	1c6a      	adds	r2, r5, #1
 80003f6:	4210      	tst	r0, r2
 80003f8:	d172      	bne.n	80004e0 <__aeabi_fadd+0x20c>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d000      	beq.n	8000400 <__aeabi_fadd+0x12c>
 80003fe:	e0ae      	b.n	800055e <__aeabi_fadd+0x28a>
 8000400:	2f00      	cmp	r7, #0
 8000402:	d100      	bne.n	8000406 <__aeabi_fadd+0x132>
 8000404:	e0ec      	b.n	80005e0 <__aeabi_fadd+0x30c>
 8000406:	4663      	mov	r3, ip
 8000408:	2000      	movs	r0, #0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0e9      	beq.n	80003e2 <__aeabi_fadd+0x10e>
 800040e:	1afb      	subs	r3, r7, r3
 8000410:	015a      	lsls	r2, r3, #5
 8000412:	d400      	bmi.n	8000416 <__aeabi_fadd+0x142>
 8000414:	e0f3      	b.n	80005fe <__aeabi_fadd+0x32a>
 8000416:	4663      	mov	r3, ip
 8000418:	000c      	movs	r4, r1
 800041a:	1bdb      	subs	r3, r3, r7
 800041c:	e7d2      	b.n	80003c4 <__aeabi_fadd+0xf0>
 800041e:	4661      	mov	r1, ip
 8000420:	2900      	cmp	r1, #0
 8000422:	d05b      	beq.n	80004dc <__aeabi_fadd+0x208>
 8000424:	1e51      	subs	r1, r2, #1
 8000426:	2a01      	cmp	r2, #1
 8000428:	d100      	bne.n	800042c <__aeabi_fadd+0x158>
 800042a:	e0a7      	b.n	800057c <__aeabi_fadd+0x2a8>
 800042c:	2aff      	cmp	r2, #255	; 0xff
 800042e:	d022      	beq.n	8000476 <__aeabi_fadd+0x1a2>
 8000430:	000a      	movs	r2, r1
 8000432:	e799      	b.n	8000368 <__aeabi_fadd+0x94>
 8000434:	20ff      	movs	r0, #255	; 0xff
 8000436:	2600      	movs	r6, #0
 8000438:	e7d3      	b.n	80003e2 <__aeabi_fadd+0x10e>
 800043a:	21fe      	movs	r1, #254	; 0xfe
 800043c:	1c6a      	adds	r2, r5, #1
 800043e:	4211      	tst	r1, r2
 8000440:	d073      	beq.n	800052a <__aeabi_fadd+0x256>
 8000442:	2aff      	cmp	r2, #255	; 0xff
 8000444:	d0f6      	beq.n	8000434 <__aeabi_fadd+0x160>
 8000446:	0015      	movs	r5, r2
 8000448:	4467      	add	r7, ip
 800044a:	087b      	lsrs	r3, r7, #1
 800044c:	075a      	lsls	r2, r3, #29
 800044e:	d1bb      	bne.n	80003c8 <__aeabi_fadd+0xf4>
 8000450:	08db      	lsrs	r3, r3, #3
 8000452:	2dff      	cmp	r5, #255	; 0xff
 8000454:	d00f      	beq.n	8000476 <__aeabi_fadd+0x1a2>
 8000456:	025b      	lsls	r3, r3, #9
 8000458:	0a5e      	lsrs	r6, r3, #9
 800045a:	b2e8      	uxtb	r0, r5
 800045c:	e7c1      	b.n	80003e2 <__aeabi_fadd+0x10e>
 800045e:	4662      	mov	r2, ip
 8000460:	2a00      	cmp	r2, #0
 8000462:	d008      	beq.n	8000476 <__aeabi_fadd+0x1a2>
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	03d2      	lsls	r2, r2, #15
 8000468:	4213      	tst	r3, r2
 800046a:	d004      	beq.n	8000476 <__aeabi_fadd+0x1a2>
 800046c:	4640      	mov	r0, r8
 800046e:	4210      	tst	r0, r2
 8000470:	d101      	bne.n	8000476 <__aeabi_fadd+0x1a2>
 8000472:	000c      	movs	r4, r1
 8000474:	4643      	mov	r3, r8
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0dc      	beq.n	8000434 <__aeabi_fadd+0x160>
 800047a:	2680      	movs	r6, #128	; 0x80
 800047c:	03f6      	lsls	r6, r6, #15
 800047e:	431e      	orrs	r6, r3
 8000480:	0276      	lsls	r6, r6, #9
 8000482:	20ff      	movs	r0, #255	; 0xff
 8000484:	0a76      	lsrs	r6, r6, #9
 8000486:	e7ac      	b.n	80003e2 <__aeabi_fadd+0x10e>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d0d6      	beq.n	800043a <__aeabi_fadd+0x166>
 800048c:	1b42      	subs	r2, r0, r5
 800048e:	2d00      	cmp	r5, #0
 8000490:	d05c      	beq.n	800054c <__aeabi_fadd+0x278>
 8000492:	28ff      	cmp	r0, #255	; 0xff
 8000494:	d0ee      	beq.n	8000474 <__aeabi_fadd+0x1a0>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	04db      	lsls	r3, r3, #19
 800049a:	431f      	orrs	r7, r3
 800049c:	2a1b      	cmp	r2, #27
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_fadd+0x1ce>
 80004a0:	e082      	b.n	80005a8 <__aeabi_fadd+0x2d4>
 80004a2:	2301      	movs	r3, #1
 80004a4:	464d      	mov	r5, r9
 80004a6:	4463      	add	r3, ip
 80004a8:	e763      	b.n	8000372 <__aeabi_fadd+0x9e>
 80004aa:	2220      	movs	r2, #32
 80004ac:	1b40      	subs	r0, r0, r5
 80004ae:	3001      	adds	r0, #1
 80004b0:	1a12      	subs	r2, r2, r0
 80004b2:	0019      	movs	r1, r3
 80004b4:	4093      	lsls	r3, r2
 80004b6:	40c1      	lsrs	r1, r0
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	4193      	sbcs	r3, r2
 80004bc:	2500      	movs	r5, #0
 80004be:	430b      	orrs	r3, r1
 80004c0:	e780      	b.n	80003c4 <__aeabi_fadd+0xf0>
 80004c2:	2320      	movs	r3, #32
 80004c4:	4661      	mov	r1, ip
 80004c6:	1a1b      	subs	r3, r3, r0
 80004c8:	4099      	lsls	r1, r3
 80004ca:	4662      	mov	r2, ip
 80004cc:	000b      	movs	r3, r1
 80004ce:	40c2      	lsrs	r2, r0
 80004d0:	1e59      	subs	r1, r3, #1
 80004d2:	418b      	sbcs	r3, r1
 80004d4:	4313      	orrs	r3, r2
 80004d6:	e764      	b.n	80003a2 <__aeabi_fadd+0xce>
 80004d8:	000c      	movs	r4, r1
 80004da:	4643      	mov	r3, r8
 80004dc:	0015      	movs	r5, r2
 80004de:	e7b8      	b.n	8000452 <__aeabi_fadd+0x17e>
 80004e0:	4663      	mov	r3, ip
 80004e2:	1afe      	subs	r6, r7, r3
 80004e4:	0173      	lsls	r3, r6, #5
 80004e6:	d445      	bmi.n	8000574 <__aeabi_fadd+0x2a0>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fadd+0x21a>
 80004ec:	e75e      	b.n	80003ac <__aeabi_fadd+0xd8>
 80004ee:	2400      	movs	r4, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	2600      	movs	r6, #0
 80004f4:	e775      	b.n	80003e2 <__aeabi_fadd+0x10e>
 80004f6:	2bff      	cmp	r3, #255	; 0xff
 80004f8:	d0bb      	beq.n	8000472 <__aeabi_fadd+0x19e>
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	04db      	lsls	r3, r3, #19
 80004fe:	431f      	orrs	r7, r3
 8000500:	2a1b      	cmp	r2, #27
 8000502:	dd47      	ble.n	8000594 <__aeabi_fadd+0x2c0>
 8000504:	2301      	movs	r3, #1
 8000506:	4662      	mov	r2, ip
 8000508:	000c      	movs	r4, r1
 800050a:	464d      	mov	r5, r9
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	e749      	b.n	80003a4 <__aeabi_fadd+0xd0>
 8000510:	0005      	movs	r5, r0
 8000512:	e79e      	b.n	8000452 <__aeabi_fadd+0x17e>
 8000514:	4661      	mov	r1, ip
 8000516:	2320      	movs	r3, #32
 8000518:	40d1      	lsrs	r1, r2
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	4662      	mov	r2, ip
 800051e:	409a      	lsls	r2, r3
 8000520:	0013      	movs	r3, r2
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4193      	sbcs	r3, r2
 8000526:	430b      	orrs	r3, r1
 8000528:	e722      	b.n	8000370 <__aeabi_fadd+0x9c>
 800052a:	2d00      	cmp	r5, #0
 800052c:	d146      	bne.n	80005bc <__aeabi_fadd+0x2e8>
 800052e:	2f00      	cmp	r7, #0
 8000530:	d062      	beq.n	80005f8 <__aeabi_fadd+0x324>
 8000532:	4663      	mov	r3, ip
 8000534:	2000      	movs	r0, #0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x268>
 800053a:	e752      	b.n	80003e2 <__aeabi_fadd+0x10e>
 800053c:	003b      	movs	r3, r7
 800053e:	4463      	add	r3, ip
 8000540:	015a      	lsls	r2, r3, #5
 8000542:	d583      	bpl.n	800044c <__aeabi_fadd+0x178>
 8000544:	4a32      	ldr	r2, [pc, #200]	; (8000610 <__aeabi_fadd+0x33c>)
 8000546:	3501      	adds	r5, #1
 8000548:	4013      	ands	r3, r2
 800054a:	e77f      	b.n	800044c <__aeabi_fadd+0x178>
 800054c:	2f00      	cmp	r7, #0
 800054e:	d0c4      	beq.n	80004da <__aeabi_fadd+0x206>
 8000550:	1e53      	subs	r3, r2, #1
 8000552:	2a01      	cmp	r2, #1
 8000554:	d012      	beq.n	800057c <__aeabi_fadd+0x2a8>
 8000556:	2aff      	cmp	r2, #255	; 0xff
 8000558:	d08c      	beq.n	8000474 <__aeabi_fadd+0x1a0>
 800055a:	001a      	movs	r2, r3
 800055c:	e79e      	b.n	800049c <__aeabi_fadd+0x1c8>
 800055e:	2f00      	cmp	r7, #0
 8000560:	d000      	beq.n	8000564 <__aeabi_fadd+0x290>
 8000562:	e77c      	b.n	800045e <__aeabi_fadd+0x18a>
 8000564:	4663      	mov	r3, ip
 8000566:	2b00      	cmp	r3, #0
 8000568:	d183      	bne.n	8000472 <__aeabi_fadd+0x19e>
 800056a:	2680      	movs	r6, #128	; 0x80
 800056c:	2400      	movs	r4, #0
 800056e:	20ff      	movs	r0, #255	; 0xff
 8000570:	03f6      	lsls	r6, r6, #15
 8000572:	e736      	b.n	80003e2 <__aeabi_fadd+0x10e>
 8000574:	4663      	mov	r3, ip
 8000576:	000c      	movs	r4, r1
 8000578:	1bde      	subs	r6, r3, r7
 800057a:	e717      	b.n	80003ac <__aeabi_fadd+0xd8>
 800057c:	003b      	movs	r3, r7
 800057e:	4463      	add	r3, ip
 8000580:	2501      	movs	r5, #1
 8000582:	015a      	lsls	r2, r3, #5
 8000584:	d400      	bmi.n	8000588 <__aeabi_fadd+0x2b4>
 8000586:	e761      	b.n	800044c <__aeabi_fadd+0x178>
 8000588:	2502      	movs	r5, #2
 800058a:	e6f7      	b.n	800037c <__aeabi_fadd+0xa8>
 800058c:	4663      	mov	r3, ip
 800058e:	2501      	movs	r5, #1
 8000590:	1afb      	subs	r3, r7, r3
 8000592:	e707      	b.n	80003a4 <__aeabi_fadd+0xd0>
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	0038      	movs	r0, r7
 800059a:	409f      	lsls	r7, r3
 800059c:	003b      	movs	r3, r7
 800059e:	40d0      	lsrs	r0, r2
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	4193      	sbcs	r3, r2
 80005a4:	4303      	orrs	r3, r0
 80005a6:	e7ae      	b.n	8000506 <__aeabi_fadd+0x232>
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	0039      	movs	r1, r7
 80005ae:	409f      	lsls	r7, r3
 80005b0:	003b      	movs	r3, r7
 80005b2:	40d1      	lsrs	r1, r2
 80005b4:	1e5a      	subs	r2, r3, #1
 80005b6:	4193      	sbcs	r3, r2
 80005b8:	430b      	orrs	r3, r1
 80005ba:	e773      	b.n	80004a4 <__aeabi_fadd+0x1d0>
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x2ee>
 80005c0:	e758      	b.n	8000474 <__aeabi_fadd+0x1a0>
 80005c2:	4662      	mov	r2, ip
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x2f6>
 80005c8:	e755      	b.n	8000476 <__aeabi_fadd+0x1a2>
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	03d2      	lsls	r2, r2, #15
 80005ce:	4213      	tst	r3, r2
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x300>
 80005d2:	e750      	b.n	8000476 <__aeabi_fadd+0x1a2>
 80005d4:	4641      	mov	r1, r8
 80005d6:	4211      	tst	r1, r2
 80005d8:	d000      	beq.n	80005dc <__aeabi_fadd+0x308>
 80005da:	e74c      	b.n	8000476 <__aeabi_fadd+0x1a2>
 80005dc:	4643      	mov	r3, r8
 80005de:	e74a      	b.n	8000476 <__aeabi_fadd+0x1a2>
 80005e0:	4663      	mov	r3, ip
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d083      	beq.n	80004ee <__aeabi_fadd+0x21a>
 80005e6:	000c      	movs	r4, r1
 80005e8:	4646      	mov	r6, r8
 80005ea:	2000      	movs	r0, #0
 80005ec:	e6f9      	b.n	80003e2 <__aeabi_fadd+0x10e>
 80005ee:	4663      	mov	r3, ip
 80005f0:	000c      	movs	r4, r1
 80005f2:	1bdb      	subs	r3, r3, r7
 80005f4:	3501      	adds	r5, #1
 80005f6:	e6d5      	b.n	80003a4 <__aeabi_fadd+0xd0>
 80005f8:	4646      	mov	r6, r8
 80005fa:	2000      	movs	r0, #0
 80005fc:	e6f1      	b.n	80003e2 <__aeabi_fadd+0x10e>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d000      	beq.n	8000604 <__aeabi_fadd+0x330>
 8000602:	e723      	b.n	800044c <__aeabi_fadd+0x178>
 8000604:	2400      	movs	r4, #0
 8000606:	2600      	movs	r6, #0
 8000608:	e6eb      	b.n	80003e2 <__aeabi_fadd+0x10e>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	7dffffff 	.word	0x7dffffff
 8000610:	fbffffff 	.word	0xfbffffff

08000614 <__aeabi_fdiv>:
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000616:	464f      	mov	r7, r9
 8000618:	4646      	mov	r6, r8
 800061a:	46d6      	mov	lr, sl
 800061c:	0245      	lsls	r5, r0, #9
 800061e:	b5c0      	push	{r6, r7, lr}
 8000620:	0047      	lsls	r7, r0, #1
 8000622:	1c0c      	adds	r4, r1, #0
 8000624:	0a6d      	lsrs	r5, r5, #9
 8000626:	0e3f      	lsrs	r7, r7, #24
 8000628:	0fc6      	lsrs	r6, r0, #31
 800062a:	2f00      	cmp	r7, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fdiv+0x1c>
 800062e:	e06f      	b.n	8000710 <__aeabi_fdiv+0xfc>
 8000630:	2fff      	cmp	r7, #255	; 0xff
 8000632:	d100      	bne.n	8000636 <__aeabi_fdiv+0x22>
 8000634:	e074      	b.n	8000720 <__aeabi_fdiv+0x10c>
 8000636:	2300      	movs	r3, #0
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	4699      	mov	r9, r3
 800063c:	469a      	mov	sl, r3
 800063e:	00ed      	lsls	r5, r5, #3
 8000640:	04d2      	lsls	r2, r2, #19
 8000642:	4315      	orrs	r5, r2
 8000644:	3f7f      	subs	r7, #127	; 0x7f
 8000646:	0263      	lsls	r3, r4, #9
 8000648:	0a5b      	lsrs	r3, r3, #9
 800064a:	4698      	mov	r8, r3
 800064c:	0063      	lsls	r3, r4, #1
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	0fe4      	lsrs	r4, r4, #31
 8000652:	2b00      	cmp	r3, #0
 8000654:	d04d      	beq.n	80006f2 <__aeabi_fdiv+0xde>
 8000656:	2bff      	cmp	r3, #255	; 0xff
 8000658:	d045      	beq.n	80006e6 <__aeabi_fdiv+0xd2>
 800065a:	4642      	mov	r2, r8
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	00d2      	lsls	r2, r2, #3
 8000660:	04c9      	lsls	r1, r1, #19
 8000662:	4311      	orrs	r1, r2
 8000664:	4688      	mov	r8, r1
 8000666:	2200      	movs	r2, #0
 8000668:	3b7f      	subs	r3, #127	; 0x7f
 800066a:	0031      	movs	r1, r6
 800066c:	1aff      	subs	r7, r7, r3
 800066e:	464b      	mov	r3, r9
 8000670:	4061      	eors	r1, r4
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d900      	bls.n	800067a <__aeabi_fdiv+0x66>
 8000678:	e0b8      	b.n	80007ec <__aeabi_fdiv+0x1d8>
 800067a:	4870      	ldr	r0, [pc, #448]	; (800083c <__aeabi_fdiv+0x228>)
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	58c3      	ldr	r3, [r0, r3]
 8000680:	469f      	mov	pc, r3
 8000682:	2300      	movs	r3, #0
 8000684:	4698      	mov	r8, r3
 8000686:	0026      	movs	r6, r4
 8000688:	4645      	mov	r5, r8
 800068a:	4692      	mov	sl, r2
 800068c:	4653      	mov	r3, sl
 800068e:	2b02      	cmp	r3, #2
 8000690:	d100      	bne.n	8000694 <__aeabi_fdiv+0x80>
 8000692:	e08d      	b.n	80007b0 <__aeabi_fdiv+0x19c>
 8000694:	2b03      	cmp	r3, #3
 8000696:	d100      	bne.n	800069a <__aeabi_fdiv+0x86>
 8000698:	e0a1      	b.n	80007de <__aeabi_fdiv+0x1ca>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d018      	beq.n	80006d0 <__aeabi_fdiv+0xbc>
 800069e:	003b      	movs	r3, r7
 80006a0:	337f      	adds	r3, #127	; 0x7f
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd6d      	ble.n	8000782 <__aeabi_fdiv+0x16e>
 80006a6:	076a      	lsls	r2, r5, #29
 80006a8:	d004      	beq.n	80006b4 <__aeabi_fdiv+0xa0>
 80006aa:	220f      	movs	r2, #15
 80006ac:	402a      	ands	r2, r5
 80006ae:	2a04      	cmp	r2, #4
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fdiv+0xa0>
 80006b2:	3504      	adds	r5, #4
 80006b4:	012a      	lsls	r2, r5, #4
 80006b6:	d503      	bpl.n	80006c0 <__aeabi_fdiv+0xac>
 80006b8:	4b61      	ldr	r3, [pc, #388]	; (8000840 <__aeabi_fdiv+0x22c>)
 80006ba:	401d      	ands	r5, r3
 80006bc:	003b      	movs	r3, r7
 80006be:	3380      	adds	r3, #128	; 0x80
 80006c0:	2bfe      	cmp	r3, #254	; 0xfe
 80006c2:	dd00      	ble.n	80006c6 <__aeabi_fdiv+0xb2>
 80006c4:	e074      	b.n	80007b0 <__aeabi_fdiv+0x19c>
 80006c6:	01aa      	lsls	r2, r5, #6
 80006c8:	0a52      	lsrs	r2, r2, #9
 80006ca:	b2d8      	uxtb	r0, r3
 80006cc:	e002      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80006ce:	000e      	movs	r6, r1
 80006d0:	2000      	movs	r0, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	05c0      	lsls	r0, r0, #23
 80006d6:	07f6      	lsls	r6, r6, #31
 80006d8:	4310      	orrs	r0, r2
 80006da:	4330      	orrs	r0, r6
 80006dc:	bce0      	pop	{r5, r6, r7}
 80006de:	46ba      	mov	sl, r7
 80006e0:	46b1      	mov	r9, r6
 80006e2:	46a8      	mov	r8, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	4643      	mov	r3, r8
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d13f      	bne.n	800076c <__aeabi_fdiv+0x158>
 80006ec:	2202      	movs	r2, #2
 80006ee:	3fff      	subs	r7, #255	; 0xff
 80006f0:	e003      	b.n	80006fa <__aeabi_fdiv+0xe6>
 80006f2:	4643      	mov	r3, r8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d12d      	bne.n	8000754 <__aeabi_fdiv+0x140>
 80006f8:	2201      	movs	r2, #1
 80006fa:	0031      	movs	r1, r6
 80006fc:	464b      	mov	r3, r9
 80006fe:	4061      	eors	r1, r4
 8000700:	b2c9      	uxtb	r1, r1
 8000702:	4313      	orrs	r3, r2
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d838      	bhi.n	800077a <__aeabi_fdiv+0x166>
 8000708:	484e      	ldr	r0, [pc, #312]	; (8000844 <__aeabi_fdiv+0x230>)
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	58c3      	ldr	r3, [r0, r3]
 800070e:	469f      	mov	pc, r3
 8000710:	2d00      	cmp	r5, #0
 8000712:	d113      	bne.n	800073c <__aeabi_fdiv+0x128>
 8000714:	2304      	movs	r3, #4
 8000716:	4699      	mov	r9, r3
 8000718:	3b03      	subs	r3, #3
 800071a:	2700      	movs	r7, #0
 800071c:	469a      	mov	sl, r3
 800071e:	e792      	b.n	8000646 <__aeabi_fdiv+0x32>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d105      	bne.n	8000730 <__aeabi_fdiv+0x11c>
 8000724:	2308      	movs	r3, #8
 8000726:	4699      	mov	r9, r3
 8000728:	3b06      	subs	r3, #6
 800072a:	27ff      	movs	r7, #255	; 0xff
 800072c:	469a      	mov	sl, r3
 800072e:	e78a      	b.n	8000646 <__aeabi_fdiv+0x32>
 8000730:	230c      	movs	r3, #12
 8000732:	4699      	mov	r9, r3
 8000734:	3b09      	subs	r3, #9
 8000736:	27ff      	movs	r7, #255	; 0xff
 8000738:	469a      	mov	sl, r3
 800073a:	e784      	b.n	8000646 <__aeabi_fdiv+0x32>
 800073c:	0028      	movs	r0, r5
 800073e:	f000 fc89 	bl	8001054 <__clzsi2>
 8000742:	2776      	movs	r7, #118	; 0x76
 8000744:	1f43      	subs	r3, r0, #5
 8000746:	409d      	lsls	r5, r3
 8000748:	2300      	movs	r3, #0
 800074a:	427f      	negs	r7, r7
 800074c:	4699      	mov	r9, r3
 800074e:	469a      	mov	sl, r3
 8000750:	1a3f      	subs	r7, r7, r0
 8000752:	e778      	b.n	8000646 <__aeabi_fdiv+0x32>
 8000754:	4640      	mov	r0, r8
 8000756:	f000 fc7d 	bl	8001054 <__clzsi2>
 800075a:	4642      	mov	r2, r8
 800075c:	1f43      	subs	r3, r0, #5
 800075e:	409a      	lsls	r2, r3
 8000760:	2376      	movs	r3, #118	; 0x76
 8000762:	425b      	negs	r3, r3
 8000764:	4690      	mov	r8, r2
 8000766:	1a1b      	subs	r3, r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	e77e      	b.n	800066a <__aeabi_fdiv+0x56>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4691      	mov	r9, r2
 8000774:	33fc      	adds	r3, #252	; 0xfc
 8000776:	2203      	movs	r2, #3
 8000778:	e777      	b.n	800066a <__aeabi_fdiv+0x56>
 800077a:	000e      	movs	r6, r1
 800077c:	20ff      	movs	r0, #255	; 0xff
 800077e:	2200      	movs	r2, #0
 8000780:	e7a8      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 8000782:	2201      	movs	r2, #1
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	2b1b      	cmp	r3, #27
 8000788:	dca2      	bgt.n	80006d0 <__aeabi_fdiv+0xbc>
 800078a:	379e      	adds	r7, #158	; 0x9e
 800078c:	002a      	movs	r2, r5
 800078e:	40bd      	lsls	r5, r7
 8000790:	40da      	lsrs	r2, r3
 8000792:	1e6b      	subs	r3, r5, #1
 8000794:	419d      	sbcs	r5, r3
 8000796:	4315      	orrs	r5, r2
 8000798:	076a      	lsls	r2, r5, #29
 800079a:	d004      	beq.n	80007a6 <__aeabi_fdiv+0x192>
 800079c:	220f      	movs	r2, #15
 800079e:	402a      	ands	r2, r5
 80007a0:	2a04      	cmp	r2, #4
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fdiv+0x192>
 80007a4:	3504      	adds	r5, #4
 80007a6:	016a      	lsls	r2, r5, #5
 80007a8:	d544      	bpl.n	8000834 <__aeabi_fdiv+0x220>
 80007aa:	2001      	movs	r0, #1
 80007ac:	2200      	movs	r2, #0
 80007ae:	e791      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80007b0:	20ff      	movs	r0, #255	; 0xff
 80007b2:	2200      	movs	r2, #0
 80007b4:	e78e      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	2600      	movs	r6, #0
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	03d2      	lsls	r2, r2, #15
 80007be:	e789      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80007c0:	2300      	movs	r3, #0
 80007c2:	4698      	mov	r8, r3
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	03d2      	lsls	r2, r2, #15
 80007c8:	4215      	tst	r5, r2
 80007ca:	d008      	beq.n	80007de <__aeabi_fdiv+0x1ca>
 80007cc:	4643      	mov	r3, r8
 80007ce:	4213      	tst	r3, r2
 80007d0:	d105      	bne.n	80007de <__aeabi_fdiv+0x1ca>
 80007d2:	431a      	orrs	r2, r3
 80007d4:	0252      	lsls	r2, r2, #9
 80007d6:	0026      	movs	r6, r4
 80007d8:	20ff      	movs	r0, #255	; 0xff
 80007da:	0a52      	lsrs	r2, r2, #9
 80007dc:	e77a      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	03d2      	lsls	r2, r2, #15
 80007e2:	432a      	orrs	r2, r5
 80007e4:	0252      	lsls	r2, r2, #9
 80007e6:	20ff      	movs	r0, #255	; 0xff
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	e773      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 80007ec:	4642      	mov	r2, r8
 80007ee:	016b      	lsls	r3, r5, #5
 80007f0:	0155      	lsls	r5, r2, #5
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	d21a      	bcs.n	800082c <__aeabi_fdiv+0x218>
 80007f6:	201b      	movs	r0, #27
 80007f8:	2200      	movs	r2, #0
 80007fa:	3f01      	subs	r7, #1
 80007fc:	2601      	movs	r6, #1
 80007fe:	001c      	movs	r4, r3
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2c00      	cmp	r4, #0
 8000806:	db01      	blt.n	800080c <__aeabi_fdiv+0x1f8>
 8000808:	429d      	cmp	r5, r3
 800080a:	d801      	bhi.n	8000810 <__aeabi_fdiv+0x1fc>
 800080c:	1b5b      	subs	r3, r3, r5
 800080e:	4332      	orrs	r2, r6
 8000810:	3801      	subs	r0, #1
 8000812:	2800      	cmp	r0, #0
 8000814:	d1f3      	bne.n	80007fe <__aeabi_fdiv+0x1ea>
 8000816:	1e58      	subs	r0, r3, #1
 8000818:	4183      	sbcs	r3, r0
 800081a:	4313      	orrs	r3, r2
 800081c:	001d      	movs	r5, r3
 800081e:	003b      	movs	r3, r7
 8000820:	337f      	adds	r3, #127	; 0x7f
 8000822:	000e      	movs	r6, r1
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd00      	ble.n	800082a <__aeabi_fdiv+0x216>
 8000828:	e73d      	b.n	80006a6 <__aeabi_fdiv+0x92>
 800082a:	e7aa      	b.n	8000782 <__aeabi_fdiv+0x16e>
 800082c:	201a      	movs	r0, #26
 800082e:	2201      	movs	r2, #1
 8000830:	1b5b      	subs	r3, r3, r5
 8000832:	e7e3      	b.n	80007fc <__aeabi_fdiv+0x1e8>
 8000834:	01aa      	lsls	r2, r5, #6
 8000836:	2000      	movs	r0, #0
 8000838:	0a52      	lsrs	r2, r2, #9
 800083a:	e74b      	b.n	80006d4 <__aeabi_fdiv+0xc0>
 800083c:	08003b4c 	.word	0x08003b4c
 8000840:	f7ffffff 	.word	0xf7ffffff
 8000844:	08003b8c 	.word	0x08003b8c

08000848 <__eqsf2>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	0042      	lsls	r2, r0, #1
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	024e      	lsls	r6, r1, #9
 8000850:	004c      	lsls	r4, r1, #1
 8000852:	0fc3      	lsrs	r3, r0, #31
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	2001      	movs	r0, #1
 8000858:	0e12      	lsrs	r2, r2, #24
 800085a:	0a76      	lsrs	r6, r6, #9
 800085c:	0e24      	lsrs	r4, r4, #24
 800085e:	0fc9      	lsrs	r1, r1, #31
 8000860:	2aff      	cmp	r2, #255	; 0xff
 8000862:	d006      	beq.n	8000872 <__eqsf2+0x2a>
 8000864:	2cff      	cmp	r4, #255	; 0xff
 8000866:	d003      	beq.n	8000870 <__eqsf2+0x28>
 8000868:	42a2      	cmp	r2, r4
 800086a:	d101      	bne.n	8000870 <__eqsf2+0x28>
 800086c:	42b5      	cmp	r5, r6
 800086e:	d006      	beq.n	800087e <__eqsf2+0x36>
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	2d00      	cmp	r5, #0
 8000874:	d1fc      	bne.n	8000870 <__eqsf2+0x28>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d1fa      	bne.n	8000870 <__eqsf2+0x28>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d1f8      	bne.n	8000870 <__eqsf2+0x28>
 800087e:	428b      	cmp	r3, r1
 8000880:	d006      	beq.n	8000890 <__eqsf2+0x48>
 8000882:	2001      	movs	r0, #1
 8000884:	2a00      	cmp	r2, #0
 8000886:	d1f3      	bne.n	8000870 <__eqsf2+0x28>
 8000888:	0028      	movs	r0, r5
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4198      	sbcs	r0, r3
 800088e:	e7ef      	b.n	8000870 <__eqsf2+0x28>
 8000890:	2000      	movs	r0, #0
 8000892:	e7ed      	b.n	8000870 <__eqsf2+0x28>

08000894 <__gesf2>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0042      	lsls	r2, r0, #1
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	024e      	lsls	r6, r1, #9
 800089c:	004c      	lsls	r4, r1, #1
 800089e:	0fc3      	lsrs	r3, r0, #31
 80008a0:	0a6d      	lsrs	r5, r5, #9
 80008a2:	0e12      	lsrs	r2, r2, #24
 80008a4:	0a76      	lsrs	r6, r6, #9
 80008a6:	0e24      	lsrs	r4, r4, #24
 80008a8:	0fc8      	lsrs	r0, r1, #31
 80008aa:	2aff      	cmp	r2, #255	; 0xff
 80008ac:	d01b      	beq.n	80008e6 <__gesf2+0x52>
 80008ae:	2cff      	cmp	r4, #255	; 0xff
 80008b0:	d00e      	beq.n	80008d0 <__gesf2+0x3c>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d11b      	bne.n	80008ee <__gesf2+0x5a>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d101      	bne.n	80008be <__gesf2+0x2a>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d01c      	beq.n	80008f8 <__gesf2+0x64>
 80008be:	2d00      	cmp	r5, #0
 80008c0:	d00c      	beq.n	80008dc <__gesf2+0x48>
 80008c2:	4283      	cmp	r3, r0
 80008c4:	d01c      	beq.n	8000900 <__gesf2+0x6c>
 80008c6:	2102      	movs	r1, #2
 80008c8:	1e58      	subs	r0, r3, #1
 80008ca:	4008      	ands	r0, r1
 80008cc:	3801      	subs	r0, #1
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d122      	bne.n	800091a <__gesf2+0x86>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d1f4      	bne.n	80008c2 <__gesf2+0x2e>
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d1f2      	bne.n	80008c2 <__gesf2+0x2e>
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1f6      	bne.n	80008ce <__gesf2+0x3a>
 80008e0:	2001      	movs	r0, #1
 80008e2:	4240      	negs	r0, r0
 80008e4:	e7f3      	b.n	80008ce <__gesf2+0x3a>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d117      	bne.n	800091a <__gesf2+0x86>
 80008ea:	2cff      	cmp	r4, #255	; 0xff
 80008ec:	d0f0      	beq.n	80008d0 <__gesf2+0x3c>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d1e7      	bne.n	80008c2 <__gesf2+0x2e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d1e5      	bne.n	80008c2 <__gesf2+0x2e>
 80008f6:	e7e6      	b.n	80008c6 <__gesf2+0x32>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d0e7      	beq.n	80008ce <__gesf2+0x3a>
 80008fe:	e7e2      	b.n	80008c6 <__gesf2+0x32>
 8000900:	42a2      	cmp	r2, r4
 8000902:	dc05      	bgt.n	8000910 <__gesf2+0x7c>
 8000904:	dbea      	blt.n	80008dc <__gesf2+0x48>
 8000906:	42b5      	cmp	r5, r6
 8000908:	d802      	bhi.n	8000910 <__gesf2+0x7c>
 800090a:	d3e7      	bcc.n	80008dc <__gesf2+0x48>
 800090c:	2000      	movs	r0, #0
 800090e:	e7de      	b.n	80008ce <__gesf2+0x3a>
 8000910:	4243      	negs	r3, r0
 8000912:	4158      	adcs	r0, r3
 8000914:	0040      	lsls	r0, r0, #1
 8000916:	3801      	subs	r0, #1
 8000918:	e7d9      	b.n	80008ce <__gesf2+0x3a>
 800091a:	2002      	movs	r0, #2
 800091c:	4240      	negs	r0, r0
 800091e:	e7d6      	b.n	80008ce <__gesf2+0x3a>

08000920 <__lesf2>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	0042      	lsls	r2, r0, #1
 8000924:	0245      	lsls	r5, r0, #9
 8000926:	024e      	lsls	r6, r1, #9
 8000928:	004c      	lsls	r4, r1, #1
 800092a:	0fc3      	lsrs	r3, r0, #31
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	0e12      	lsrs	r2, r2, #24
 8000930:	0a76      	lsrs	r6, r6, #9
 8000932:	0e24      	lsrs	r4, r4, #24
 8000934:	0fc8      	lsrs	r0, r1, #31
 8000936:	2aff      	cmp	r2, #255	; 0xff
 8000938:	d00b      	beq.n	8000952 <__lesf2+0x32>
 800093a:	2cff      	cmp	r4, #255	; 0xff
 800093c:	d00d      	beq.n	800095a <__lesf2+0x3a>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d11f      	bne.n	8000982 <__lesf2+0x62>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d116      	bne.n	8000974 <__lesf2+0x54>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d114      	bne.n	8000974 <__lesf2+0x54>
 800094a:	2000      	movs	r0, #0
 800094c:	2d00      	cmp	r5, #0
 800094e:	d010      	beq.n	8000972 <__lesf2+0x52>
 8000950:	e009      	b.n	8000966 <__lesf2+0x46>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d10c      	bne.n	8000970 <__lesf2+0x50>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d113      	bne.n	8000982 <__lesf2+0x62>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d108      	bne.n	8000970 <__lesf2+0x50>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d008      	beq.n	8000974 <__lesf2+0x54>
 8000962:	4283      	cmp	r3, r0
 8000964:	d012      	beq.n	800098c <__lesf2+0x6c>
 8000966:	2102      	movs	r1, #2
 8000968:	1e58      	subs	r0, r3, #1
 800096a:	4008      	ands	r0, r1
 800096c:	3801      	subs	r0, #1
 800096e:	e000      	b.n	8000972 <__lesf2+0x52>
 8000970:	2002      	movs	r0, #2
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	2d00      	cmp	r5, #0
 8000976:	d1f4      	bne.n	8000962 <__lesf2+0x42>
 8000978:	2800      	cmp	r0, #0
 800097a:	d1fa      	bne.n	8000972 <__lesf2+0x52>
 800097c:	2001      	movs	r0, #1
 800097e:	4240      	negs	r0, r0
 8000980:	e7f7      	b.n	8000972 <__lesf2+0x52>
 8000982:	2c00      	cmp	r4, #0
 8000984:	d1ed      	bne.n	8000962 <__lesf2+0x42>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d1eb      	bne.n	8000962 <__lesf2+0x42>
 800098a:	e7ec      	b.n	8000966 <__lesf2+0x46>
 800098c:	42a2      	cmp	r2, r4
 800098e:	dc05      	bgt.n	800099c <__lesf2+0x7c>
 8000990:	dbf2      	blt.n	8000978 <__lesf2+0x58>
 8000992:	42b5      	cmp	r5, r6
 8000994:	d802      	bhi.n	800099c <__lesf2+0x7c>
 8000996:	d3ef      	bcc.n	8000978 <__lesf2+0x58>
 8000998:	2000      	movs	r0, #0
 800099a:	e7ea      	b.n	8000972 <__lesf2+0x52>
 800099c:	4243      	negs	r3, r0
 800099e:	4158      	adcs	r0, r3
 80009a0:	0040      	lsls	r0, r0, #1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7e5      	b.n	8000972 <__lesf2+0x52>
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <__aeabi_fmul>:
 80009a8:	0243      	lsls	r3, r0, #9
 80009aa:	0a5b      	lsrs	r3, r3, #9
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	464f      	mov	r7, r9
 80009b0:	4646      	mov	r6, r8
 80009b2:	4699      	mov	r9, r3
 80009b4:	46d6      	mov	lr, sl
 80009b6:	0fc3      	lsrs	r3, r0, #31
 80009b8:	0045      	lsls	r5, r0, #1
 80009ba:	4698      	mov	r8, r3
 80009bc:	b5c0      	push	{r6, r7, lr}
 80009be:	464b      	mov	r3, r9
 80009c0:	1c0f      	adds	r7, r1, #0
 80009c2:	0e2d      	lsrs	r5, r5, #24
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x20>
 80009c6:	e0cb      	b.n	8000b60 <__aeabi_fmul+0x1b8>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d100      	bne.n	80009ce <__aeabi_fmul+0x26>
 80009cc:	e0cf      	b.n	8000b6e <__aeabi_fmul+0x1c6>
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	04d2      	lsls	r2, r2, #19
 80009d4:	431a      	orrs	r2, r3
 80009d6:	2300      	movs	r3, #0
 80009d8:	4691      	mov	r9, r2
 80009da:	2600      	movs	r6, #0
 80009dc:	469a      	mov	sl, r3
 80009de:	3d7f      	subs	r5, #127	; 0x7f
 80009e0:	027c      	lsls	r4, r7, #9
 80009e2:	007b      	lsls	r3, r7, #1
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0e1b      	lsrs	r3, r3, #24
 80009e8:	0fff      	lsrs	r7, r7, #31
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fmul+0x48>
 80009ee:	e0a9      	b.n	8000b44 <__aeabi_fmul+0x19c>
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d011      	beq.n	8000a18 <__aeabi_fmul+0x70>
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	00e4      	lsls	r4, r4, #3
 80009f8:	04d2      	lsls	r2, r2, #19
 80009fa:	4314      	orrs	r4, r2
 80009fc:	4642      	mov	r2, r8
 80009fe:	3b7f      	subs	r3, #127	; 0x7f
 8000a00:	195b      	adds	r3, r3, r5
 8000a02:	407a      	eors	r2, r7
 8000a04:	2000      	movs	r0, #0
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	1c5d      	adds	r5, r3, #1
 8000a0a:	2e0a      	cmp	r6, #10
 8000a0c:	dd13      	ble.n	8000a36 <__aeabi_fmul+0x8e>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	2e0b      	cmp	r6, #11
 8000a12:	d047      	beq.n	8000aa4 <__aeabi_fmul+0xfc>
 8000a14:	4647      	mov	r7, r8
 8000a16:	e03f      	b.n	8000a98 <__aeabi_fmul+0xf0>
 8000a18:	002b      	movs	r3, r5
 8000a1a:	33ff      	adds	r3, #255	; 0xff
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d11e      	bne.n	8000a5e <__aeabi_fmul+0xb6>
 8000a20:	2202      	movs	r2, #2
 8000a22:	4316      	orrs	r6, r2
 8000a24:	4642      	mov	r2, r8
 8000a26:	3501      	adds	r5, #1
 8000a28:	407a      	eors	r2, r7
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	35ff      	adds	r5, #255	; 0xff
 8000a2e:	2e0a      	cmp	r6, #10
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_fmul+0x8c>
 8000a32:	e0e4      	b.n	8000bfe <__aeabi_fmul+0x256>
 8000a34:	2002      	movs	r0, #2
 8000a36:	2e02      	cmp	r6, #2
 8000a38:	dc1c      	bgt.n	8000a74 <__aeabi_fmul+0xcc>
 8000a3a:	3e01      	subs	r6, #1
 8000a3c:	2e01      	cmp	r6, #1
 8000a3e:	d842      	bhi.n	8000ac6 <__aeabi_fmul+0x11e>
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d03d      	beq.n	8000ac0 <__aeabi_fmul+0x118>
 8000a44:	2801      	cmp	r0, #1
 8000a46:	d166      	bne.n	8000b16 <__aeabi_fmul+0x16e>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	05c0      	lsls	r0, r0, #23
 8000a4e:	4308      	orrs	r0, r1
 8000a50:	07d2      	lsls	r2, r2, #31
 8000a52:	4310      	orrs	r0, r2
 8000a54:	bce0      	pop	{r5, r6, r7}
 8000a56:	46ba      	mov	sl, r7
 8000a58:	46b1      	mov	r9, r6
 8000a5a:	46a8      	mov	r8, r5
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4316      	orrs	r6, r2
 8000a62:	4642      	mov	r2, r8
 8000a64:	3501      	adds	r5, #1
 8000a66:	407a      	eors	r2, r7
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	35ff      	adds	r5, #255	; 0xff
 8000a6c:	2e0a      	cmp	r6, #10
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fmul+0xca>
 8000a70:	e0e4      	b.n	8000c3c <__aeabi_fmul+0x294>
 8000a72:	2003      	movs	r0, #3
 8000a74:	2101      	movs	r1, #1
 8000a76:	40b1      	lsls	r1, r6
 8000a78:	26a6      	movs	r6, #166	; 0xa6
 8000a7a:	00f6      	lsls	r6, r6, #3
 8000a7c:	4231      	tst	r1, r6
 8000a7e:	d10a      	bne.n	8000a96 <__aeabi_fmul+0xee>
 8000a80:	2690      	movs	r6, #144	; 0x90
 8000a82:	00b6      	lsls	r6, r6, #2
 8000a84:	4231      	tst	r1, r6
 8000a86:	d116      	bne.n	8000ab6 <__aeabi_fmul+0x10e>
 8000a88:	3eb9      	subs	r6, #185	; 0xb9
 8000a8a:	3eff      	subs	r6, #255	; 0xff
 8000a8c:	420e      	tst	r6, r1
 8000a8e:	d01a      	beq.n	8000ac6 <__aeabi_fmul+0x11e>
 8000a90:	46a1      	mov	r9, r4
 8000a92:	4682      	mov	sl, r0
 8000a94:	e000      	b.n	8000a98 <__aeabi_fmul+0xf0>
 8000a96:	0017      	movs	r7, r2
 8000a98:	4653      	mov	r3, sl
 8000a9a:	003a      	movs	r2, r7
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d00f      	beq.n	8000ac0 <__aeabi_fmul+0x118>
 8000aa0:	464c      	mov	r4, r9
 8000aa2:	4650      	mov	r0, sl
 8000aa4:	2803      	cmp	r0, #3
 8000aa6:	d1cd      	bne.n	8000a44 <__aeabi_fmul+0x9c>
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	03c9      	lsls	r1, r1, #15
 8000aac:	4321      	orrs	r1, r4
 8000aae:	0249      	lsls	r1, r1, #9
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	0a49      	lsrs	r1, r1, #9
 8000ab4:	e7ca      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	2200      	movs	r2, #0
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	03c9      	lsls	r1, r1, #15
 8000abe:	e7c5      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	e7c2      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000ac6:	0c20      	lsrs	r0, r4, #16
 8000ac8:	4649      	mov	r1, r9
 8000aca:	0424      	lsls	r4, r4, #16
 8000acc:	0c24      	lsrs	r4, r4, #16
 8000ace:	0027      	movs	r7, r4
 8000ad0:	0c0e      	lsrs	r6, r1, #16
 8000ad2:	0409      	lsls	r1, r1, #16
 8000ad4:	0c09      	lsrs	r1, r1, #16
 8000ad6:	4374      	muls	r4, r6
 8000ad8:	434f      	muls	r7, r1
 8000ada:	4346      	muls	r6, r0
 8000adc:	4348      	muls	r0, r1
 8000ade:	0c39      	lsrs	r1, r7, #16
 8000ae0:	1900      	adds	r0, r0, r4
 8000ae2:	1809      	adds	r1, r1, r0
 8000ae4:	428c      	cmp	r4, r1
 8000ae6:	d903      	bls.n	8000af0 <__aeabi_fmul+0x148>
 8000ae8:	2080      	movs	r0, #128	; 0x80
 8000aea:	0240      	lsls	r0, r0, #9
 8000aec:	4684      	mov	ip, r0
 8000aee:	4466      	add	r6, ip
 8000af0:	043f      	lsls	r7, r7, #16
 8000af2:	0408      	lsls	r0, r1, #16
 8000af4:	0c3f      	lsrs	r7, r7, #16
 8000af6:	19c0      	adds	r0, r0, r7
 8000af8:	0184      	lsls	r4, r0, #6
 8000afa:	1e67      	subs	r7, r4, #1
 8000afc:	41bc      	sbcs	r4, r7
 8000afe:	0c09      	lsrs	r1, r1, #16
 8000b00:	0e80      	lsrs	r0, r0, #26
 8000b02:	1989      	adds	r1, r1, r6
 8000b04:	4304      	orrs	r4, r0
 8000b06:	0189      	lsls	r1, r1, #6
 8000b08:	430c      	orrs	r4, r1
 8000b0a:	0109      	lsls	r1, r1, #4
 8000b0c:	d571      	bpl.n	8000bf2 <__aeabi_fmul+0x24a>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	0861      	lsrs	r1, r4, #1
 8000b12:	401c      	ands	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	002b      	movs	r3, r5
 8000b18:	337f      	adds	r3, #127	; 0x7f
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dd51      	ble.n	8000bc2 <__aeabi_fmul+0x21a>
 8000b1e:	0761      	lsls	r1, r4, #29
 8000b20:	d004      	beq.n	8000b2c <__aeabi_fmul+0x184>
 8000b22:	210f      	movs	r1, #15
 8000b24:	4021      	ands	r1, r4
 8000b26:	2904      	cmp	r1, #4
 8000b28:	d000      	beq.n	8000b2c <__aeabi_fmul+0x184>
 8000b2a:	3404      	adds	r4, #4
 8000b2c:	0121      	lsls	r1, r4, #4
 8000b2e:	d503      	bpl.n	8000b38 <__aeabi_fmul+0x190>
 8000b30:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <__aeabi_fmul+0x298>)
 8000b32:	401c      	ands	r4, r3
 8000b34:	002b      	movs	r3, r5
 8000b36:	3380      	adds	r3, #128	; 0x80
 8000b38:	2bfe      	cmp	r3, #254	; 0xfe
 8000b3a:	dcc1      	bgt.n	8000ac0 <__aeabi_fmul+0x118>
 8000b3c:	01a1      	lsls	r1, r4, #6
 8000b3e:	0a49      	lsrs	r1, r1, #9
 8000b40:	b2d8      	uxtb	r0, r3
 8000b42:	e783      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d12c      	bne.n	8000ba2 <__aeabi_fmul+0x1fa>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4642      	mov	r2, r8
 8000b4c:	431e      	orrs	r6, r3
 8000b4e:	002b      	movs	r3, r5
 8000b50:	407a      	eors	r2, r7
 8000b52:	2001      	movs	r0, #1
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	1c5d      	adds	r5, r3, #1
 8000b58:	2e0a      	cmp	r6, #10
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_fmul+0x1b6>
 8000b5c:	e757      	b.n	8000a0e <__aeabi_fmul+0x66>
 8000b5e:	e76a      	b.n	8000a36 <__aeabi_fmul+0x8e>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d110      	bne.n	8000b86 <__aeabi_fmul+0x1de>
 8000b64:	2301      	movs	r3, #1
 8000b66:	2604      	movs	r6, #4
 8000b68:	2500      	movs	r5, #0
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	e738      	b.n	80009e0 <__aeabi_fmul+0x38>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <__aeabi_fmul+0x1d4>
 8000b72:	2302      	movs	r3, #2
 8000b74:	2608      	movs	r6, #8
 8000b76:	25ff      	movs	r5, #255	; 0xff
 8000b78:	469a      	mov	sl, r3
 8000b7a:	e731      	b.n	80009e0 <__aeabi_fmul+0x38>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	260c      	movs	r6, #12
 8000b80:	25ff      	movs	r5, #255	; 0xff
 8000b82:	469a      	mov	sl, r3
 8000b84:	e72c      	b.n	80009e0 <__aeabi_fmul+0x38>
 8000b86:	4648      	mov	r0, r9
 8000b88:	f000 fa64 	bl	8001054 <__clzsi2>
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	1f43      	subs	r3, r0, #5
 8000b90:	2576      	movs	r5, #118	; 0x76
 8000b92:	409a      	lsls	r2, r3
 8000b94:	2300      	movs	r3, #0
 8000b96:	426d      	negs	r5, r5
 8000b98:	4691      	mov	r9, r2
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	1a2d      	subs	r5, r5, r0
 8000ba0:	e71e      	b.n	80009e0 <__aeabi_fmul+0x38>
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f000 fa56 	bl	8001054 <__clzsi2>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	1f43      	subs	r3, r0, #5
 8000bac:	409c      	lsls	r4, r3
 8000bae:	1a2b      	subs	r3, r5, r0
 8000bb0:	3b76      	subs	r3, #118	; 0x76
 8000bb2:	407a      	eors	r2, r7
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	1c5d      	adds	r5, r3, #1
 8000bba:	2e0a      	cmp	r6, #10
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_fmul+0x218>
 8000bbe:	e726      	b.n	8000a0e <__aeabi_fmul+0x66>
 8000bc0:	e739      	b.n	8000a36 <__aeabi_fmul+0x8e>
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	1acb      	subs	r3, r1, r3
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	dd00      	ble.n	8000bcc <__aeabi_fmul+0x224>
 8000bca:	e73d      	b.n	8000a48 <__aeabi_fmul+0xa0>
 8000bcc:	359e      	adds	r5, #158	; 0x9e
 8000bce:	0021      	movs	r1, r4
 8000bd0:	40ac      	lsls	r4, r5
 8000bd2:	40d9      	lsrs	r1, r3
 8000bd4:	1e63      	subs	r3, r4, #1
 8000bd6:	419c      	sbcs	r4, r3
 8000bd8:	4321      	orrs	r1, r4
 8000bda:	074b      	lsls	r3, r1, #29
 8000bdc:	d004      	beq.n	8000be8 <__aeabi_fmul+0x240>
 8000bde:	230f      	movs	r3, #15
 8000be0:	400b      	ands	r3, r1
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fmul+0x240>
 8000be6:	3104      	adds	r1, #4
 8000be8:	014b      	lsls	r3, r1, #5
 8000bea:	d504      	bpl.n	8000bf6 <__aeabi_fmul+0x24e>
 8000bec:	2001      	movs	r0, #1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e72c      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000bf2:	001d      	movs	r5, r3
 8000bf4:	e78f      	b.n	8000b16 <__aeabi_fmul+0x16e>
 8000bf6:	0189      	lsls	r1, r1, #6
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	0a49      	lsrs	r1, r1, #9
 8000bfc:	e726      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	2e0f      	cmp	r6, #15
 8000c02:	d10c      	bne.n	8000c1e <__aeabi_fmul+0x276>
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	464b      	mov	r3, r9
 8000c08:	03c9      	lsls	r1, r1, #15
 8000c0a:	420b      	tst	r3, r1
 8000c0c:	d00d      	beq.n	8000c2a <__aeabi_fmul+0x282>
 8000c0e:	420c      	tst	r4, r1
 8000c10:	d10b      	bne.n	8000c2a <__aeabi_fmul+0x282>
 8000c12:	4321      	orrs	r1, r4
 8000c14:	0249      	lsls	r1, r1, #9
 8000c16:	003a      	movs	r2, r7
 8000c18:	20ff      	movs	r0, #255	; 0xff
 8000c1a:	0a49      	lsrs	r1, r1, #9
 8000c1c:	e716      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000c1e:	2e0b      	cmp	r6, #11
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x27c>
 8000c22:	e6f7      	b.n	8000a14 <__aeabi_fmul+0x6c>
 8000c24:	46a1      	mov	r9, r4
 8000c26:	469a      	mov	sl, r3
 8000c28:	e736      	b.n	8000a98 <__aeabi_fmul+0xf0>
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	464b      	mov	r3, r9
 8000c2e:	03c9      	lsls	r1, r1, #15
 8000c30:	4319      	orrs	r1, r3
 8000c32:	0249      	lsls	r1, r1, #9
 8000c34:	4642      	mov	r2, r8
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	0a49      	lsrs	r1, r1, #9
 8000c3a:	e707      	b.n	8000a4c <__aeabi_fmul+0xa4>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e7df      	b.n	8000c00 <__aeabi_fmul+0x258>
 8000c40:	f7ffffff 	.word	0xf7ffffff

08000c44 <__aeabi_fsub>:
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	46c6      	mov	lr, r8
 8000c48:	0243      	lsls	r3, r0, #9
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	0045      	lsls	r5, r0, #1
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	0fc4      	lsrs	r4, r0, #31
 8000c52:	0248      	lsls	r0, r1, #9
 8000c54:	004f      	lsls	r7, r1, #1
 8000c56:	4694      	mov	ip, r2
 8000c58:	0a42      	lsrs	r2, r0, #9
 8000c5a:	001e      	movs	r6, r3
 8000c5c:	4690      	mov	r8, r2
 8000c5e:	b500      	push	{lr}
 8000c60:	0e2d      	lsrs	r5, r5, #24
 8000c62:	0e3f      	lsrs	r7, r7, #24
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	0980      	lsrs	r0, r0, #6
 8000c68:	2fff      	cmp	r7, #255	; 0xff
 8000c6a:	d059      	beq.n	8000d20 <__aeabi_fsub+0xdc>
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4051      	eors	r1, r2
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d039      	beq.n	8000ce8 <__aeabi_fsub+0xa4>
 8000c74:	1bea      	subs	r2, r5, r7
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	dd58      	ble.n	8000d2c <__aeabi_fsub+0xe8>
 8000c7a:	2f00      	cmp	r7, #0
 8000c7c:	d068      	beq.n	8000d50 <__aeabi_fsub+0x10c>
 8000c7e:	2dff      	cmp	r5, #255	; 0xff
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x40>
 8000c82:	e0d1      	b.n	8000e28 <__aeabi_fsub+0x1e4>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	04db      	lsls	r3, r3, #19
 8000c88:	4318      	orrs	r0, r3
 8000c8a:	2a1b      	cmp	r2, #27
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0x4c>
 8000c8e:	e0e3      	b.n	8000e58 <__aeabi_fsub+0x214>
 8000c90:	2301      	movs	r3, #1
 8000c92:	4662      	mov	r2, ip
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	015a      	lsls	r2, r3, #5
 8000c98:	d400      	bmi.n	8000c9c <__aeabi_fsub+0x58>
 8000c9a:	e0ac      	b.n	8000df6 <__aeabi_fsub+0x1b2>
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	099e      	lsrs	r6, r3, #6
 8000ca0:	0030      	movs	r0, r6
 8000ca2:	f000 f9d7 	bl	8001054 <__clzsi2>
 8000ca6:	0033      	movs	r3, r6
 8000ca8:	3805      	subs	r0, #5
 8000caa:	4083      	lsls	r3, r0
 8000cac:	4285      	cmp	r5, r0
 8000cae:	dc00      	bgt.n	8000cb2 <__aeabi_fsub+0x6e>
 8000cb0:	e0c6      	b.n	8000e40 <__aeabi_fsub+0x1fc>
 8000cb2:	4ab2      	ldr	r2, [pc, #712]	; (8000f7c <__aeabi_fsub+0x338>)
 8000cb4:	1a2d      	subs	r5, r5, r0
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	075a      	lsls	r2, r3, #29
 8000cba:	d004      	beq.n	8000cc6 <__aeabi_fsub+0x82>
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	2a04      	cmp	r2, #4
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fsub+0x82>
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	015a      	lsls	r2, r3, #5
 8000cc8:	d400      	bmi.n	8000ccc <__aeabi_fsub+0x88>
 8000cca:	e097      	b.n	8000dfc <__aeabi_fsub+0x1b8>
 8000ccc:	1c6a      	adds	r2, r5, #1
 8000cce:	2dfe      	cmp	r5, #254	; 0xfe
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x90>
 8000cd2:	e084      	b.n	8000dde <__aeabi_fsub+0x19a>
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	0a5e      	lsrs	r6, r3, #9
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	05d0      	lsls	r0, r2, #23
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	07e4      	lsls	r4, r4, #31
 8000ce0:	4320      	orrs	r0, r4
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	46b8      	mov	r8, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	1bea      	subs	r2, r5, r7
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	dd41      	ble.n	8000d72 <__aeabi_fsub+0x12e>
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d06b      	beq.n	8000dca <__aeabi_fsub+0x186>
 8000cf2:	2dff      	cmp	r5, #255	; 0xff
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0xb4>
 8000cf6:	e097      	b.n	8000e28 <__aeabi_fsub+0x1e4>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	4318      	orrs	r0, r3
 8000cfe:	2a1b      	cmp	r2, #27
 8000d00:	dc00      	bgt.n	8000d04 <__aeabi_fsub+0xc0>
 8000d02:	e0cc      	b.n	8000e9e <__aeabi_fsub+0x25a>
 8000d04:	2301      	movs	r3, #1
 8000d06:	4463      	add	r3, ip
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	d574      	bpl.n	8000df6 <__aeabi_fsub+0x1b2>
 8000d0c:	3501      	adds	r5, #1
 8000d0e:	2dff      	cmp	r5, #255	; 0xff
 8000d10:	d065      	beq.n	8000dde <__aeabi_fsub+0x19a>
 8000d12:	2201      	movs	r2, #1
 8000d14:	499a      	ldr	r1, [pc, #616]	; (8000f80 <__aeabi_fsub+0x33c>)
 8000d16:	401a      	ands	r2, r3
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	e7cb      	b.n	8000cb8 <__aeabi_fsub+0x74>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d01f      	beq.n	8000d64 <__aeabi_fsub+0x120>
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d022      	beq.n	8000d6e <__aeabi_fsub+0x12a>
 8000d28:	002a      	movs	r2, r5
 8000d2a:	3aff      	subs	r2, #255	; 0xff
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d035      	beq.n	8000d9c <__aeabi_fsub+0x158>
 8000d30:	1b7a      	subs	r2, r7, r5
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d000      	beq.n	8000d38 <__aeabi_fsub+0xf4>
 8000d36:	e099      	b.n	8000e6c <__aeabi_fsub+0x228>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xfc>
 8000d3e:	e0dd      	b.n	8000efc <__aeabi_fsub+0x2b8>
 8000d40:	1e53      	subs	r3, r2, #1
 8000d42:	2a01      	cmp	r2, #1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x104>
 8000d46:	e105      	b.n	8000f54 <__aeabi_fsub+0x310>
 8000d48:	2aff      	cmp	r2, #255	; 0xff
 8000d4a:	d06b      	beq.n	8000e24 <__aeabi_fsub+0x1e0>
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	e094      	b.n	8000e7a <__aeabi_fsub+0x236>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d073      	beq.n	8000e3c <__aeabi_fsub+0x1f8>
 8000d54:	1e51      	subs	r1, r2, #1
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x118>
 8000d5a:	e0df      	b.n	8000f1c <__aeabi_fsub+0x2d8>
 8000d5c:	2aff      	cmp	r2, #255	; 0xff
 8000d5e:	d063      	beq.n	8000e28 <__aeabi_fsub+0x1e4>
 8000d60:	000a      	movs	r2, r1
 8000d62:	e792      	b.n	8000c8a <__aeabi_fsub+0x46>
 8000d64:	2201      	movs	r2, #1
 8000d66:	4051      	eors	r1, r2
 8000d68:	42a1      	cmp	r1, r4
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fsub+0x12a>
 8000d6c:	e782      	b.n	8000c74 <__aeabi_fsub+0x30>
 8000d6e:	002a      	movs	r2, r5
 8000d70:	3aff      	subs	r2, #255	; 0xff
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d036      	beq.n	8000de4 <__aeabi_fsub+0x1a0>
 8000d76:	1b7a      	subs	r2, r7, r5
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x13a>
 8000d7c:	e0aa      	b.n	8000ed4 <__aeabi_fsub+0x290>
 8000d7e:	2fff      	cmp	r7, #255	; 0xff
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x140>
 8000d82:	e0da      	b.n	8000f3a <__aeabi_fsub+0x2f6>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	4661      	mov	r1, ip
 8000d88:	04db      	lsls	r3, r3, #19
 8000d8a:	4319      	orrs	r1, r3
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2a1b      	cmp	r2, #27
 8000d90:	dc00      	bgt.n	8000d94 <__aeabi_fsub+0x150>
 8000d92:	e0d4      	b.n	8000f3e <__aeabi_fsub+0x2fa>
 8000d94:	2301      	movs	r3, #1
 8000d96:	003d      	movs	r5, r7
 8000d98:	181b      	adds	r3, r3, r0
 8000d9a:	e7b5      	b.n	8000d08 <__aeabi_fsub+0xc4>
 8000d9c:	27fe      	movs	r7, #254	; 0xfe
 8000d9e:	1c6a      	adds	r2, r5, #1
 8000da0:	4217      	tst	r7, r2
 8000da2:	d171      	bne.n	8000e88 <__aeabi_fsub+0x244>
 8000da4:	2d00      	cmp	r5, #0
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x166>
 8000da8:	e09e      	b.n	8000ee8 <__aeabi_fsub+0x2a4>
 8000daa:	4663      	mov	r3, ip
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x16e>
 8000db0:	e0d5      	b.n	8000f5e <__aeabi_fsub+0x31a>
 8000db2:	2200      	movs	r2, #0
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x176>
 8000db8:	e78f      	b.n	8000cda <__aeabi_fsub+0x96>
 8000dba:	1a1b      	subs	r3, r3, r0
 8000dbc:	015e      	lsls	r6, r3, #5
 8000dbe:	d400      	bmi.n	8000dc2 <__aeabi_fsub+0x17e>
 8000dc0:	e0d6      	b.n	8000f70 <__aeabi_fsub+0x32c>
 8000dc2:	4663      	mov	r3, ip
 8000dc4:	000c      	movs	r4, r1
 8000dc6:	1ac3      	subs	r3, r0, r3
 8000dc8:	e776      	b.n	8000cb8 <__aeabi_fsub+0x74>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d036      	beq.n	8000e3c <__aeabi_fsub+0x1f8>
 8000dce:	1e51      	subs	r1, r2, #1
 8000dd0:	2a01      	cmp	r2, #1
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x192>
 8000dd4:	e09a      	b.n	8000f0c <__aeabi_fsub+0x2c8>
 8000dd6:	2aff      	cmp	r2, #255	; 0xff
 8000dd8:	d026      	beq.n	8000e28 <__aeabi_fsub+0x1e4>
 8000dda:	000a      	movs	r2, r1
 8000ddc:	e78f      	b.n	8000cfe <__aeabi_fsub+0xba>
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	2600      	movs	r6, #0
 8000de2:	e77a      	b.n	8000cda <__aeabi_fsub+0x96>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d062      	beq.n	8000eb2 <__aeabi_fsub+0x26e>
 8000dec:	2aff      	cmp	r2, #255	; 0xff
 8000dee:	d0f6      	beq.n	8000dde <__aeabi_fsub+0x19a>
 8000df0:	0015      	movs	r5, r2
 8000df2:	4460      	add	r0, ip
 8000df4:	0843      	lsrs	r3, r0, #1
 8000df6:	075a      	lsls	r2, r3, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fsub+0x1b8>
 8000dfa:	e75f      	b.n	8000cbc <__aeabi_fsub+0x78>
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	2dff      	cmp	r5, #255	; 0xff
 8000e00:	d012      	beq.n	8000e28 <__aeabi_fsub+0x1e4>
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	0a5e      	lsrs	r6, r3, #9
 8000e06:	b2ea      	uxtb	r2, r5
 8000e08:	e767      	b.n	8000cda <__aeabi_fsub+0x96>
 8000e0a:	4662      	mov	r2, ip
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x1ce>
 8000e10:	e093      	b.n	8000f3a <__aeabi_fsub+0x2f6>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d008      	beq.n	8000e28 <__aeabi_fsub+0x1e4>
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	03d2      	lsls	r2, r2, #15
 8000e1a:	4213      	tst	r3, r2
 8000e1c:	d004      	beq.n	8000e28 <__aeabi_fsub+0x1e4>
 8000e1e:	4640      	mov	r0, r8
 8000e20:	4210      	tst	r0, r2
 8000e22:	d101      	bne.n	8000e28 <__aeabi_fsub+0x1e4>
 8000e24:	000c      	movs	r4, r1
 8000e26:	4643      	mov	r3, r8
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0d8      	beq.n	8000dde <__aeabi_fsub+0x19a>
 8000e2c:	2680      	movs	r6, #128	; 0x80
 8000e2e:	03f6      	lsls	r6, r6, #15
 8000e30:	431e      	orrs	r6, r3
 8000e32:	0276      	lsls	r6, r6, #9
 8000e34:	22ff      	movs	r2, #255	; 0xff
 8000e36:	0a76      	lsrs	r6, r6, #9
 8000e38:	e74f      	b.n	8000cda <__aeabi_fsub+0x96>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	0015      	movs	r5, r2
 8000e3e:	e7de      	b.n	8000dfe <__aeabi_fsub+0x1ba>
 8000e40:	2220      	movs	r2, #32
 8000e42:	1b40      	subs	r0, r0, r5
 8000e44:	3001      	adds	r0, #1
 8000e46:	1a12      	subs	r2, r2, r0
 8000e48:	0019      	movs	r1, r3
 8000e4a:	4093      	lsls	r3, r2
 8000e4c:	40c1      	lsrs	r1, r0
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	4193      	sbcs	r3, r2
 8000e52:	2500      	movs	r5, #0
 8000e54:	430b      	orrs	r3, r1
 8000e56:	e72f      	b.n	8000cb8 <__aeabi_fsub+0x74>
 8000e58:	2320      	movs	r3, #32
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	0001      	movs	r1, r0
 8000e5e:	4098      	lsls	r0, r3
 8000e60:	0003      	movs	r3, r0
 8000e62:	40d1      	lsrs	r1, r2
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	4193      	sbcs	r3, r2
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	e712      	b.n	8000c92 <__aeabi_fsub+0x4e>
 8000e6c:	2fff      	cmp	r7, #255	; 0xff
 8000e6e:	d0d9      	beq.n	8000e24 <__aeabi_fsub+0x1e0>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4664      	mov	r4, ip
 8000e74:	04db      	lsls	r3, r3, #19
 8000e76:	431c      	orrs	r4, r3
 8000e78:	46a4      	mov	ip, r4
 8000e7a:	2a1b      	cmp	r2, #27
 8000e7c:	dd52      	ble.n	8000f24 <__aeabi_fsub+0x2e0>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	000c      	movs	r4, r1
 8000e82:	003d      	movs	r5, r7
 8000e84:	1ac3      	subs	r3, r0, r3
 8000e86:	e706      	b.n	8000c96 <__aeabi_fsub+0x52>
 8000e88:	4663      	mov	r3, ip
 8000e8a:	1a1e      	subs	r6, r3, r0
 8000e8c:	0173      	lsls	r3, r6, #5
 8000e8e:	d439      	bmi.n	8000f04 <__aeabi_fsub+0x2c0>
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x252>
 8000e94:	e704      	b.n	8000ca0 <__aeabi_fsub+0x5c>
 8000e96:	2400      	movs	r4, #0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	e71d      	b.n	8000cda <__aeabi_fsub+0x96>
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	0001      	movs	r1, r0
 8000ea4:	4098      	lsls	r0, r3
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	40d1      	lsrs	r1, r2
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	4193      	sbcs	r3, r2
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	e729      	b.n	8000d06 <__aeabi_fsub+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d1a9      	bne.n	8000e0a <__aeabi_fsub+0x1c6>
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d056      	beq.n	8000f6a <__aeabi_fsub+0x326>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x280>
 8000ec2:	e70a      	b.n	8000cda <__aeabi_fsub+0x96>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	4463      	add	r3, ip
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	d594      	bpl.n	8000df6 <__aeabi_fsub+0x1b2>
 8000ecc:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <__aeabi_fsub+0x338>)
 8000ece:	3501      	adds	r5, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	e790      	b.n	8000df6 <__aeabi_fsub+0x1b2>
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0af      	beq.n	8000e3a <__aeabi_fsub+0x1f6>
 8000eda:	1e53      	subs	r3, r2, #1
 8000edc:	2a01      	cmp	r2, #1
 8000ede:	d015      	beq.n	8000f0c <__aeabi_fsub+0x2c8>
 8000ee0:	2aff      	cmp	r2, #255	; 0xff
 8000ee2:	d02a      	beq.n	8000f3a <__aeabi_fsub+0x2f6>
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	e752      	b.n	8000d8e <__aeabi_fsub+0x14a>
 8000ee8:	4662      	mov	r2, ip
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d191      	bne.n	8000e12 <__aeabi_fsub+0x1ce>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d198      	bne.n	8000e24 <__aeabi_fsub+0x1e0>
 8000ef2:	2680      	movs	r6, #128	; 0x80
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	03f6      	lsls	r6, r6, #15
 8000efa:	e6ee      	b.n	8000cda <__aeabi_fsub+0x96>
 8000efc:	000c      	movs	r4, r1
 8000efe:	4643      	mov	r3, r8
 8000f00:	0015      	movs	r5, r2
 8000f02:	e77c      	b.n	8000dfe <__aeabi_fsub+0x1ba>
 8000f04:	4663      	mov	r3, ip
 8000f06:	000c      	movs	r4, r1
 8000f08:	1ac6      	subs	r6, r0, r3
 8000f0a:	e6c9      	b.n	8000ca0 <__aeabi_fsub+0x5c>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	2501      	movs	r5, #1
 8000f12:	015a      	lsls	r2, r3, #5
 8000f14:	d400      	bmi.n	8000f18 <__aeabi_fsub+0x2d4>
 8000f16:	e76e      	b.n	8000df6 <__aeabi_fsub+0x1b2>
 8000f18:	2502      	movs	r5, #2
 8000f1a:	e6fa      	b.n	8000d12 <__aeabi_fsub+0xce>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2501      	movs	r5, #1
 8000f20:	1a1b      	subs	r3, r3, r0
 8000f22:	e6b8      	b.n	8000c96 <__aeabi_fsub+0x52>
 8000f24:	4664      	mov	r4, ip
 8000f26:	2320      	movs	r3, #32
 8000f28:	40d4      	lsrs	r4, r2
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	4662      	mov	r2, ip
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	4193      	sbcs	r3, r2
 8000f36:	4323      	orrs	r3, r4
 8000f38:	e7a2      	b.n	8000e80 <__aeabi_fsub+0x23c>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	e774      	b.n	8000e28 <__aeabi_fsub+0x1e4>
 8000f3e:	4661      	mov	r1, ip
 8000f40:	2320      	movs	r3, #32
 8000f42:	40d1      	lsrs	r1, r2
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	4662      	mov	r2, ip
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	4193      	sbcs	r3, r2
 8000f50:	430b      	orrs	r3, r1
 8000f52:	e720      	b.n	8000d96 <__aeabi_fsub+0x152>
 8000f54:	4663      	mov	r3, ip
 8000f56:	000c      	movs	r4, r1
 8000f58:	2501      	movs	r5, #1
 8000f5a:	1ac3      	subs	r3, r0, r3
 8000f5c:	e69b      	b.n	8000c96 <__aeabi_fsub+0x52>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d099      	beq.n	8000e96 <__aeabi_fsub+0x252>
 8000f62:	000c      	movs	r4, r1
 8000f64:	4646      	mov	r6, r8
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b7      	b.n	8000cda <__aeabi_fsub+0x96>
 8000f6a:	4646      	mov	r6, r8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	e6b4      	b.n	8000cda <__aeabi_fsub+0x96>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fsub+0x332>
 8000f74:	e73f      	b.n	8000df6 <__aeabi_fsub+0x1b2>
 8000f76:	2400      	movs	r4, #0
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e6ae      	b.n	8000cda <__aeabi_fsub+0x96>
 8000f7c:	fbffffff 	.word	0xfbffffff
 8000f80:	7dffffff 	.word	0x7dffffff

08000f84 <__aeabi_f2iz>:
 8000f84:	0241      	lsls	r1, r0, #9
 8000f86:	0042      	lsls	r2, r0, #1
 8000f88:	0fc3      	lsrs	r3, r0, #31
 8000f8a:	0a49      	lsrs	r1, r1, #9
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	0e12      	lsrs	r2, r2, #24
 8000f90:	2a7e      	cmp	r2, #126	; 0x7e
 8000f92:	dd03      	ble.n	8000f9c <__aeabi_f2iz+0x18>
 8000f94:	2a9d      	cmp	r2, #157	; 0x9d
 8000f96:	dd02      	ble.n	8000f9e <__aeabi_f2iz+0x1a>
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <__aeabi_f2iz+0x3c>)
 8000f9a:	1898      	adds	r0, r3, r2
 8000f9c:	4770      	bx	lr
 8000f9e:	2080      	movs	r0, #128	; 0x80
 8000fa0:	0400      	lsls	r0, r0, #16
 8000fa2:	4301      	orrs	r1, r0
 8000fa4:	2a95      	cmp	r2, #149	; 0x95
 8000fa6:	dc07      	bgt.n	8000fb8 <__aeabi_f2iz+0x34>
 8000fa8:	2096      	movs	r0, #150	; 0x96
 8000faa:	1a82      	subs	r2, r0, r2
 8000fac:	40d1      	lsrs	r1, r2
 8000fae:	4248      	negs	r0, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f3      	bne.n	8000f9c <__aeabi_f2iz+0x18>
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	e7f1      	b.n	8000f9c <__aeabi_f2iz+0x18>
 8000fb8:	3a96      	subs	r2, #150	; 0x96
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	e7f7      	b.n	8000fae <__aeabi_f2iz+0x2a>
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	7fffffff 	.word	0x7fffffff

08000fc4 <__aeabi_ui2f>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	1e04      	subs	r4, r0, #0
 8000fc8:	d00e      	beq.n	8000fe8 <__aeabi_ui2f+0x24>
 8000fca:	f000 f843 	bl	8001054 <__clzsi2>
 8000fce:	239e      	movs	r3, #158	; 0x9e
 8000fd0:	0001      	movs	r1, r0
 8000fd2:	1a1b      	subs	r3, r3, r0
 8000fd4:	2b96      	cmp	r3, #150	; 0x96
 8000fd6:	dc0c      	bgt.n	8000ff2 <__aeabi_ui2f+0x2e>
 8000fd8:	2808      	cmp	r0, #8
 8000fda:	d02c      	beq.n	8001036 <__aeabi_ui2f+0x72>
 8000fdc:	3908      	subs	r1, #8
 8000fde:	408c      	lsls	r4, r1
 8000fe0:	0264      	lsls	r4, r4, #9
 8000fe2:	0a64      	lsrs	r4, r4, #9
 8000fe4:	b2d8      	uxtb	r0, r3
 8000fe6:	e001      	b.n	8000fec <__aeabi_ui2f+0x28>
 8000fe8:	2000      	movs	r0, #0
 8000fea:	2400      	movs	r4, #0
 8000fec:	05c0      	lsls	r0, r0, #23
 8000fee:	4320      	orrs	r0, r4
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
 8000ff2:	2b99      	cmp	r3, #153	; 0x99
 8000ff4:	dd0a      	ble.n	800100c <__aeabi_ui2f+0x48>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	0020      	movs	r0, r4
 8000ffa:	321b      	adds	r2, #27
 8000ffc:	4090      	lsls	r0, r2
 8000ffe:	0002      	movs	r2, r0
 8001000:	1e50      	subs	r0, r2, #1
 8001002:	4182      	sbcs	r2, r0
 8001004:	2005      	movs	r0, #5
 8001006:	1a40      	subs	r0, r0, r1
 8001008:	40c4      	lsrs	r4, r0
 800100a:	4314      	orrs	r4, r2
 800100c:	2905      	cmp	r1, #5
 800100e:	dc16      	bgt.n	800103e <__aeabi_ui2f+0x7a>
 8001010:	0022      	movs	r2, r4
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <__aeabi_ui2f+0x8c>)
 8001014:	4002      	ands	r2, r0
 8001016:	0765      	lsls	r5, r4, #29
 8001018:	d009      	beq.n	800102e <__aeabi_ui2f+0x6a>
 800101a:	250f      	movs	r5, #15
 800101c:	402c      	ands	r4, r5
 800101e:	2c04      	cmp	r4, #4
 8001020:	d005      	beq.n	800102e <__aeabi_ui2f+0x6a>
 8001022:	3204      	adds	r2, #4
 8001024:	0154      	lsls	r4, r2, #5
 8001026:	d502      	bpl.n	800102e <__aeabi_ui2f+0x6a>
 8001028:	239f      	movs	r3, #159	; 0x9f
 800102a:	4002      	ands	r2, r0
 800102c:	1a5b      	subs	r3, r3, r1
 800102e:	0192      	lsls	r2, r2, #6
 8001030:	0a54      	lsrs	r4, r2, #9
 8001032:	b2d8      	uxtb	r0, r3
 8001034:	e7da      	b.n	8000fec <__aeabi_ui2f+0x28>
 8001036:	0264      	lsls	r4, r4, #9
 8001038:	2096      	movs	r0, #150	; 0x96
 800103a:	0a64      	lsrs	r4, r4, #9
 800103c:	e7d6      	b.n	8000fec <__aeabi_ui2f+0x28>
 800103e:	1f4a      	subs	r2, r1, #5
 8001040:	4094      	lsls	r4, r2
 8001042:	0022      	movs	r2, r4
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <__aeabi_ui2f+0x8c>)
 8001046:	4002      	ands	r2, r0
 8001048:	0765      	lsls	r5, r4, #29
 800104a:	d0f0      	beq.n	800102e <__aeabi_ui2f+0x6a>
 800104c:	e7e5      	b.n	800101a <__aeabi_ui2f+0x56>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	fbffffff 	.word	0xfbffffff

08001054 <__clzsi2>:
 8001054:	211c      	movs	r1, #28
 8001056:	2301      	movs	r3, #1
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	4298      	cmp	r0, r3
 800105c:	d301      	bcc.n	8001062 <__clzsi2+0xe>
 800105e:	0c00      	lsrs	r0, r0, #16
 8001060:	3910      	subs	r1, #16
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	4298      	cmp	r0, r3
 8001066:	d301      	bcc.n	800106c <__clzsi2+0x18>
 8001068:	0a00      	lsrs	r0, r0, #8
 800106a:	3908      	subs	r1, #8
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	4298      	cmp	r0, r3
 8001070:	d301      	bcc.n	8001076 <__clzsi2+0x22>
 8001072:	0900      	lsrs	r0, r0, #4
 8001074:	3904      	subs	r1, #4
 8001076:	a202      	add	r2, pc, #8	; (adr r2, 8001080 <__clzsi2+0x2c>)
 8001078:	5c10      	ldrb	r0, [r2, r0]
 800107a:	1840      	adds	r0, r0, r1
 800107c:	4770      	bx	lr
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	02020304 	.word	0x02020304
 8001084:	01010101 	.word	0x01010101
	...

08001090 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001090:	b500      	push	{lr}
 8001092:	b083      	sub	sp, #12

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001094:	2208      	movs	r2, #8
 8001096:	2100      	movs	r1, #0
 8001098:	4668      	mov	r0, sp
 800109a:	f002 fd07 	bl	8003aac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <MX_ADC_Init+0x84>)
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_ADC_Init+0x88>)
 80010a2:	6003      	str	r3, [r0, #0]
  hadc.Init.OversamplingMode = ENABLE;
 80010a4:	2201      	movs	r2, #1
 80010a6:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010a8:	230c      	movs	r3, #12
 80010aa:	6403      	str	r3, [r0, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010ac:	3374      	adds	r3, #116	; 0x74
 80010ae:	6443      	str	r3, [r0, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010b0:	2300      	movs	r3, #0
 80010b2:	6483      	str	r3, [r0, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0609      	lsls	r1, r1, #24
 80010b8:	6041      	str	r1, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ba:	6083      	str	r3, [r0, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80010bc:	2107      	movs	r1, #7
 80010be:	6381      	str	r1, [r0, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010c0:	6102      	str	r2, [r0, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	60c3      	str	r3, [r0, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010c4:	321f      	adds	r2, #31
 80010c6:	5483      	strb	r3, [r0, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	3201      	adds	r2, #1
 80010ca:	5483      	strb	r3, [r0, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010cc:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	22c2      	movs	r2, #194	; 0xc2
 80010d0:	32ff      	adds	r2, #255	; 0xff
 80010d2:	6242      	str	r2, [r0, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010d4:	3a96      	subs	r2, #150	; 0x96
 80010d6:	3aff      	subs	r2, #255	; 0xff
 80010d8:	5483      	strb	r3, [r0, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	3a28      	subs	r2, #40	; 0x28
 80010dc:	6142      	str	r2, [r0, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010de:	6303      	str	r3, [r0, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010e0:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80010e2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010e4:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010e6:	f000 fc6d 	bl	80019c4 <HAL_ADC_Init>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d10c      	bne.n	8001108 <MX_ADC_Init+0x78>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ee:	2301      	movs	r3, #1
 80010f0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC_Init+0x84>)
 80010fa:	4669      	mov	r1, sp
 80010fc:	f000 fdf8 	bl	8001cf0 <HAL_ADC_ConfigChannel>
 8001100:	2800      	cmp	r0, #0
 8001102:	d104      	bne.n	800110e <MX_ADC_Init+0x7e>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001104:	b003      	add	sp, #12
 8001106:	bd00      	pop	{pc}
    Error_Handler();
 8001108:	f000 f9c4 	bl	8001494 <Error_Handler>
 800110c:	e7ef      	b.n	80010ee <MX_ADC_Init+0x5e>
    Error_Handler();
 800110e:	f000 f9c1 	bl	8001494 <Error_Handler>
}
 8001112:	e7f7      	b.n	8001104 <MX_ADC_Init+0x74>
 8001114:	2000004c 	.word	0x2000004c
 8001118:	40012400 	.word	0x40012400

0800111c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800111c:	b510      	push	{r4, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	2214      	movs	r2, #20
 8001124:	2100      	movs	r1, #0
 8001126:	a801      	add	r0, sp, #4
 8001128:	f002 fcc0 	bl	8003aac <memset>
  if(adcHandle->Instance==ADC1)
 800112c:	6822      	ldr	r2, [r4, #0]
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_ADC_MspInit+0x80>)
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001134:	b006      	add	sp, #24
 8001136:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_ADC_MspInit+0x84>)
 800113a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	430a      	orrs	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001146:	2201      	movs	r2, #1
 8001148:	4311      	orrs	r1, r2
 800114a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	401a      	ands	r2, r3
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001154:	2303      	movs	r3, #3
 8001156:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	20a0      	movs	r0, #160	; 0xa0
 800115c:	a901      	add	r1, sp, #4
 800115e:	05c0      	lsls	r0, r0, #23
 8001160:	f000 ffd0 	bl	8002104 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8001164:	480f      	ldr	r0, [pc, #60]	; (80011a4 <HAL_ADC_MspInit+0x88>)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_ADC_MspInit+0x8c>)
 8001168:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800116a:	2300      	movs	r3, #0
 800116c:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001176:	3280      	adds	r2, #128	; 0x80
 8001178:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001180:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001184:	f000 feda 	bl	8001f3c <HAL_DMA_Init>
 8001188:	2800      	cmp	r0, #0
 800118a:	d103      	bne.n	8001194 <HAL_ADC_MspInit+0x78>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x88>)
 800118e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001190:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001192:	e7cf      	b.n	8001134 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001194:	f000 f97e 	bl	8001494 <Error_Handler>
 8001198:	e7f8      	b.n	800118c <HAL_ADC_MspInit+0x70>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40012400 	.word	0x40012400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	200000a8 	.word	0x200000a8
 80011a8:	40020008 	.word	0x40020008

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b500      	push	{lr}
 80011ae:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <MX_DMA_Init+0x2c>)
 80011b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011b4:	2301      	movs	r3, #1
 80011b6:	4319      	orrs	r1, r3
 80011b8:	6311      	str	r1, [r2, #48]	; 0x30
 80011ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011bc:	4013      	ands	r3, r2
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2009      	movs	r0, #9
 80011c8:	f000 fe48 	bl	8001e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011cc:	2009      	movs	r0, #9
 80011ce:	f000 fe75 	bl	8001ebc <HAL_NVIC_EnableIRQ>

}
 80011d2:	b003      	add	sp, #12
 80011d4:	bd00      	pop	{pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40021000 	.word	0x40021000

080011dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	46de      	mov	lr, fp
 80011e0:	4657      	mov	r7, sl
 80011e2:	464e      	mov	r6, r9
 80011e4:	4645      	mov	r5, r8
 80011e6:	b5e0      	push	{r5, r6, r7, lr}
 80011e8:	b08d      	sub	sp, #52	; 0x34

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011ea:	ac0a      	add	r4, sp, #40	; 0x28
 80011ec:	2208      	movs	r2, #8
 80011ee:	2100      	movs	r1, #0
 80011f0:	0020      	movs	r0, r4
 80011f2:	f002 fc5b 	bl	8003aac <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	2218      	movs	r2, #24
 80011f8:	2100      	movs	r1, #0
 80011fa:	a804      	add	r0, sp, #16
 80011fc:	f002 fc56 	bl	8003aac <memset>
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <MX_GPIO_Init+0x1d0>)
 8001202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001204:	2602      	movs	r6, #2
 8001206:	4332      	orrs	r2, r6
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120c:	4032      	ands	r2, r6
 800120e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001210:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 8001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001214:	2104      	movs	r1, #4
 8001216:	4688      	mov	r8, r1
 8001218:	430a      	orrs	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	400a      	ands	r2, r1
 8001220:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001222:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001226:	2501      	movs	r5, #1
 8001228:	432a      	orrs	r2, r5
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	402b      	ands	r3, r5
 8001230:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001232:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001234:	27a0      	movs	r7, #160	; 0xa0
 8001236:	05ff      	lsls	r7, r7, #23
 8001238:	2308      	movs	r3, #8
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800123c:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <MX_GPIO_Init+0x1d4>)
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	31ec      	adds	r1, #236	; 0xec
 8001242:	438a      	bics	r2, r1
 8001244:	2010      	movs	r0, #16
 8001246:	4681      	mov	r9, r0
 8001248:	4302      	orrs	r2, r0
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	4859      	ldr	r0, [pc, #356]	; (80013b4 <MX_GPIO_Init+0x1d8>)
 8001250:	4002      	ands	r2, r0
 8001252:	2080      	movs	r0, #128	; 0x80
 8001254:	0080      	lsls	r0, r0, #2
 8001256:	4302      	orrs	r2, r0
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	4856      	ldr	r0, [pc, #344]	; (80013b8 <MX_GPIO_Init+0x1dc>)
 800125e:	4010      	ands	r0, r2
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	0192      	lsls	r2, r2, #6
 8001264:	4302      	orrs	r2, r0
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	438a      	bics	r2, r1
 800126c:	4649      	mov	r1, r9
 800126e:	430a      	orrs	r2, r1
 8001270:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <MX_GPIO_Init+0x1e0>)
 8001274:	68d9      	ldr	r1, [r3, #12]
 8001276:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <MX_GPIO_Init+0x1e4>)
 8001278:	4693      	mov	fp, r2
 800127a:	4011      	ands	r1, r2
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	02d2      	lsls	r2, r2, #11
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <MX_GPIO_Init+0x1e8>)
 8001286:	68d1      	ldr	r1, [r2, #12]
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <MX_GPIO_Init+0x1ec>)
 800128a:	4682      	mov	sl, r0
 800128c:	4008      	ands	r0, r1
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0549      	lsls	r1, r1, #21
 8001292:	4301      	orrs	r1, r0
 8001294:	60d1      	str	r1, [r2, #12]
 8001296:	68d1      	ldr	r1, [r2, #12]
 8001298:	0089      	lsls	r1, r1, #2
 800129a:	0889      	lsrs	r1, r1, #2
 800129c:	2080      	movs	r0, #128	; 0x80
 800129e:	05c0      	lsls	r0, r0, #23
 80012a0:	4301      	orrs	r1, r0
 80012a2:	60d1      	str	r1, [r2, #12]
 80012a4:	68d9      	ldr	r1, [r3, #12]
 80012a6:	200c      	movs	r0, #12
 80012a8:	4684      	mov	ip, r0
 80012aa:	4381      	bics	r1, r0
 80012ac:	4640      	mov	r0, r8
 80012ae:	4301      	orrs	r1, r0
 80012b0:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	4658      	mov	r0, fp
 80012b6:	4001      	ands	r1, r0
 80012b8:	6019      	str	r1, [r3, #0]
 80012ba:	6811      	ldr	r1, [r2, #0]
 80012bc:	4650      	mov	r0, sl
 80012be:	4001      	ands	r1, r0
 80012c0:	6011      	str	r1, [r2, #0]
 80012c2:	6811      	ldr	r1, [r2, #0]
 80012c4:	0089      	lsls	r1, r1, #2
 80012c6:	0889      	lsrs	r1, r1, #2
 80012c8:	6011      	str	r1, [r2, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4661      	mov	r1, ip
 80012ce:	438a      	bics	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

  /**/
  LL_GPIO_SetPinMode(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80012d8:	7125      	strb	r5, [r4, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012da:	2200      	movs	r2, #0
 80012dc:	4692      	mov	sl, r2
 80012de:	7162      	strb	r2, [r4, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012e0:	71a6      	strb	r6, [r4, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012e2:	0020      	movs	r0, r4
 80012e4:	f001 fec0 	bl	8003068 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80012ee:	7125      	strb	r5, [r4, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012f0:	4652      	mov	r2, sl
 80012f2:	7162      	strb	r2, [r4, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012f4:	71a6      	strb	r6, [r4, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012f6:	0020      	movs	r0, r4
 80012f8:	f001 feb6 	bl	8003068 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8001302:	7125      	strb	r5, [r4, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001304:	4652      	mov	r2, sl
 8001306:	7162      	strb	r2, [r4, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001308:	71a6      	strb	r6, [r4, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800130a:	0020      	movs	r0, r4
 800130c:	f001 feac 	bl	8003068 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001310:	960a      	str	r6, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8001312:	7125      	strb	r5, [r4, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001314:	4652      	mov	r2, sl
 8001316:	7162      	strb	r2, [r4, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001318:	71a6      	strb	r6, [r4, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800131a:	0020      	movs	r0, r4
 800131c:	f001 fea4 	bl	8003068 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = TIP_ACTIVE_Pin;
 8001320:	4642      	mov	r2, r8
 8001322:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001324:	4652      	mov	r2, sl
 8001326:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001328:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(TIP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800132a:	a904      	add	r1, sp, #16
 800132c:	0038      	movs	r0, r7
 800132e:	f001 feff 	bl	8003130 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OC_TEST_Pin;
 8001332:	2308      	movs	r3, #8
 8001334:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001336:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001338:	4653      	mov	r3, sl
 800133a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800133c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800133e:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(OC_TEST_GPIO_Port, &GPIO_InitStruct);
 8001340:	a904      	add	r1, sp, #16
 8001342:	0038      	movs	r0, r7
 8001344:	f001 fef4 	bl	8003130 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001348:	464b      	mov	r3, r9
 800134a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800134c:	3502      	adds	r5, #2
 800134e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001350:	4653      	mov	r3, sl
 8001352:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	a904      	add	r1, sp, #16
 8001356:	0038      	movs	r0, r7
 8001358:	f001 feea 	bl	8003130 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800135c:	2340      	movs	r3, #64	; 0x40
 800135e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001360:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001362:	4653      	mov	r3, sl
 8001364:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	a904      	add	r1, sp, #16
 8001368:	0038      	movs	r0, r7
 800136a:	f001 fee1 	bl	8003130 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800136e:	2480      	movs	r4, #128	; 0x80
 8001370:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001372:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001374:	4653      	mov	r3, sl
 8001376:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	a904      	add	r1, sp, #16
 800137a:	0038      	movs	r0, r7
 800137c:	f001 fed8 	bl	8003130 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_GPIO_Init+0x1f0>)
 8001382:	21c1      	movs	r1, #193	; 0xc1
 8001384:	0089      	lsls	r1, r1, #2
 8001386:	585a      	ldr	r2, [r3, r1]
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_GPIO_Init+0x1f4>)
 800138a:	4002      	ands	r2, r0
 800138c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	2220      	movs	r2, #32
 8001390:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001392:	585a      	ldr	r2, [r3, r1]
 8001394:	0212      	lsls	r2, r2, #8
 8001396:	0a12      	lsrs	r2, r2, #8
 8001398:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	601c      	str	r4, [r3, #0]
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
  NVIC_EnableIRQ(EXTI0_1_IRQn);
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 800139c:	b00d      	add	sp, #52	; 0x34
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	fffff0ff 	.word	0xfffff0ff
 80013b8:	ffff0fff 	.word	0xffff0fff
 80013bc:	50000400 	.word	0x50000400
 80013c0:	fff3ffff 	.word	0xfff3ffff
 80013c4:	50000800 	.word	0x50000800
 80013c8:	cfffffff 	.word	0xcfffffff
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	ffff00ff 	.word	0xffff00ff

080013d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_I2C1_Init+0x54>)
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_I2C1_Init+0x58>)
 80013da:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_I2C1_Init+0x5c>)
 80013de:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	2201      	movs	r2, #1
 80013e6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ec:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f2:	f001 f887 	bl	8002504 <HAL_I2C_Init>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d10c      	bne.n	8001414 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_I2C1_Init+0x54>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	f001 f9a1 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8001402:	2800      	cmp	r0, #0
 8001404:	d109      	bne.n	800141a <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_I2C1_Init+0x54>)
 8001408:	2100      	movs	r1, #0
 800140a:	f001 f9c7 	bl	800279c <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	2800      	cmp	r0, #0
 8001410:	d106      	bne.n	8001420 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001412:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001414:	f000 f83e 	bl	8001494 <Error_Handler>
 8001418:	e7ef      	b.n	80013fa <MX_I2C1_Init+0x26>
    Error_Handler();
 800141a:	f000 f83b 	bl	8001494 <Error_Handler>
 800141e:	e7f2      	b.n	8001406 <MX_I2C1_Init+0x32>
    Error_Handler();
 8001420:	f000 f838 	bl	8001494 <Error_Handler>
}
 8001424:	e7f5      	b.n	8001412 <MX_I2C1_Init+0x3e>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	200000f0 	.word	0x200000f0
 800142c:	40005400 	.word	0x40005400
 8001430:	00707cbb 	.word	0x00707cbb

08001434 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001434:	b510      	push	{r4, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	2214      	movs	r2, #20
 800143c:	2100      	movs	r1, #0
 800143e:	a801      	add	r0, sp, #4
 8001440:	f002 fb34 	bl	8003aac <memset>
  if(i2cHandle->Instance==I2C1)
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_I2C_MspInit+0x58>)
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800144c:	b006      	add	sp, #24
 800144e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4c0f      	ldr	r4, [pc, #60]	; (8001490 <HAL_I2C_MspInit+0x5c>)
 8001452:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001454:	2301      	movs	r3, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	62e2      	str	r2, [r4, #44]	; 0x2c
 800145a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800145c:	401a      	ands	r2, r3
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001462:	22c0      	movs	r2, #192	; 0xc0
 8001464:	00d2      	lsls	r2, r2, #3
 8001466:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001468:	2212      	movs	r2, #18
 800146a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	3a0f      	subs	r2, #15
 8001470:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001472:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	20a0      	movs	r0, #160	; 0xa0
 8001476:	a901      	add	r1, sp, #4
 8001478:	05c0      	lsls	r0, r0, #23
 800147a:	f000 fe43 	bl	8002104 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	039b      	lsls	r3, r3, #14
 8001484:	4313      	orrs	r3, r2
 8001486:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001488:	e7e0      	b.n	800144c <HAL_I2C_MspInit+0x18>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40005400 	.word	0x40005400
 8001490:	40021000 	.word	0x40021000

08001494 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */

	// Disable tip PWM
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <Error_Handler+0xc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149e:	e7fe      	b.n	800149e <Error_Handler+0xa>
 80014a0:	20000144 	.word	0x20000144

080014a4 <SystemClock_Config>:
{
 80014a4:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <SystemClock_Config+0xc0>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	438b      	bics	r3, r1
 80014ae:	430b      	orrs	r3, r1
 80014b0:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <SystemClock_Config+0xc0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80014b6:	07db      	lsls	r3, r3, #31
 80014b8:	d5fb      	bpl.n	80014b2 <SystemClock_Config+0xe>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014ba:	492b      	ldr	r1, [pc, #172]	; (8001568 <SystemClock_Config+0xc4>)
 80014bc:	680a      	ldr	r2, [r1, #0]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <SystemClock_Config+0xc8>)
 80014c0:	401a      	ands	r2, r3
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <SystemClock_Config+0xc4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80014ce:	06db      	lsls	r3, r3, #27
 80014d0:	d4fb      	bmi.n	80014ca <SystemClock_Config+0x26>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <SystemClock_Config+0xcc>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	2101      	movs	r1, #1
 80014d8:	430b      	orrs	r3, r1
 80014da:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <SystemClock_Config+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	075b      	lsls	r3, r3, #29
 80014e2:	d5fb      	bpl.n	80014dc <SystemClock_Config+0x38>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemClock_Config+0xcc>)
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <SystemClock_Config+0xd0>)
 80014ea:	4011      	ands	r1, r2
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0152      	lsls	r2, r2, #5
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 80014f4:	68d9      	ldr	r1, [r3, #12]
 80014f6:	4a20      	ldr	r2, [pc, #128]	; (8001578 <SystemClock_Config+0xd4>)
 80014f8:	4011      	ands	r1, r2
 80014fa:	2288      	movs	r2, #136	; 0x88
 80014fc:	03d2      	lsls	r2, r2, #15
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0452      	lsls	r2, r2, #17
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <SystemClock_Config+0xcc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	d5fb      	bpl.n	800150c <SystemClock_Config+0x68>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <SystemClock_Config+0xcc>)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	21f0      	movs	r1, #240	; 0xf0
 800151a:	438a      	bics	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	4916      	ldr	r1, [pc, #88]	; (800157c <SystemClock_Config+0xd8>)
 8001522:	400a      	ands	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	4915      	ldr	r1, [pc, #84]	; (8001580 <SystemClock_Config+0xdc>)
 800152a:	400a      	ands	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	2103      	movs	r1, #3
 8001532:	438a      	bics	r2, r1
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <SystemClock_Config+0xcc>)
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	230c      	movs	r3, #12
 800153e:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d1f9      	bne.n	8001538 <SystemClock_Config+0x94>
  LL_SetSystemCoreClock(32000000);
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <SystemClock_Config+0xe0>)
 8001546:	f001 fe4f 	bl	80031e8 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f982 	bl	8001854 <HAL_InitTick>
 8001550:	2800      	cmp	r0, #0
 8001552:	d105      	bne.n	8001560 <SystemClock_Config+0xbc>
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <SystemClock_Config+0xcc>)
 8001556:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001558:	490b      	ldr	r1, [pc, #44]	; (8001588 <SystemClock_Config+0xe4>)
 800155a:	400b      	ands	r3, r1
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800155e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001560:	f7ff ff98 	bl	8001494 <Error_Handler>
 8001564:	40022000 	.word	0x40022000
 8001568:	40007000 	.word	0x40007000
 800156c:	ffffe7ff 	.word	0xffffe7ff
 8001570:	40021000 	.word	0x40021000
 8001574:	ffffe0ff 	.word	0xffffe0ff
 8001578:	ff02ffff 	.word	0xff02ffff
 800157c:	fffff8ff 	.word	0xfffff8ff
 8001580:	ffffc7ff 	.word	0xffffc7ff
 8001584:	01e84800 	.word	0x01e84800
 8001588:	ffffcfff 	.word	0xffffcfff

0800158c <main>:
{
 800158c:	b510      	push	{r4, lr}
  HAL_Init();
 800158e:	f000 f989 	bl	80018a4 <HAL_Init>
  SystemClock_Config();
 8001592:	f7ff ff87 	bl	80014a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001596:	f7ff fe21 	bl	80011dc <MX_GPIO_Init>
  MX_DMA_Init();
 800159a:	f7ff fe07 	bl	80011ac <MX_DMA_Init>
  MX_ADC_Init();
 800159e:	f7ff fd77 	bl	8001090 <MX_ADC_Init>
  MX_I2C1_Init();
 80015a2:	f7ff ff17 	bl	80013d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80015a6:	f000 f8a1 	bl	80016ec <MX_TIM2_Init>
  user_main();
 80015aa:	f002 f9ad 	bl	8003908 <user_main>
  while (1)
 80015ae:	e7fe      	b.n	80015ae <main+0x22>

080015b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_MspInit+0x18>)
 80015b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0552      	lsls	r2, r2, #21
 80015c0:	430a      	orrs	r2, r1
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	4770      	bx	lr
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000

080015cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler>

080015ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler>

080015d0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f979 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  user_systick_handler();
 80015da:	f002 f9f1 	bl	80039c0 <user_systick_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bd10      	pop	{r4, pc}

080015e0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80015e0:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <EXTI0_1_IRQHandler+0x1c>)
 80015e4:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80015e6:	079b      	lsls	r3, r3, #30
 80015e8:	d400      	bmi.n	80015ec <EXTI0_1_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80015ea:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <EXTI0_1_IRQHandler+0x1c>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(BTN_DOWN_Pin);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f002 f814 	bl	8003620 <HAL_GPIO_EXTI_Callback>
}
 80015f8:	e7f7      	b.n	80015ea <EXTI0_1_IRQHandler+0xa>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40010400 	.word	0x40010400

08001600 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001600:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 8001604:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001606:	059b      	lsls	r3, r3, #22
 8001608:	d408      	bmi.n	800161c <EXTI4_15_IRQHandler+0x1c>
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 800160c:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    HAL_GPIO_EXTI_Callback(BTN_ENTER_Pin);
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800160e:	045b      	lsls	r3, r3, #17
 8001610:	d40b      	bmi.n	800162a <EXTI4_15_IRQHandler+0x2a>
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 8001614:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    HAL_GPIO_EXTI_Callback(BTN_MENU_Pin);
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	d40e      	bmi.n	8001638 <EXTI4_15_IRQHandler+0x38>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800161a:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 800161c:	2080      	movs	r0, #128	; 0x80
 800161e:	0080      	lsls	r0, r0, #2
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 8001622:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(BTN_ENTER_Pin);
 8001624:	f001 fffc 	bl	8003620 <HAL_GPIO_EXTI_Callback>
 8001628:	e7ef      	b.n	800160a <EXTI4_15_IRQHandler+0xa>
 800162a:	2080      	movs	r0, #128	; 0x80
 800162c:	01c0      	lsls	r0, r0, #7
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 8001630:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(BTN_MENU_Pin);
 8001632:	f001 fff5 	bl	8003620 <HAL_GPIO_EXTI_Callback>
 8001636:	e7ec      	b.n	8001612 <EXTI4_15_IRQHandler+0x12>
 8001638:	2080      	movs	r0, #128	; 0x80
 800163a:	0200      	lsls	r0, r0, #8
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <EXTI4_15_IRQHandler+0x48>)
 800163e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(BTN_UP_Pin);
 8001640:	f001 ffee 	bl	8003620 <HAL_GPIO_EXTI_Callback>
}
 8001644:	e7e9      	b.n	800161a <EXTI4_15_IRQHandler+0x1a>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40010400 	.word	0x40010400

0800164c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800164c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <DMA1_Channel1_IRQHandler+0xc>)
 8001650:	f000 fcfb 	bl	800204a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001654:	bd10      	pop	{r4, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	200000a8 	.word	0x200000a8

0800165c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800165c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800165e:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM2_IRQHandler+0xc>)
 8001660:	f001 fc44 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001664:	bd10      	pop	{r4, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	20000144 	.word	0x20000144

0800166c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	4770      	bx	lr
	...

08001670 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001670:	b510      	push	{r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8001672:	6802      	ldr	r2, [r0, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	429a      	cmp	r2, r3
 800167a:	d000      	beq.n	800167e <HAL_TIM_Base_MspInit+0xe>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800167c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_TIM_Base_MspInit+0x2c>)
 8001680:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001682:	2101      	movs	r1, #1
 8001684:	430b      	orrs	r3, r1
 8001686:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	200f      	movs	r0, #15
 800168e:	f000 fbe5 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001692:	200f      	movs	r0, #15
 8001694:	f000 fc12 	bl	8001ebc <HAL_NVIC_EnableIRQ>
}
 8001698:	e7f0      	b.n	800167c <HAL_TIM_Base_MspInit+0xc>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	2214      	movs	r2, #20
 80016a8:	2100      	movs	r1, #0
 80016aa:	a801      	add	r0, sp, #4
 80016ac:	f002 f9fe 	bl	8003aac <memset>
  if(timHandle->Instance==TIM2)
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016ba:	b006      	add	sp, #24
 80016bc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_TIM_MspPostInit+0x48>)
 80016c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016c2:	2301      	movs	r3, #1
 80016c4:	4319      	orrs	r1, r3
 80016c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80016c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ca:	4013      	ands	r3, r2
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016d0:	2320      	movs	r3, #32
 80016d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	3b1e      	subs	r3, #30
 80016d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80016d8:	3303      	adds	r3, #3
 80016da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	20a0      	movs	r0, #160	; 0xa0
 80016de:	a901      	add	r1, sp, #4
 80016e0:	05c0      	lsls	r0, r0, #23
 80016e2:	f000 fd0f 	bl	8002104 <HAL_GPIO_Init>
}
 80016e6:	e7e8      	b.n	80016ba <HAL_TIM_MspPostInit+0x1a>
 80016e8:	40021000 	.word	0x40021000

080016ec <MX_TIM2_Init>:
{
 80016ec:	b500      	push	{lr}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f0:	2210      	movs	r2, #16
 80016f2:	2100      	movs	r1, #0
 80016f4:	a806      	add	r0, sp, #24
 80016f6:	f002 f9d9 	bl	8003aac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fa:	2208      	movs	r2, #8
 80016fc:	2100      	movs	r1, #0
 80016fe:	a804      	add	r0, sp, #16
 8001700:	f002 f9d4 	bl	8003aac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	2210      	movs	r2, #16
 8001706:	2100      	movs	r1, #0
 8001708:	4668      	mov	r0, sp
 800170a:	f002 f9cf 	bl	8003aac <memset>
  htim2.Instance = TIM2;
 800170e:	482e      	ldr	r0, [pc, #184]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 31;
 8001716:	231f      	movs	r3, #31
 8001718:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	2300      	movs	r3, #0
 800171c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 800171e:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <MX_TIM2_Init+0xe0>)
 8001720:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001726:	f001 f93c 	bl	80029a2 <HAL_TIM_Base_Init>
 800172a:	2800      	cmp	r0, #0
 800172c:	d136      	bne.n	800179c <MX_TIM2_Init+0xb0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001734:	4824      	ldr	r0, [pc, #144]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001736:	a906      	add	r1, sp, #24
 8001738:	f001 fb50 	bl	8002ddc <HAL_TIM_ConfigClockSource>
 800173c:	2800      	cmp	r0, #0
 800173e:	d130      	bne.n	80017a2 <MX_TIM2_Init+0xb6>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001742:	f001 fa22 	bl	8002b8a <HAL_TIM_PWM_Init>
 8001746:	2800      	cmp	r0, #0
 8001748:	d12e      	bne.n	80017a8 <MX_TIM2_Init+0xbc>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800174a:	481f      	ldr	r0, [pc, #124]	; (80017c8 <MX_TIM2_Init+0xdc>)
 800174c:	f001 f975 	bl	8002a3a <HAL_TIM_OC_Init>
 8001750:	2800      	cmp	r0, #0
 8001752:	d12c      	bne.n	80017ae <MX_TIM2_Init+0xc2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175a:	481b      	ldr	r0, [pc, #108]	; (80017c8 <MX_TIM2_Init+0xdc>)
 800175c:	a904      	add	r1, sp, #16
 800175e:	f001 fc57 	bl	8003010 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	2800      	cmp	r0, #0
 8001764:	d126      	bne.n	80017b4 <MX_TIM2_Init+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	; 0x60
 8001768:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001772:	4815      	ldr	r0, [pc, #84]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001774:	2200      	movs	r2, #0
 8001776:	4669      	mov	r1, sp
 8001778:	f001 fab8 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 800177c:	2800      	cmp	r0, #0
 800177e:	d11c      	bne.n	80017ba <MX_TIM2_Init+0xce>
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001780:	2310      	movs	r3, #16
 8001782:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001784:	4810      	ldr	r0, [pc, #64]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001786:	2204      	movs	r2, #4
 8001788:	4669      	mov	r1, sp
 800178a:	f001 fa81 	bl	8002c90 <HAL_TIM_OC_ConfigChannel>
 800178e:	2800      	cmp	r0, #0
 8001790:	d116      	bne.n	80017c0 <MX_TIM2_Init+0xd4>
  HAL_TIM_MspPostInit(&htim2);
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_TIM2_Init+0xdc>)
 8001794:	f7ff ff84 	bl	80016a0 <HAL_TIM_MspPostInit>
}
 8001798:	b00b      	add	sp, #44	; 0x2c
 800179a:	bd00      	pop	{pc}
    Error_Handler();
 800179c:	f7ff fe7a 	bl	8001494 <Error_Handler>
 80017a0:	e7c5      	b.n	800172e <MX_TIM2_Init+0x42>
    Error_Handler();
 80017a2:	f7ff fe77 	bl	8001494 <Error_Handler>
 80017a6:	e7cb      	b.n	8001740 <MX_TIM2_Init+0x54>
    Error_Handler();
 80017a8:	f7ff fe74 	bl	8001494 <Error_Handler>
 80017ac:	e7cd      	b.n	800174a <MX_TIM2_Init+0x5e>
    Error_Handler();
 80017ae:	f7ff fe71 	bl	8001494 <Error_Handler>
 80017b2:	e7cf      	b.n	8001754 <MX_TIM2_Init+0x68>
    Error_Handler();
 80017b4:	f7ff fe6e 	bl	8001494 <Error_Handler>
 80017b8:	e7d5      	b.n	8001766 <MX_TIM2_Init+0x7a>
    Error_Handler();
 80017ba:	f7ff fe6b 	bl	8001494 <Error_Handler>
 80017be:	e7df      	b.n	8001780 <MX_TIM2_Init+0x94>
    Error_Handler();
 80017c0:	f7ff fe68 	bl	8001494 <Error_Handler>
 80017c4:	e7e5      	b.n	8001792 <MX_TIM2_Init+0xa6>
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	20000144 	.word	0x20000144
 80017cc:	000003e7 	.word	0x000003e7

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80017d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <LoopForever+0x6>)
    LDR R1, [R0]
 80017d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80017d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <LoopForever+0xa>)
    CMP R1, R2
 80017dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80017de:	d105      	bne.n	80017ec <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80017e2:	4913      	ldr	r1, [pc, #76]	; (8001830 <LoopForever+0x12>)
    STR R1, [R0]
 80017e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80017e8:	4913      	ldr	r1, [pc, #76]	; (8001838 <LoopForever+0x1a>)
    STR R1, [R0]
 80017ea:	6001      	str	r1, [r0, #0]

080017ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <LoopForever+0x1e>)
  ldr r1, =_edata
 80017ee:	4914      	ldr	r1, [pc, #80]	; (8001840 <LoopForever+0x22>)
  ldr r2, =_sidata
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <LoopForever+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001804:	4c11      	ldr	r4, [pc, #68]	; (800184c <LoopForever+0x2e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001812:	f7ff ff2b 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 f95f 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff feb7 	bl	800158c <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
   ldr   r0, =_estack
 8001820:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001824:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001828:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800182c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001830:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001834:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001838:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001844:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8001848:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800184c:	200001b0 	.word	0x200001b0

08001850 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_COMP_IRQHandler>
	...

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b510      	push	{r4, lr}
 8001856:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_InitTick+0x44>)
 800185a:	7819      	ldrb	r1, [r3, #0]
 800185c:	20fa      	movs	r0, #250	; 0xfa
 800185e:	0080      	lsls	r0, r0, #2
 8001860:	f7fe fc5a 	bl	8000118 <__udivsi3>
 8001864:	0001      	movs	r1, r0
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_InitTick+0x48>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	f7fe fc55 	bl	8000118 <__udivsi3>
 800186e:	f000 fb31 	bl	8001ed4 <HAL_SYSTICK_Config>
 8001872:	2800      	cmp	r0, #0
 8001874:	d10d      	bne.n	8001892 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	2c03      	cmp	r4, #3
 8001878:	d901      	bls.n	800187e <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
 800187c:	e00a      	b.n	8001894 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187e:	3001      	adds	r0, #1
 8001880:	2200      	movs	r2, #0
 8001882:	0021      	movs	r1, r4
 8001884:	4240      	negs	r0, r0
 8001886:	f000 fae9 	bl	8001e5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_InitTick+0x4c>)
 800188c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2000      	movs	r0, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
}
 8001894:	bd10      	pop	{r4, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	20000004 	.word	0x20000004
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_Init>:
{
 80018a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_Init+0x24>)
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	2140      	movs	r1, #64	; 0x40
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ffcf 	bl	8001854 <HAL_InitTick>
 80018b6:	1e04      	subs	r4, r0, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80018ba:	2401      	movs	r4, #1
}
 80018bc:	0020      	movs	r0, r4
 80018be:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80018c0:	f7ff fe76 	bl	80015b0 <HAL_MspInit>
 80018c4:	e7fa      	b.n	80018bc <HAL_Init+0x18>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40022000 	.word	0x40022000

080018cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x10>)
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_IncTick+0x14>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	185b      	adds	r3, r3, r1
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	4770      	bx	lr
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000184 	.word	0x20000184
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018e4:	4b01      	ldr	r3, [pc, #4]	; (80018ec <HAL_GetTick+0x8>)
 80018e6:	6818      	ldr	r0, [r3, #0]
}
 80018e8:	4770      	bx	lr
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	20000184 	.word	0x20000184

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fff6 	bl	80018e4 <HAL_GetTick>
 80018f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	1c63      	adds	r3, r4, #1
 80018fc:	d002      	beq.n	8001904 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_Delay+0x20>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	42a0      	cmp	r0, r4
 800190c:	d3fa      	bcc.n	8001904 <HAL_Delay+0x14>
  {
  }
}
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	20000004 	.word	0x20000004

08001914 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001914:	b510      	push	{r4, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <ADC_DelayMicroSecond+0x28>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <ADC_DelayMicroSecond+0x2c>)
 8001920:	f7fe fbfa 	bl	8000118 <__udivsi3>
 8001924:	4344      	muls	r4, r0
 8001926:	9401      	str	r4, [sp, #4]

  while (waitLoopIndex != 0U)
 8001928:	e002      	b.n	8001930 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 800192a:	9b01      	ldr	r3, [sp, #4]
 800192c:	3b01      	subs	r3, #1
 800192e:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <ADC_DelayMicroSecond+0x16>
  }
}
 8001936:	b002      	add	sp, #8
 8001938:	bd10      	pop	{r4, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	20000000 	.word	0x20000000
 8001940:	000f4240 	.word	0x000f4240

08001944 <ADC_Enable>:
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001948:	6802      	ldr	r2, [r0, #0]
 800194a:	6891      	ldr	r1, [r2, #8]
 800194c:	2303      	movs	r3, #3
 800194e:	400b      	ands	r3, r1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00d      	beq.n	8001970 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001954:	6891      	ldr	r1, [r2, #8]
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <ADC_Enable+0x7c>)
 8001958:	4219      	tst	r1, r3
 800195a:	d00e      	beq.n	800197a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800195e:	2210      	movs	r2, #16
 8001960:	4313      	orrs	r3, r2
 8001962:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001966:	3a0f      	subs	r2, #15
 8001968:	4313      	orrs	r3, r2
 800196a:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800196c:	2001      	movs	r0, #1
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	07db      	lsls	r3, r3, #31
 8001974:	d5ee      	bpl.n	8001954 <ADC_Enable+0x10>
  return HAL_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	e7f9      	b.n	800196e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 800197a:	6893      	ldr	r3, [r2, #8]
 800197c:	2101      	movs	r1, #1
 800197e:	430b      	orrs	r3, r1
 8001980:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff ffc6 	bl	8001914 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8001988:	f7ff ffac 	bl	80018e4 <HAL_GetTick>
 800198c:	0005      	movs	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	07db      	lsls	r3, r3, #31
 8001994:	d412      	bmi.n	80019bc <ADC_Enable+0x78>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001996:	f7ff ffa5 	bl	80018e4 <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	280a      	cmp	r0, #10
 800199e:	d9f6      	bls.n	800198e <ADC_Enable+0x4a>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	07db      	lsls	r3, r3, #31
 80019a6:	d4f2      	bmi.n	800198e <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019aa:	2210      	movs	r2, #16
 80019ac:	4313      	orrs	r3, r2
 80019ae:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b2:	3a0f      	subs	r2, #15
 80019b4:	4313      	orrs	r3, r2
 80019b6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e7d8      	b.n	800196e <ADC_Enable+0x2a>
  return HAL_OK;
 80019bc:	2000      	movs	r0, #0
 80019be:	e7d6      	b.n	800196e <ADC_Enable+0x2a>
 80019c0:	80000017 	.word	0x80000017

080019c4 <HAL_ADC_Init>:
{
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 80019c8:	d100      	bne.n	80019cc <HAL_ADC_Init+0x8>
 80019ca:	e0e2      	b.n	8001b92 <HAL_ADC_Init+0x1ce>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d030      	beq.n	8001a34 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80019d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019d4:	06db      	lsls	r3, r3, #27
 80019d6:	d433      	bmi.n	8001a40 <HAL_ADC_Init+0x7c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	2104      	movs	r1, #4
 80019de:	000d      	movs	r5, r1
 80019e0:	4015      	ands	r5, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80019e2:	4211      	tst	r1, r2
 80019e4:	d12c      	bne.n	8001a40 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 80019e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019e8:	496b      	ldr	r1, [pc, #428]	; (8001b98 <HAL_ADC_Init+0x1d4>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	3106      	adds	r1, #6
 80019ee:	31ff      	adds	r1, #255	; 0xff
 80019f0:	430a      	orrs	r2, r1
 80019f2:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	2203      	movs	r2, #3
 80019f8:	400a      	ands	r2, r1
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d029      	beq.n	8001a52 <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80019fe:	6862      	ldr	r2, [r4, #4]
 8001a00:	21c0      	movs	r1, #192	; 0xc0
 8001a02:	0609      	lsls	r1, r1, #24
 8001a04:	428a      	cmp	r2, r1
 8001a06:	d028      	beq.n	8001a5a <HAL_ADC_Init+0x96>
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	05c9      	lsls	r1, r1, #23
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d024      	beq.n	8001a5a <HAL_ADC_Init+0x96>
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	0609      	lsls	r1, r1, #24
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d020      	beq.n	8001a5a <HAL_ADC_Init+0x96>
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	0892      	lsrs	r2, r2, #2
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_ADC_Init+0x1d8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	495e      	ldr	r1, [pc, #376]	; (8001ba0 <HAL_ADC_Init+0x1dc>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6861      	ldr	r1, [r4, #4]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e01b      	b.n	8001a6c <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001a36:	2250      	movs	r2, #80	; 0x50
 8001a38:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001a3a:	f7ff fb6f 	bl	800111c <HAL_ADC_MspInit>
 8001a3e:	e7c8      	b.n	80019d2 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a42:	2210      	movs	r2, #16
 8001a44:	4313      	orrs	r3, r2
 8001a46:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001a48:	2350      	movs	r3, #80	; 0x50
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
}
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	07d2      	lsls	r2, r2, #31
 8001a56:	d413      	bmi.n	8001a80 <HAL_ADC_Init+0xbc>
 8001a58:	e7d1      	b.n	80019fe <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	0892      	lsrs	r2, r2, #2
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	6822      	ldr	r2, [r4, #0]
 8001a64:	6913      	ldr	r3, [r2, #16]
 8001a66:	6861      	ldr	r1, [r4, #4]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	68d3      	ldr	r3, [r2, #12]
 8001a70:	2118      	movs	r1, #24
 8001a72:	438b      	bics	r3, r1
 8001a74:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	68d3      	ldr	r3, [r2, #12]
 8001a7a:	68a1      	ldr	r1, [r4, #8]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_ADC_Init+0x1d8>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4947      	ldr	r1, [pc, #284]	; (8001ba4 <HAL_ADC_Init+0x1e0>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a8e:	0649      	lsls	r1, r1, #25
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	00d2      	lsls	r2, r2, #3
 8001a9a:	d404      	bmi.n	8001aa6 <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0552      	lsls	r2, r2, #21
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	68d3      	ldr	r3, [r2, #12]
 8001aaa:	493f      	ldr	r1, [pc, #252]	; (8001ba8 <HAL_ADC_Init+0x1e4>)
 8001aac:	400b      	ands	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	68c2      	ldr	r2, [r0, #12]
 8001ab4:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ab6:	6921      	ldr	r1, [r4, #16]
 8001ab8:	2902      	cmp	r1, #2
 8001aba:	d02d      	beq.n	8001b18 <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001abc:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001abe:	2120      	movs	r1, #32
 8001ac0:	5c61      	ldrb	r1, [r4, r1]
 8001ac2:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ac4:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	5c61      	ldrb	r1, [r4, r1]
 8001aca:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001acc:	430b      	orrs	r3, r1
                            hadc->Init.Overrun                               |
 8001ace:	6b21      	ldr	r1, [r4, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ad0:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ad2:	69a1      	ldr	r1, [r4, #24]
 8001ad4:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8001ad6:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ad8:	69e1      	ldr	r1, [r4, #28]
 8001ada:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001adc:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae4:	22c2      	movs	r2, #194	; 0xc2
 8001ae6:	32ff      	adds	r2, #255	; 0xff
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d005      	beq.n	8001af8 <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001aec:	6821      	ldr	r1, [r4, #0]
 8001aee:	68ca      	ldr	r2, [r1, #12]
                             hadc->Init.ExternalTrigConvEdge;
 8001af0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001af2:	4303      	orrs	r3, r0
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af8:	2321      	movs	r3, #33	; 0x21
 8001afa:	5ce3      	ldrb	r3, [r4, r3]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d00d      	beq.n	8001b1c <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d01e      	beq.n	8001b44 <HAL_ADC_Init+0x180>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6913      	ldr	r3, [r2, #16]
 8001b0a:	07db      	lsls	r3, r3, #31
 8001b0c:	d52d      	bpl.n	8001b6a <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b0e:	6913      	ldr	r3, [r2, #16]
 8001b10:	2101      	movs	r1, #1
 8001b12:	438b      	bics	r3, r1
 8001b14:	6113      	str	r3, [r2, #16]
 8001b16:	e028      	b.n	8001b6a <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001b18:	2504      	movs	r5, #4
 8001b1a:	e7cf      	b.n	8001abc <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b1c:	331f      	adds	r3, #31
 8001b1e:	5ce3      	ldrb	r3, [r4, r3]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001b24:	6822      	ldr	r2, [r4, #0]
 8001b26:	68d1      	ldr	r1, [r2, #12]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	60d3      	str	r3, [r2, #12]
 8001b30:	e7e6      	b.n	8001b00 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b34:	2220      	movs	r2, #32
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b3c:	3a1f      	subs	r2, #31
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b42:	e7dd      	b.n	8001b00 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	6913      	ldr	r3, [r2, #16]
 8001b48:	4918      	ldr	r1, [pc, #96]	; (8001bac <HAL_ADC_Init+0x1e8>)
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	690a      	ldr	r2, [r1, #16]
 8001b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001b54:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b56:	4303      	orrs	r3, r0
                              hadc->Init.Oversample.TriggeredMode);
 8001b58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001b5a:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	6913      	ldr	r3, [r2, #16]
 8001b64:	2101      	movs	r1, #1
 8001b66:	430b      	orrs	r3, r1
 8001b68:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	6953      	ldr	r3, [r2, #20]
 8001b6e:	2107      	movs	r1, #7
 8001b70:	438b      	bics	r3, r1
 8001b72:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001b74:	6822      	ldr	r2, [r4, #0]
 8001b76:	6953      	ldr	r3, [r2, #20]
 8001b78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8001b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b84:	2203      	movs	r2, #3
 8001b86:	4393      	bics	r3, r2
 8001b88:	3a02      	subs	r2, #2
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e75e      	b.n	8001a50 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	e75c      	b.n	8001a50 <HAL_ADC_Init+0x8c>
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	fffffefd 	.word	0xfffffefd
 8001b9c:	40012708 	.word	0x40012708
 8001ba0:	ffc3ffff 	.word	0xffc3ffff
 8001ba4:	fdffffff 	.word	0xfdffffff
 8001ba8:	fffe0219 	.word	0xfffe0219
 8001bac:	fffffc03 	.word	0xfffffc03

08001bb0 <HAL_ADC_Start_DMA>:
{
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	000d      	movs	r5, r1
 8001bb6:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bb8:	6803      	ldr	r3, [r0, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	0752      	lsls	r2, r2, #29
 8001bbe:	d43c      	bmi.n	8001c3a <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 8001bc0:	2250      	movs	r2, #80	; 0x50
 8001bc2:	5c82      	ldrb	r2, [r0, r2]
 8001bc4:	2a01      	cmp	r2, #1
 8001bc6:	d03a      	beq.n	8001c3e <HAL_ADC_Start_DMA+0x8e>
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2250      	movs	r2, #80	; 0x50
 8001bcc:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bd4:	69c3      	ldr	r3, [r0, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 8001bda:	f7ff feb3 	bl	8001944 <ADC_Enable>
 8001bde:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001be0:	d129      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x86>
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_ADC_Start_DMA+0x94>)
 8001bea:	401a      	ands	r2, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8001bf8:	2250      	movs	r2, #80	; 0x50
 8001bfa:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_ADC_Start_DMA+0x98>)
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_ADC_Start_DMA+0x9c>)
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_ADC_Start_DMA+0xa0>)
 8001c0c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	221c      	movs	r2, #28
 8001c12:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6853      	ldr	r3, [r2, #4]
 8001c18:	2110      	movs	r1, #16
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c1e:	6821      	ldr	r1, [r4, #0]
 8001c20:	3140      	adds	r1, #64	; 0x40
 8001c22:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001c24:	0033      	movs	r3, r6
 8001c26:	002a      	movs	r2, r5
 8001c28:	f000 f9d4 	bl	8001fd4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	6893      	ldr	r3, [r2, #8]
 8001c30:	2104      	movs	r1, #4
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6093      	str	r3, [r2, #8]
}
 8001c36:	0038      	movs	r0, r7
 8001c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8001c3a:	2702      	movs	r7, #2
 8001c3c:	e7fb      	b.n	8001c36 <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 8001c3e:	2702      	movs	r7, #2
 8001c40:	e7f9      	b.n	8001c36 <HAL_ADC_Start_DMA+0x86>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	fffff0fe 	.word	0xfffff0fe
 8001c48:	08001c55 	.word	0x08001c55
 8001c4c:	08001ccb 	.word	0x08001ccb
 8001c50:	08001cd7 	.word	0x08001cd7

08001c54 <ADC_DMAConvCplt>:
{
 8001c54:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c56:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5a:	2150      	movs	r1, #80	; 0x50
 8001c5c:	4211      	tst	r1, r2
 8001c5e:	d12c      	bne.n	8001cba <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	430a      	orrs	r2, r1
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68d0      	ldr	r0, [r2, #12]
 8001c6e:	21c0      	movs	r1, #192	; 0xc0
 8001c70:	0109      	lsls	r1, r1, #4
 8001c72:	4208      	tst	r0, r1
 8001c74:	d114      	bne.n	8001ca0 <ADC_DMAConvCplt+0x4c>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001c76:	2120      	movs	r1, #32
 8001c78:	5c59      	ldrb	r1, [r3, r1]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d110      	bne.n	8001ca0 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c7e:	6811      	ldr	r1, [r2, #0]
 8001c80:	0709      	lsls	r1, r1, #28
 8001c82:	d50d      	bpl.n	8001ca0 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c84:	6891      	ldr	r1, [r2, #8]
 8001c86:	0749      	lsls	r1, r1, #29
 8001c88:	d40e      	bmi.n	8001ca8 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c8a:	6851      	ldr	r1, [r2, #4]
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	4381      	bics	r1, r0
 8001c90:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001c92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c94:	490b      	ldr	r1, [pc, #44]	; (8001cc4 <ADC_DMAConvCplt+0x70>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	3104      	adds	r1, #4
 8001c9a:	31ff      	adds	r1, #255	; 0xff
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f001 fab3 	bl	800320c <HAL_ADC_ConvCpltCallback>
}
 8001ca6:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001caa:	2120      	movs	r1, #32
 8001cac:	430a      	orrs	r2, r1
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb2:	391f      	subs	r1, #31
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb8:	e7f2      	b.n	8001ca0 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	4798      	blx	r3
}
 8001cc0:	e7f1      	b.n	8001ca6 <ADC_DMAConvCplt+0x52>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	fffffefe 	.word	0xfffffefe

08001cc8 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001cc8:	4770      	bx	lr

08001cca <ADC_DMAHalfConvCplt>:
{
 8001cca:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cce:	f7ff fffb 	bl	8001cc8 <HAL_ADC_ConvHalfCpltCallback>
}
 8001cd2:	bd10      	pop	{r4, pc}

08001cd4 <HAL_ADC_ErrorCallback>:
}
 8001cd4:	4770      	bx	lr

08001cd6 <ADC_DMAError>:
{
 8001cd6:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cda:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ce2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001ce4:	3a3c      	subs	r2, #60	; 0x3c
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8001cea:	f7ff fff3 	bl	8001cd4 <HAL_ADC_ErrorCallback>
}
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <HAL_ADC_ConfigChannel>:
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	0004      	movs	r4, r0
 8001cf4:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001cf6:	2350      	movs	r3, #80	; 0x50
 8001cf8:	5cc3      	ldrb	r3, [r0, r3]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d04b      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0xa6>
 8001cfe:	2350      	movs	r3, #80	; 0x50
 8001d00:	2201      	movs	r2, #1
 8001d02:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001d04:	6803      	ldr	r3, [r0, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	0752      	lsls	r2, r2, #29
 8001d0a:	d41a      	bmi.n	8001d42 <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 8001d0c:	6849      	ldr	r1, [r1, #4]
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_ADC_ConfigChannel+0xac>)
 8001d10:	4291      	cmp	r1, r2
 8001d12:	d029      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001d14:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d16:	682a      	ldr	r2, [r5, #0]
 8001d18:	0352      	lsls	r2, r2, #13
 8001d1a:	0b52      	lsrs	r2, r2, #13
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	035b      	lsls	r3, r3, #13
 8001d24:	d416      	bmi.n	8001d54 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	039b      	lsls	r3, r3, #14
 8001d2a:	d505      	bpl.n	8001d38 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_ADC_ConfigChannel+0xb0>)
 8001d2e:	6811      	ldr	r1, [r2, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	03db      	lsls	r3, r3, #15
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001d38:	2350      	movs	r3, #80	; 0x50
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001d3e:	2000      	movs	r0, #0
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d42:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d44:	2220      	movs	r2, #32
 8001d46:	4313      	orrs	r3, r2
 8001d48:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001d4a:	2350      	movs	r3, #80	; 0x50
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1
 8001d52:	e7f5      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <HAL_ADC_ConfigChannel+0xb0>)
 8001d56:	6811      	ldr	r1, [r2, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f7ff fdd7 	bl	8001914 <ADC_DelayMicroSecond>
 8001d66:	e7de      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001d68:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d6a:	682a      	ldr	r2, [r5, #0]
 8001d6c:	0352      	lsls	r2, r2, #13
 8001d6e:	0b52      	lsrs	r2, r2, #13
 8001d70:	4391      	bics	r1, r2
 8001d72:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	035b      	lsls	r3, r3, #13
 8001d78:	d504      	bpl.n	8001d84 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_ADC_ConfigChannel+0xb0>)
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HAL_ADC_ConfigChannel+0xb4>)
 8001d80:	400b      	ands	r3, r1
 8001d82:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	d5d6      	bpl.n	8001d38 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_ADC_ConfigChannel+0xb0>)
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	4906      	ldr	r1, [pc, #24]	; (8001da8 <HAL_ADC_ConfigChannel+0xb8>)
 8001d90:	400b      	ands	r3, r1
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e7d0      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8001d96:	2002      	movs	r0, #2
 8001d98:	e7d2      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x50>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	00001001 	.word	0x00001001
 8001da0:	40012708 	.word	0x40012708
 8001da4:	ff7fffff 	.word	0xff7fffff
 8001da8:	ffbfffff 	.word	0xffbfffff

08001dac <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db0:	2350      	movs	r3, #80	; 0x50
 8001db2:	5cc3      	ldrb	r3, [r0, r3]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d04d      	beq.n	8001e54 <HAL_ADCEx_Calibration_Start+0xa8>
 8001db8:	2350      	movs	r3, #80	; 0x50
 8001dba:	2201      	movs	r2, #1
 8001dbc:	54c2      	strb	r2, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dbe:	6803      	ldr	r3, [r0, #0]
 8001dc0:	6899      	ldr	r1, [r3, #8]
 8001dc2:	3202      	adds	r2, #2
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_ADCEx_Calibration_Start+0x30>
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	07d2      	lsls	r2, r2, #31
 8001dce:	d505      	bpl.n	8001ddc <HAL_ADCEx_Calibration_Start+0x30>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6543      	str	r3, [r0, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e037      	b.n	8001e4c <HAL_ADCEx_Calibration_Start+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dde:	491e      	ldr	r1, [pc, #120]	; (8001e58 <HAL_ADCEx_Calibration_Start+0xac>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	3106      	adds	r1, #6
 8001de4:	31ff      	adds	r1, #255	; 0xff
 8001de6:	430a      	orrs	r2, r1
 8001de8:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001dea:	68de      	ldr	r6, [r3, #12]
 8001dec:	3101      	adds	r1, #1
 8001dee:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	438a      	bics	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001df6:	6822      	ldr	r2, [r4, #0]
 8001df8:	6891      	ldr	r1, [r2, #8]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001e02:	f7ff fd6f 	bl	80018e4 <HAL_GetTick>
 8001e06:	0005      	movs	r5, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	da13      	bge.n	8001e38 <HAL_ADCEx_Calibration_Start+0x8c>
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e10:	f7ff fd68 	bl	80018e4 <HAL_GetTick>
 8001e14:	1b40      	subs	r0, r0, r5
 8001e16:	280a      	cmp	r0, #10
 8001e18:	d9f6      	bls.n	8001e08 <HAL_ADCEx_Calibration_Start+0x5c>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	daf2      	bge.n	8001e08 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8001e22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e24:	2212      	movs	r2, #18
 8001e26:	4393      	bics	r3, r2
 8001e28:	3a02      	subs	r2, #2
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8001e2e:	2350      	movs	r3, #80	; 0x50
 8001e30:	2200      	movs	r2, #0
 8001e32:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
 8001e36:	e00c      	b.n	8001e52 <HAL_ADCEx_Calibration_Start+0xa6>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	4332      	orrs	r2, r6
 8001e3c:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e40:	2203      	movs	r2, #3
 8001e42:	4393      	bics	r3, r2
 8001e44:	3a02      	subs	r2, #2
 8001e46:	4313      	orrs	r3, r2
 8001e48:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2000      	movs	r0, #0
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4c:	2350      	movs	r3, #80	; 0x50
 8001e4e:	2200      	movs	r2, #0
 8001e50:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8001e54:	2002      	movs	r0, #2
 8001e56:	e7fc      	b.n	8001e52 <HAL_ADCEx_Calibration_Start+0xa6>
 8001e58:	fffffefd 	.word	0xfffffefd

08001e5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	db11      	blt.n	8001e86 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e62:	0883      	lsrs	r3, r0, #2
 8001e64:	4d13      	ldr	r5, [pc, #76]	; (8001eb4 <HAL_NVIC_SetPriority+0x58>)
 8001e66:	33c0      	adds	r3, #192	; 0xc0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	595c      	ldr	r4, [r3, r5]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4010      	ands	r0, r2
 8001e70:	00c0      	lsls	r0, r0, #3
 8001e72:	32fc      	adds	r2, #252	; 0xfc
 8001e74:	0016      	movs	r6, r2
 8001e76:	4086      	lsls	r6, r0
 8001e78:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e7a:	0189      	lsls	r1, r1, #6
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e80:	4322      	orrs	r2, r4
 8001e82:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001e84:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e86:	230f      	movs	r3, #15
 8001e88:	4003      	ands	r3, r0
 8001e8a:	3b08      	subs	r3, #8
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3306      	adds	r3, #6
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_NVIC_SetPriority+0x5c>)
 8001e94:	4694      	mov	ip, r2
 8001e96:	4463      	add	r3, ip
 8001e98:	685c      	ldr	r4, [r3, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	4010      	ands	r0, r2
 8001e9e:	00c0      	lsls	r0, r0, #3
 8001ea0:	32fc      	adds	r2, #252	; 0xfc
 8001ea2:	0015      	movs	r5, r2
 8001ea4:	4085      	lsls	r5, r0
 8001ea6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ea8:	0189      	lsls	r1, r1, #6
 8001eaa:	400a      	ands	r2, r1
 8001eac:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eae:	4322      	orrs	r2, r4
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e7e7      	b.n	8001e84 <HAL_NVIC_SetPriority+0x28>
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	db05      	blt.n	8001ecc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	4018      	ands	r0, r3
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	4083      	lsls	r3, r0
 8001ec8:	4a01      	ldr	r2, [pc, #4]	; (8001ed0 <HAL_NVIC_EnableIRQ+0x14>)
 8001eca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ecc:	4770      	bx	lr
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	3801      	subs	r0, #1
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	045b      	lsls	r3, r3, #17
 8001eda:	4298      	cmp	r0, r3
 8001edc:	d20f      	bcs.n	8001efe <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_SYSTICK_Config+0x30>)
 8001ee0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <HAL_SYSTICK_Config+0x34>)
 8001ee4:	6a03      	ldr	r3, [r0, #32]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	21c0      	movs	r1, #192	; 0xc0
 8001eec:	0609      	lsls	r1, r1, #24
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	3307      	adds	r3, #7
 8001ef8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efa:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001efc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001f00:	e7fc      	b.n	8001efc <HAL_SYSTICK_Config+0x28>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	e000e010 	.word	0xe000e010
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f10:	251c      	movs	r5, #28
 8001f12:	4025      	ands	r5, r4
 8001f14:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001f16:	2401      	movs	r4, #1
 8001f18:	40ac      	lsls	r4, r5
 8001f1a:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f1c:	6804      	ldr	r4, [r0, #0]
 8001f1e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f20:	6883      	ldr	r3, [r0, #8]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d004      	beq.n	8001f30 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001f26:	6803      	ldr	r3, [r0, #0]
 8001f28:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001f2a:	6803      	ldr	r3, [r0, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
  }
}
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f34:	6803      	ldr	r3, [r0, #0]
 8001f36:	60d9      	str	r1, [r3, #12]
 8001f38:	e7f9      	b.n	8001f2e <DMA_SetConfig+0x22>
	...

08001f3c <HAL_DMA_Init>:
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8001f40:	d03d      	beq.n	8001fbe <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f42:	6805      	ldr	r5, [r0, #0]
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_DMA_Init+0x88>)
 8001f46:	18e8      	adds	r0, r5, r3
 8001f48:	2114      	movs	r1, #20
 8001f4a:	f7fe f8e5 	bl	8000118 <__udivsi3>
 8001f4e:	0080      	lsls	r0, r0, #2
 8001f50:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_DMA_Init+0x8c>)
 8001f54:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f56:	2325      	movs	r3, #37	; 0x25
 8001f58:	2202      	movs	r2, #2
 8001f5a:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8001f5c:	682a      	ldr	r2, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_DMA_Init+0x90>)
 8001f60:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001f62:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8001f66:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	6921      	ldr	r1, [r4, #16]
 8001f6a:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	69a1      	ldr	r1, [r4, #24]
 8001f72:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f78:	6a21      	ldr	r1, [r4, #32]
 8001f7a:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001f7c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001f7e:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f80:	68a2      	ldr	r2, [r4, #8]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d010      	beq.n	8001fac <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_DMA_Init+0x94>)
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001f90:	221c      	movs	r2, #28
 8001f92:	4015      	ands	r5, r2
 8001f94:	200f      	movs	r0, #15
 8001f96:	40a8      	lsls	r0, r5
 8001f98:	4381      	bics	r1, r0
 8001f9a:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	6860      	ldr	r0, [r4, #4]
 8001fa0:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001fa2:	402a      	ands	r2, r5
 8001fa4:	4090      	lsls	r0, r2
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001fb0:	2225      	movs	r2, #37	; 0x25
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
}
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	e7fc      	b.n	8001fbc <HAL_DMA_Init+0x80>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	bffdfff8 	.word	0xbffdfff8
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	ffff800f 	.word	0xffff800f
 8001fd0:	400200a8 	.word	0x400200a8

08001fd4 <HAL_DMA_Start_IT>:
{
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001fd8:	2024      	movs	r0, #36	; 0x24
 8001fda:	5c20      	ldrb	r0, [r4, r0]
 8001fdc:	2801      	cmp	r0, #1
 8001fde:	d032      	beq.n	8002046 <HAL_DMA_Start_IT+0x72>
 8001fe0:	2024      	movs	r0, #36	; 0x24
 8001fe2:	2501      	movs	r5, #1
 8001fe4:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	5c20      	ldrb	r0, [r4, r0]
 8001fea:	2801      	cmp	r0, #1
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001fee:	2324      	movs	r3, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001ff4:	2002      	movs	r0, #2
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	3024      	adds	r0, #36	; 0x24
 8001ffa:	3501      	adds	r5, #1
 8001ffc:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffe:	2000      	movs	r0, #0
 8002000:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002002:	6825      	ldr	r5, [r4, #0]
 8002004:	6828      	ldr	r0, [r5, #0]
 8002006:	2601      	movs	r6, #1
 8002008:	43b0      	bics	r0, r6
 800200a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800200c:	0020      	movs	r0, r4
 800200e:	f7ff ff7d 	bl	8001f0c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002012:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002018:	6822      	ldr	r2, [r4, #0]
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	210e      	movs	r1, #14
 800201e:	430b      	orrs	r3, r1
 8002020:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002022:	6822      	ldr	r2, [r4, #0]
 8002024:	6813      	ldr	r3, [r2, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430b      	orrs	r3, r1
 800202a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2000      	movs	r0, #0
 800202e:	e7e2      	b.n	8001ff6 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	2104      	movs	r1, #4
 8002036:	438b      	bics	r3, r1
 8002038:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800203a:	6822      	ldr	r2, [r4, #0]
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	3106      	adds	r1, #6
 8002040:	430b      	orrs	r3, r1
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e7ed      	b.n	8002022 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002046:	2002      	movs	r0, #2
 8002048:	e7d5      	b.n	8001ff6 <HAL_DMA_Start_IT+0x22>

0800204a <HAL_DMA_IRQHandler>:
{
 800204a:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800204c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800204e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002050:	6804      	ldr	r4, [r0, #0]
 8002052:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002056:	231c      	movs	r3, #28
 8002058:	4013      	ands	r3, r2
 800205a:	2204      	movs	r2, #4
 800205c:	409a      	lsls	r2, r3
 800205e:	4211      	tst	r1, r2
 8002060:	d014      	beq.n	800208c <HAL_DMA_IRQHandler+0x42>
 8002062:	076a      	lsls	r2, r5, #29
 8002064:	d512      	bpl.n	800208c <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	069b      	lsls	r3, r3, #26
 800206a:	d403      	bmi.n	8002074 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4393      	bics	r3, r2
 8002072:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002074:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002076:	221c      	movs	r2, #28
 8002078:	401a      	ands	r2, r3
 800207a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800207c:	2304      	movs	r3, #4
 800207e:	4093      	lsls	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002082:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002084:	2b00      	cmp	r3, #0
 8002086:	d000      	beq.n	800208a <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8002088:	4798      	blx	r3
}
 800208a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800208c:	2202      	movs	r2, #2
 800208e:	409a      	lsls	r2, r3
 8002090:	4211      	tst	r1, r2
 8002092:	d01a      	beq.n	80020ca <HAL_DMA_IRQHandler+0x80>
 8002094:	07aa      	lsls	r2, r5, #30
 8002096:	d518      	bpl.n	80020ca <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	d406      	bmi.n	80020ac <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	220a      	movs	r2, #10
 80020a2:	4393      	bics	r3, r2
 80020a4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80020a6:	2325      	movs	r3, #37	; 0x25
 80020a8:	3a09      	subs	r2, #9
 80020aa:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80020ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020ae:	221c      	movs	r2, #28
 80020b0:	401a      	ands	r2, r3
 80020b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80020b4:	2302      	movs	r3, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80020ba:	2324      	movs	r3, #36	; 0x24
 80020bc:	2200      	movs	r2, #0
 80020be:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 80020c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0e1      	beq.n	800208a <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 80020c6:	4798      	blx	r3
 80020c8:	e7df      	b.n	800208a <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80020ca:	2208      	movs	r2, #8
 80020cc:	409a      	lsls	r2, r3
 80020ce:	4211      	tst	r1, r2
 80020d0:	d0db      	beq.n	800208a <HAL_DMA_IRQHandler+0x40>
 80020d2:	072d      	lsls	r5, r5, #28
 80020d4:	d5d9      	bpl.n	800208a <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	220e      	movs	r2, #14
 80020da:	4393      	bics	r3, r2
 80020dc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020e0:	320e      	adds	r2, #14
 80020e2:	401a      	ands	r2, r3
 80020e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80020e6:	2301      	movs	r3, #1
 80020e8:	001c      	movs	r4, r3
 80020ea:	4094      	lsls	r4, r2
 80020ec:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ee:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80020f0:	2225      	movs	r2, #37	; 0x25
 80020f2:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80020f4:	3323      	adds	r3, #35	; 0x23
 80020f6:	2200      	movs	r2, #0
 80020f8:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80020fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0c4      	beq.n	800208a <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8002100:	4798      	blx	r3
  return;
 8002102:	e7c2      	b.n	800208a <HAL_DMA_IRQHandler+0x40>

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8002106:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002108:	e056      	b.n	80021b8 <HAL_GPIO_Init+0xb4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800210a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800210c:	005f      	lsls	r7, r3, #1
 800210e:	2403      	movs	r4, #3
 8002110:	40bc      	lsls	r4, r7
 8002112:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002114:	68cc      	ldr	r4, [r1, #12]
 8002116:	40bc      	lsls	r4, r7
 8002118:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800211a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211e:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	684e      	ldr	r6, [r1, #4]
 8002122:	0936      	lsrs	r6, r6, #4
 8002124:	2201      	movs	r2, #1
 8002126:	4032      	ands	r2, r6
 8002128:	409a      	lsls	r2, r3
 800212a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800212c:	6042      	str	r2, [r0, #4]
 800212e:	e053      	b.n	80021d8 <HAL_GPIO_Init+0xd4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002130:	08de      	lsrs	r6, r3, #3
 8002132:	3608      	adds	r6, #8
 8002134:	00b6      	lsls	r6, r6, #2
 8002136:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002138:	3205      	adds	r2, #5
 800213a:	401a      	ands	r2, r3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	240f      	movs	r4, #15
 8002140:	4094      	lsls	r4, r2
 8002142:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002144:	690c      	ldr	r4, [r1, #16]
 8002146:	4094      	lsls	r4, r2
 8002148:	0022      	movs	r2, r4
 800214a:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800214c:	5032      	str	r2, [r6, r0]
 800214e:	e056      	b.n	80021fe <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002150:	2602      	movs	r6, #2
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x52>
 8002154:	2600      	movs	r6, #0
 8002156:	40a6      	lsls	r6, r4
 8002158:	0034      	movs	r4, r6
 800215a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	3202      	adds	r2, #2
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4e3f      	ldr	r6, [pc, #252]	; (8002260 <HAL_GPIO_Init+0x15c>)
 8002162:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002164:	4a3f      	ldr	r2, [pc, #252]	; (8002264 <HAL_GPIO_Init+0x160>)
 8002166:	6897      	ldr	r7, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002168:	43ea      	mvns	r2, r5
 800216a:	003e      	movs	r6, r7
 800216c:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	684c      	ldr	r4, [r1, #4]
 8002170:	02e4      	lsls	r4, r4, #11
 8002172:	d501      	bpl.n	8002178 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8002174:	003e      	movs	r6, r7
 8002176:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8002178:	4c3a      	ldr	r4, [pc, #232]	; (8002264 <HAL_GPIO_Init+0x160>)
 800217a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800217c:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800217e:	003e      	movs	r6, r7
 8002180:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002182:	684c      	ldr	r4, [r1, #4]
 8002184:	02a4      	lsls	r4, r4, #10
 8002186:	d501      	bpl.n	800218c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002188:	003e      	movs	r6, r7
 800218a:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 800218c:	4c35      	ldr	r4, [pc, #212]	; (8002264 <HAL_GPIO_Init+0x160>)
 800218e:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 8002190:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002192:	003e      	movs	r6, r7
 8002194:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	684c      	ldr	r4, [r1, #4]
 8002198:	03a4      	lsls	r4, r4, #14
 800219a:	d501      	bpl.n	80021a0 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 800219c:	003e      	movs	r6, r7
 800219e:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80021a0:	4c30      	ldr	r4, [pc, #192]	; (8002264 <HAL_GPIO_Init+0x160>)
 80021a2:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a8:	684c      	ldr	r4, [r1, #4]
 80021aa:	03e4      	lsls	r4, r4, #15
 80021ac:	d501      	bpl.n	80021b2 <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 80021ae:	002a      	movs	r2, r5
 80021b0:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 80021b2:	4c2c      	ldr	r4, [pc, #176]	; (8002264 <HAL_GPIO_Init+0x160>)
 80021b4:	6022      	str	r2, [r4, #0]
      }
    }
    position++;
 80021b6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80021b8:	680c      	ldr	r4, [r1, #0]
 80021ba:	0022      	movs	r2, r4
 80021bc:	40da      	lsrs	r2, r3
 80021be:	d04d      	beq.n	800225c <HAL_GPIO_Init+0x158>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0025      	movs	r5, r4
 80021c6:	4015      	ands	r5, r2
    if (iocurrent)
 80021c8:	4214      	tst	r4, r2
 80021ca:	d0f4      	beq.n	80021b6 <HAL_GPIO_Init+0xb2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021cc:	684e      	ldr	r6, [r1, #4]
 80021ce:	2403      	movs	r4, #3
 80021d0:	4034      	ands	r4, r6
 80021d2:	3c01      	subs	r4, #1
 80021d4:	2c01      	cmp	r4, #1
 80021d6:	d998      	bls.n	800210a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d8:	684c      	ldr	r4, [r1, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	4022      	ands	r2, r4
 80021de:	2a03      	cmp	r2, #3
 80021e0:	d008      	beq.n	80021f4 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 80021e2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e4:	005e      	lsls	r6, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	40b2      	lsls	r2, r6
 80021ea:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	688a      	ldr	r2, [r1, #8]
 80021ee:	40b2      	lsls	r2, r6
 80021f0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80021f2:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f4:	684c      	ldr	r4, [r1, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	4022      	ands	r2, r4
 80021fa:	2a02      	cmp	r2, #2
 80021fc:	d098      	beq.n	8002130 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 80021fe:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002200:	005e      	lsls	r6, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	0017      	movs	r7, r2
 8002206:	40b7      	lsls	r7, r6
 8002208:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220a:	684f      	ldr	r7, [r1, #4]
 800220c:	403a      	ands	r2, r7
 800220e:	40b2      	lsls	r2, r6
 8002210:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002212:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002214:	684c      	ldr	r4, [r1, #4]
 8002216:	22c0      	movs	r2, #192	; 0xc0
 8002218:	0292      	lsls	r2, r2, #10
 800221a:	4214      	tst	r4, r2
 800221c:	d0cb      	beq.n	80021b6 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4c12      	ldr	r4, [pc, #72]	; (8002268 <HAL_GPIO_Init+0x164>)
 8002220:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002222:	2601      	movs	r6, #1
 8002224:	4332      	orrs	r2, r6
 8002226:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8002228:	089a      	lsrs	r2, r3, #2
 800222a:	1c94      	adds	r4, r2, #2
 800222c:	00a4      	lsls	r4, r4, #2
 800222e:	4e0c      	ldr	r6, [pc, #48]	; (8002260 <HAL_GPIO_Init+0x15c>)
 8002230:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002232:	2403      	movs	r4, #3
 8002234:	401c      	ands	r4, r3
 8002236:	00a4      	lsls	r4, r4, #2
 8002238:	260f      	movs	r6, #15
 800223a:	40a6      	lsls	r6, r4
 800223c:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800223e:	26a0      	movs	r6, #160	; 0xa0
 8002240:	05f6      	lsls	r6, r6, #23
 8002242:	42b0      	cmp	r0, r6
 8002244:	d086      	beq.n	8002154 <HAL_GPIO_Init+0x50>
 8002246:	4e09      	ldr	r6, [pc, #36]	; (800226c <HAL_GPIO_Init+0x168>)
 8002248:	42b0      	cmp	r0, r6
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x154>
 800224c:	4e08      	ldr	r6, [pc, #32]	; (8002270 <HAL_GPIO_Init+0x16c>)
 800224e:	42b0      	cmp	r0, r6
 8002250:	d100      	bne.n	8002254 <HAL_GPIO_Init+0x150>
 8002252:	e77d      	b.n	8002150 <HAL_GPIO_Init+0x4c>
 8002254:	2606      	movs	r6, #6
 8002256:	e77e      	b.n	8002156 <HAL_GPIO_Init+0x52>
 8002258:	2601      	movs	r6, #1
 800225a:	e77c      	b.n	8002156 <HAL_GPIO_Init+0x52>
  }
}
 800225c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40010000 	.word	0x40010000
 8002264:	40010400 	.word	0x40010400
 8002268:	40021000 	.word	0x40021000
 800226c:	50000400 	.word	0x50000400
 8002270:	50000800 	.word	0x50000800

08002274 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	6993      	ldr	r3, [r2, #24]
 8002278:	079b      	lsls	r3, r3, #30
 800227a:	d501      	bpl.n	8002280 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	07d2      	lsls	r2, r2, #31
 8002286:	d403      	bmi.n	8002290 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	2101      	movs	r1, #1
 800228c:	430a      	orrs	r2, r1
 800228e:	619a      	str	r2, [r3, #24]
  }
}
 8002290:	4770      	bx	lr
	...

08002294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002294:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002296:	0589      	lsls	r1, r1, #22
 8002298:	0d89      	lsrs	r1, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800229a:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800229c:	4311      	orrs	r1, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800229e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a0:	9b02      	ldr	r3, [sp, #8]
 80022a2:	4319      	orrs	r1, r3
 80022a4:	0049      	lsls	r1, r1, #1
 80022a6:	0849      	lsrs	r1, r1, #1
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022a8:	6804      	ldr	r4, [r0, #0]
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	0d5b      	lsrs	r3, r3, #21
 80022ae:	2080      	movs	r0, #128	; 0x80
 80022b0:	00c0      	lsls	r0, r0, #3
 80022b2:	4003      	ands	r3, r0
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <I2C_TransferConfig+0x30>)
 80022b6:	4303      	orrs	r3, r0
 80022b8:	439a      	bics	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	430b      	orrs	r3, r1
 80022be:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022c0:	bd10      	pop	{r4, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	03ff63ff 	.word	0x03ff63ff

080022c8 <I2C_IsErrorOccurred>:
{
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	46c6      	mov	lr, r8
 80022cc:	b500      	push	{lr}
 80022ce:	0004      	movs	r4, r0
 80022d0:	000d      	movs	r5, r1
 80022d2:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80022d4:	6801      	ldr	r1, [r0, #0]
 80022d6:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022d8:	2210      	movs	r2, #16
 80022da:	0016      	movs	r6, r2
 80022dc:	401e      	ands	r6, r3
 80022de:	421a      	tst	r2, r3
 80022e0:	d100      	bne.n	80022e4 <I2C_IsErrorOccurred+0x1c>
 80022e2:	e075      	b.n	80023d0 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e4:	2310      	movs	r3, #16
 80022e6:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ee:	6820      	ldr	r0, [r4, #0]
 80022f0:	6983      	ldr	r3, [r0, #24]
 80022f2:	069b      	lsls	r3, r3, #26
 80022f4:	d431      	bmi.n	800235a <I2C_IsErrorOccurred+0x92>
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d12f      	bne.n	800235a <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 80022fa:	1c6b      	adds	r3, r5, #1
 80022fc:	d0f7      	beq.n	80022ee <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff faf1 	bl	80018e4 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	42a8      	cmp	r0, r5
 8002306:	d801      	bhi.n	800230c <I2C_IsErrorOccurred+0x44>
 8002308:	2d00      	cmp	r5, #0
 800230a:	d1f0      	bne.n	80022ee <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	684b      	ldr	r3, [r1, #4]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	01d2      	lsls	r2, r2, #7
 8002314:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 8002316:	2242      	movs	r2, #66	; 0x42
 8002318:	5ca2      	ldrb	r2, [r4, r2]
 800231a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800231c:	6988      	ldr	r0, [r1, #24]
 800231e:	0400      	lsls	r0, r0, #16
 8002320:	d503      	bpl.n	800232a <I2C_IsErrorOccurred+0x62>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8002326:	2a20      	cmp	r2, #32
 8002328:	d10e      	bne.n	8002348 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	d4dd      	bmi.n	80022ee <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002332:	f7ff fad7 	bl	80018e4 <HAL_GetTick>
 8002336:	1bc0      	subs	r0, r0, r7
 8002338:	2819      	cmp	r0, #25
 800233a:	d9f6      	bls.n	800232a <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	2320      	movs	r3, #32
 800233e:	4642      	mov	r2, r8
 8002340:	431a      	orrs	r2, r3
 8002342:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8002344:	2601      	movs	r6, #1
              break;
 8002346:	e7d2      	b.n	80022ee <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002348:	684a      	ldr	r2, [r1, #4]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	01db      	lsls	r3, r3, #7
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002352:	f7ff fac7 	bl	80018e4 <HAL_GetTick>
 8002356:	0007      	movs	r7, r0
 8002358:	e7e7      	b.n	800232a <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 800235a:	2e00      	cmp	r6, #0
 800235c:	d101      	bne.n	8002362 <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235e:	2320      	movs	r3, #32
 8002360:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002362:	2604      	movs	r6, #4
 8002364:	4643      	mov	r3, r8
 8002366:	4333      	orrs	r3, r6
 8002368:	001e      	movs	r6, r3
    status = HAL_ERROR;
 800236a:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002370:	05d9      	lsls	r1, r3, #23
 8002372:	d504      	bpl.n	800237e <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 8002374:	2101      	movs	r1, #1
 8002376:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002378:	31ff      	adds	r1, #255	; 0xff
 800237a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800237c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800237e:	055a      	lsls	r2, r3, #21
 8002380:	d506      	bpl.n	8002390 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 8002382:	2208      	movs	r2, #8
 8002384:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002386:	6822      	ldr	r2, [r4, #0]
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800238e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002390:	059b      	lsls	r3, r3, #22
 8002392:	d51f      	bpl.n	80023d4 <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002394:	2302      	movs	r3, #2
 8002396:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80023a0:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80023a2:	0020      	movs	r0, r4
 80023a4:	f7ff ff66 	bl	8002274 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6853      	ldr	r3, [r2, #4]
 80023ac:	490b      	ldr	r1, [pc, #44]	; (80023dc <I2C_IsErrorOccurred+0x114>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80023b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023b4:	4333      	orrs	r3, r6
 80023b6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	2341      	movs	r3, #65	; 0x41
 80023ba:	2220      	movs	r2, #32
 80023bc:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023be:	2300      	movs	r3, #0
 80023c0:	3222      	adds	r2, #34	; 0x22
 80023c2:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80023c4:	3a02      	subs	r2, #2
 80023c6:	54a3      	strb	r3, [r4, r2]
}
 80023c8:	0028      	movs	r0, r5
 80023ca:	bc80      	pop	{r7}
 80023cc:	46b8      	mov	r8, r7
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2500      	movs	r5, #0
 80023d2:	e7cb      	b.n	800236c <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d0f7      	beq.n	80023c8 <I2C_IsErrorOccurred+0x100>
 80023d8:	e7e3      	b.n	80023a2 <I2C_IsErrorOccurred+0xda>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	fe00e800 	.word	0xfe00e800

080023e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	0004      	movs	r4, r0
 80023e4:	000d      	movs	r5, r1
 80023e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	079b      	lsls	r3, r3, #30
 80023ee:	d420      	bmi.n	8002432 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f0:	0032      	movs	r2, r6
 80023f2:	0029      	movs	r1, r5
 80023f4:	0020      	movs	r0, r4
 80023f6:	f7ff ff67 	bl	80022c8 <I2C_IsErrorOccurred>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d11b      	bne.n	8002436 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	1c6b      	adds	r3, r5, #1
 8002400:	d0f2      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7ff fa6f 	bl	80018e4 <HAL_GetTick>
 8002406:	1b80      	subs	r0, r0, r6
 8002408:	42a8      	cmp	r0, r5
 800240a:	d801      	bhi.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 800240c:	2d00      	cmp	r5, #0
 800240e:	d1eb      	bne.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	079b      	lsls	r3, r3, #30
 8002416:	d4e7      	bmi.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800241a:	2220      	movs	r2, #32
 800241c:	4313      	orrs	r3, r2
 800241e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002420:	2341      	movs	r3, #65	; 0x41
 8002422:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	2300      	movs	r3, #0
 8002426:	3222      	adds	r2, #34	; 0x22
 8002428:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 800242a:	3a02      	subs	r2, #2
 800242c:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	e000      	b.n	8002434 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 8002432:	2000      	movs	r0, #0
}
 8002434:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
 8002438:	e7fc      	b.n	8002434 <I2C_WaitOnTXISFlagUntilTimeout+0x54>

0800243a <I2C_WaitOnFlagUntilTimeout>:
{
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243c:	46ce      	mov	lr, r9
 800243e:	b500      	push	{lr}
 8002440:	b082      	sub	sp, #8
 8002442:	0007      	movs	r7, r0
 8002444:	000d      	movs	r5, r1
 8002446:	0016      	movs	r6, r2
 8002448:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	699c      	ldr	r4, [r3, #24]
 800244e:	402c      	ands	r4, r5
 8002450:	1b64      	subs	r4, r4, r5
 8002452:	4263      	negs	r3, r4
 8002454:	415c      	adcs	r4, r3
 8002456:	9601      	str	r6, [sp, #4]
 8002458:	42b4      	cmp	r4, r6
 800245a:	d121      	bne.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800245c:	464b      	mov	r3, r9
 800245e:	3301      	adds	r3, #1
 8002460:	d0f3      	beq.n	800244a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7ff fa3f 	bl	80018e4 <HAL_GetTick>
 8002466:	9b08      	ldr	r3, [sp, #32]
 8002468:	1ac0      	subs	r0, r0, r3
 800246a:	4548      	cmp	r0, r9
 800246c:	d802      	bhi.n	8002474 <I2C_WaitOnFlagUntilTimeout+0x3a>
 800246e:	464b      	mov	r3, r9
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	402b      	ands	r3, r5
 800247a:	1b5b      	subs	r3, r3, r5
 800247c:	425a      	negs	r2, r3
 800247e:	4153      	adcs	r3, r2
 8002480:	9a01      	ldr	r2, [sp, #4]
 8002482:	4293      	cmp	r3, r2
 8002484:	d1e1      	bne.n	800244a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002488:	2220      	movs	r2, #32
 800248a:	4313      	orrs	r3, r2
 800248c:	647b      	str	r3, [r7, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248e:	2341      	movs	r3, #65	; 0x41
 8002490:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	3222      	adds	r2, #34	; 0x22
 8002496:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8002498:	3a02      	subs	r2, #2
 800249a:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
 800249e:	e000      	b.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80024a0:	2000      	movs	r0, #0
}
 80024a2:	b002      	add	sp, #8
 80024a4:	bc80      	pop	{r7}
 80024a6:	46b9      	mov	r9, r7
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024aa <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80024aa:	b570      	push	{r4, r5, r6, lr}
 80024ac:	0004      	movs	r4, r0
 80024ae:	000d      	movs	r5, r1
 80024b0:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b2:	e003      	b.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	069b      	lsls	r3, r3, #26
 80024ba:	d512      	bpl.n	80024e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	069b      	lsls	r3, r3, #26
 80024c2:	d41b      	bmi.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	0032      	movs	r2, r6
 80024c6:	0029      	movs	r1, r5
 80024c8:	0020      	movs	r0, r4
 80024ca:	f7ff fefd 	bl	80022c8 <I2C_IsErrorOccurred>
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d116      	bne.n	8002500 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff fa07 	bl	80018e4 <HAL_GetTick>
 80024d6:	1b80      	subs	r0, r0, r6
 80024d8:	42a8      	cmp	r0, r5
 80024da:	d8eb      	bhi.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80024dc:	2d00      	cmp	r5, #0
 80024de:	d1ed      	bne.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 80024e0:	e7e8      	b.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024e4:	2220      	movs	r2, #32
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	2341      	movs	r3, #65	; 0x41
 80024ec:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	3222      	adds	r2, #34	; 0x22
 80024f2:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80024f4:	3a02      	subs	r2, #2
 80024f6:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80024f8:	2001      	movs	r0, #1
 80024fa:	e000      	b.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 80024fc:	2000      	movs	r0, #0
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002500:	2001      	movs	r0, #1
 8002502:	e7fc      	b.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x54>

08002504 <HAL_I2C_Init>:
{
 8002504:	b510      	push	{r4, lr}
 8002506:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8002508:	d059      	beq.n	80025be <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	2341      	movs	r3, #65	; 0x41
 800250c:	5cc3      	ldrb	r3, [r0, r3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d043      	beq.n	800259a <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002512:	2341      	movs	r3, #65	; 0x41
 8002514:	2224      	movs	r2, #36	; 0x24
 8002516:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	438b      	bics	r3, r1
 8002520:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	4927      	ldr	r1, [pc, #156]	; (80025c4 <HAL_I2C_Init+0xc0>)
 8002528:	400b      	ands	r3, r1
 800252a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	6893      	ldr	r3, [r2, #8]
 8002530:	4925      	ldr	r1, [pc, #148]	; (80025c8 <HAL_I2C_Init+0xc4>)
 8002532:	400b      	ands	r3, r1
 8002534:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002536:	68e3      	ldr	r3, [r4, #12]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d034      	beq.n	80025a6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800253c:	68a1      	ldr	r1, [r4, #8]
 800253e:	6822      	ldr	r2, [r4, #0]
 8002540:	2384      	movs	r3, #132	; 0x84
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002548:	68e3      	ldr	r3, [r4, #12]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d032      	beq.n	80025b4 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	6851      	ldr	r1, [r2, #4]
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_I2C_Init+0xc8>)
 8002554:	430b      	orrs	r3, r1
 8002556:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	68d3      	ldr	r3, [r2, #12]
 800255c:	491a      	ldr	r1, [pc, #104]	; (80025c8 <HAL_I2C_Init+0xc4>)
 800255e:	400b      	ands	r3, r1
 8002560:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	6962      	ldr	r2, [r4, #20]
 8002566:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002568:	69a2      	ldr	r2, [r4, #24]
 800256a:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800256c:	6821      	ldr	r1, [r4, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002572:	69e3      	ldr	r3, [r4, #28]
 8002574:	6a21      	ldr	r1, [r4, #32]
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	430b      	orrs	r3, r1
 8002584:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	2241      	movs	r2, #65	; 0x41
 800258c:	311f      	adds	r1, #31
 800258e:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002590:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	3201      	adds	r2, #1
 8002594:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002596:	2000      	movs	r0, #0
}
 8002598:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	3340      	adds	r3, #64	; 0x40
 800259c:	2200      	movs	r2, #0
 800259e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80025a0:	f7fe ff48 	bl	8001434 <HAL_I2C_MspInit>
 80025a4:	e7b5      	b.n	8002512 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a6:	68a1      	ldr	r1, [r4, #8]
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6093      	str	r3, [r2, #8]
 80025b2:	e7c9      	b.n	8002548 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	e7c7      	b.n	800254e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
 80025c0:	e7ea      	b.n	8002598 <HAL_I2C_Init+0x94>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	f0ffffff 	.word	0xf0ffffff
 80025c8:	ffff7fff 	.word	0xffff7fff
 80025cc:	02008000 	.word	0x02008000

080025d0 <HAL_I2C_Master_Transmit>:
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	0004      	movs	r4, r0
 80025d6:	000f      	movs	r7, r1
 80025d8:	9202      	str	r2, [sp, #8]
 80025da:	9303      	str	r3, [sp, #12]
 80025dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025de:	2341      	movs	r3, #65	; 0x41
 80025e0:	5cc3      	ldrb	r3, [r0, r3]
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d000      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0x18>
 80025e6:	e09b      	b.n	8002720 <HAL_I2C_Master_Transmit+0x150>
    __HAL_LOCK(hi2c);
 80025e8:	3320      	adds	r3, #32
 80025ea:	5cc3      	ldrb	r3, [r0, r3]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d100      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x22>
 80025f0:	e099      	b.n	8002726 <HAL_I2C_Master_Transmit+0x156>
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	2201      	movs	r2, #1
 80025f6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80025f8:	f7ff f974 	bl	80018e4 <HAL_GetTick>
 80025fc:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	9000      	str	r0, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	0209      	lsls	r1, r1, #8
 8002608:	0020      	movs	r0, r4
 800260a:	f7ff ff16 	bl	800243a <I2C_WaitOnFlagUntilTimeout>
 800260e:	2800      	cmp	r0, #0
 8002610:	d000      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x44>
 8002612:	e08a      	b.n	800272a <HAL_I2C_Master_Transmit+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002614:	2341      	movs	r3, #65	; 0x41
 8002616:	2221      	movs	r2, #33	; 0x21
 8002618:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800261a:	3301      	adds	r3, #1
 800261c:	3a11      	subs	r2, #17
 800261e:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
 8002622:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002624:	9a02      	ldr	r2, [sp, #8]
 8002626:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002628:	9a03      	ldr	r2, [sp, #12]
 800262a:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800262c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90b      	bls.n	800264e <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	23ff      	movs	r3, #255	; 0xff
 8002638:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263a:	3b7f      	subs	r3, #127	; 0x7f
 800263c:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_I2C_Master_Transmit+0x16c>)
 800263e:	9200      	str	r2, [sp, #0]
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	22ff      	movs	r2, #255	; 0xff
 8002644:	0039      	movs	r1, r7
 8002646:	0020      	movs	r0, r4
 8002648:	f7ff fe24 	bl	8002294 <I2C_TransferConfig>
 800264c:	e018      	b.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 800264e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002650:	b292      	uxth	r2, r2
 8002652:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	4938      	ldr	r1, [pc, #224]	; (800273c <HAL_I2C_Master_Transmit+0x16c>)
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	049b      	lsls	r3, r3, #18
 800265e:	0039      	movs	r1, r7
 8002660:	0020      	movs	r0, r4
 8002662:	f7ff fe17 	bl	8002294 <I2C_TransferConfig>
 8002666:	e00b      	b.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002668:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800266a:	b292      	uxth	r2, r2
 800266c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	2100      	movs	r1, #0
 8002674:	9100      	str	r1, [sp, #0]
 8002676:	049b      	lsls	r3, r3, #18
 8002678:	0039      	movs	r1, r7
 800267a:	0020      	movs	r0, r4
 800267c:	f7ff fe0a 	bl	8002294 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002680:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d034      	beq.n	80026f2 <HAL_I2C_Master_Transmit+0x122>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002688:	0032      	movs	r2, r6
 800268a:	0029      	movs	r1, r5
 800268c:	0020      	movs	r0, r4
 800268e:	f7ff fea7 	bl	80023e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002692:	2800      	cmp	r0, #0
 8002694:	d14b      	bne.n	800272e <HAL_I2C_Master_Transmit+0x15e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002696:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800269e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a0:	3301      	adds	r3, #1
 80026a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026b6:	b292      	uxth	r2, r2
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d0e1      	beq.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1df      	bne.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c0:	9600      	str	r6, [sp, #0]
 80026c2:	002b      	movs	r3, r5
 80026c4:	2200      	movs	r2, #0
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0020      	movs	r0, r4
 80026ca:	f7ff feb6 	bl	800243a <I2C_WaitOnFlagUntilTimeout>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d12f      	bne.n	8002732 <HAL_I2C_Master_Transmit+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	d9c6      	bls.n	8002668 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026da:	23ff      	movs	r3, #255	; 0xff
 80026dc:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026de:	3b7f      	subs	r3, #127	; 0x7f
 80026e0:	2200      	movs	r2, #0
 80026e2:	9200      	str	r2, [sp, #0]
 80026e4:	045b      	lsls	r3, r3, #17
 80026e6:	32ff      	adds	r2, #255	; 0xff
 80026e8:	0039      	movs	r1, r7
 80026ea:	0020      	movs	r0, r4
 80026ec:	f7ff fdd2 	bl	8002294 <I2C_TransferConfig>
 80026f0:	e7c6      	b.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f2:	0032      	movs	r2, r6
 80026f4:	0029      	movs	r1, r5
 80026f6:	0020      	movs	r0, r4
 80026f8:	f7ff fed7 	bl	80024aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d11a      	bne.n	8002736 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002706:	6821      	ldr	r1, [r4, #0]
 8002708:	684b      	ldr	r3, [r1, #4]
 800270a:	4d0d      	ldr	r5, [pc, #52]	; (8002740 <HAL_I2C_Master_Transmit+0x170>)
 800270c:	402b      	ands	r3, r5
 800270e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002710:	2341      	movs	r3, #65	; 0x41
 8002712:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	3222      	adds	r2, #34	; 0x22
 8002718:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800271a:	3a02      	subs	r2, #2
 800271c:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800271e:	e000      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
    return HAL_BUSY;
 8002720:	2002      	movs	r0, #2
}
 8002722:	b005      	add	sp, #20
 8002724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002726:	2002      	movs	r0, #2
 8002728:	e7fb      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 800272a:	2001      	movs	r0, #1
 800272c:	e7f9      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
        return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
 8002730:	e7f7      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
          return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
 8002734:	e7f5      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7f3      	b.n	8002722 <HAL_I2C_Master_Transmit+0x152>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	80002000 	.word	0x80002000
 8002740:	fe00e800 	.word	0xfe00e800

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	2341      	movs	r3, #65	; 0x41
 8002748:	5cc3      	ldrb	r3, [r0, r3]
 800274a:	2b20      	cmp	r3, #32
 800274c:	d120      	bne.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274e:	3320      	adds	r3, #32
 8002750:	5cc3      	ldrb	r3, [r0, r3]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d01e      	beq.n	8002794 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002756:	2440      	movs	r4, #64	; 0x40
 8002758:	2201      	movs	r2, #1
 800275a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800275c:	2541      	movs	r5, #65	; 0x41
 800275e:	2324      	movs	r3, #36	; 0x24
 8002760:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002762:	6806      	ldr	r6, [r0, #0]
 8002764:	6833      	ldr	r3, [r6, #0]
 8002766:	4393      	bics	r3, r2
 8002768:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800276a:	6806      	ldr	r6, [r0, #0]
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	4f0a      	ldr	r7, [pc, #40]	; (8002798 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8002770:	403b      	ands	r3, r7
 8002772:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002774:	6806      	ldr	r6, [r0, #0]
 8002776:	6833      	ldr	r3, [r6, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277c:	6801      	ldr	r1, [r0, #0]
 800277e:	680b      	ldr	r3, [r1, #0]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	2320      	movs	r3, #32
 8002786:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800278c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002790:	2002      	movs	r0, #2
 8002792:	e7fc      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8002794:	2002      	movs	r0, #2
 8002796:	e7fa      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8002798:	ffffefff 	.word	0xffffefff

0800279c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	2341      	movs	r3, #65	; 0x41
 80027a0:	5cc3      	ldrb	r3, [r0, r3]
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d11e      	bne.n	80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a6:	3320      	adds	r3, #32
 80027a8:	5cc3      	ldrb	r3, [r0, r3]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d01c      	beq.n	80027e8 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80027ae:	2440      	movs	r4, #64	; 0x40
 80027b0:	2201      	movs	r2, #1
 80027b2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b4:	2541      	movs	r5, #65	; 0x41
 80027b6:	2324      	movs	r3, #36	; 0x24
 80027b8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ba:	6806      	ldr	r6, [r0, #0]
 80027bc:	6833      	ldr	r3, [r6, #0]
 80027be:	4393      	bics	r3, r2
 80027c0:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027c2:	6806      	ldr	r6, [r0, #0]
 80027c4:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027c6:	4f09      	ldr	r7, [pc, #36]	; (80027ec <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80027c8:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ca:	0209      	lsls	r1, r1, #8
 80027cc:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027ce:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d0:	6801      	ldr	r1, [r0, #0]
 80027d2:	680b      	ldr	r3, [r1, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	2320      	movs	r3, #32
 80027da:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80027e0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80027e4:	2002      	movs	r0, #2
 80027e6:	e7fc      	b.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80027e8:	2002      	movs	r0, #2
 80027ea:	e7fa      	b.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80027ec:	fffff0ff 	.word	0xfffff0ff

080027f0 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	05d2      	lsls	r2, r2, #23
 80027f6:	4290      	cmp	r0, r2
 80027f8:	d002      	beq.n	8002800 <TIM_Base_SetConfig+0x10>
 80027fa:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <TIM_Base_SetConfig+0x48>)
 80027fc:	4290      	cmp	r0, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0x18>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002800:	2270      	movs	r2, #112	; 0x70
 8002802:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002804:	684a      	ldr	r2, [r1, #4]
 8002806:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	05d2      	lsls	r2, r2, #23
 800280c:	4290      	cmp	r0, r2
 800280e:	d002      	beq.n	8002816 <TIM_Base_SetConfig+0x26>
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <TIM_Base_SetConfig+0x48>)
 8002812:	4290      	cmp	r0, r2
 8002814:	d103      	bne.n	800281e <TIM_Base_SetConfig+0x2e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <TIM_Base_SetConfig+0x4c>)
 8002818:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	68ca      	ldr	r2, [r1, #12]
 800281c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4393      	bics	r3, r2
 8002822:	690a      	ldr	r2, [r1, #16]
 8002824:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002826:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002828:	688b      	ldr	r3, [r1, #8]
 800282a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	680b      	ldr	r3, [r1, #0]
 800282e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	2301      	movs	r3, #1
 8002832:	6143      	str	r3, [r0, #20]
}
 8002834:	4770      	bx	lr
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40010800 	.word	0x40010800
 800283c:	fffffcff 	.word	0xfffffcff

08002840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	6a03      	ldr	r3, [r0, #32]
 8002844:	2201      	movs	r2, #1
 8002846:	4393      	bics	r3, r2
 8002848:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800284e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002850:	3272      	adds	r2, #114	; 0x72
 8002852:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	680a      	ldr	r2, [r1, #0]
 8002856:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002858:	2302      	movs	r3, #2
 800285a:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800285c:	688b      	ldr	r3, [r1, #8]
 800285e:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002860:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002862:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002864:	684a      	ldr	r2, [r1, #4]
 8002866:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002868:	6203      	str	r3, [r0, #32]
}
 800286a:	bd30      	pop	{r4, r5, pc}

0800286c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286e:	6a03      	ldr	r3, [r0, #32]
 8002870:	2210      	movs	r2, #16
 8002872:	4393      	bics	r3, r2
 8002874:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <TIM_OC2_SetConfig+0x30>)
 800287e:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002880:	680a      	ldr	r2, [r1, #0]
 8002882:	0212      	lsls	r2, r2, #8
 8002884:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002886:	2320      	movs	r3, #32
 8002888:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800288a:	688b      	ldr	r3, [r1, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002890:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002892:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002894:	684a      	ldr	r2, [r1, #4]
 8002896:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002898:	6203      	str	r3, [r0, #32]
}
 800289a:	bd30      	pop	{r4, r5, pc}
 800289c:	ffff8cff 	.word	0xffff8cff

080028a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <TIM_OC3_SetConfig+0x30>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b0:	3275      	adds	r2, #117	; 0x75
 80028b2:	32ff      	adds	r2, #255	; 0xff
 80028b4:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b6:	680a      	ldr	r2, [r1, #0]
 80028b8:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <TIM_OC3_SetConfig+0x34>)
 80028bc:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028be:	688b      	ldr	r3, [r1, #8]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	6203      	str	r3, [r0, #32]
}
 80028ce:	bd30      	pop	{r4, r5, pc}
 80028d0:	fffffeff 	.word	0xfffffeff
 80028d4:	fffffdff 	.word	0xfffffdff

080028d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028da:	6a03      	ldr	r3, [r0, #32]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <TIM_OC4_SetConfig+0x30>)
 80028de:	4013      	ands	r3, r2
 80028e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e6:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <TIM_OC4_SetConfig+0x34>)
 80028ea:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ec:	680a      	ldr	r2, [r1, #0]
 80028ee:	0212      	lsls	r2, r2, #8
 80028f0:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <TIM_OC4_SetConfig+0x38>)
 80028f4:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f6:	688b      	ldr	r3, [r1, #8]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028fe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002900:	684a      	ldr	r2, [r1, #4]
 8002902:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002904:	6203      	str	r3, [r0, #32]
}
 8002906:	bd30      	pop	{r4, r5, pc}
 8002908:	ffffefff 	.word	0xffffefff
 800290c:	ffff8cff 	.word	0xffff8cff
 8002910:	ffffdfff 	.word	0xffffdfff

08002914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002916:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002918:	6a04      	ldr	r4, [r0, #32]
 800291a:	2501      	movs	r5, #1
 800291c:	43ac      	bics	r4, r5
 800291e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002922:	35ef      	adds	r5, #239	; 0xef
 8002924:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292a:	240a      	movs	r4, #10
 800292c:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800292e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002930:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002932:	6203      	str	r3, [r0, #32]
}
 8002934:	bd30      	pop	{r4, r5, pc}
	...

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293a:	6a03      	ldr	r3, [r0, #32]
 800293c:	2410      	movs	r4, #16
 800293e:	43a3      	bics	r3, r4
 8002940:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002942:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002944:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002946:	4d05      	ldr	r5, [pc, #20]	; (800295c <TIM_TI2_ConfigInputStage+0x24>)
 8002948:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294a:	0312      	lsls	r2, r2, #12
 800294c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294e:	24a0      	movs	r4, #160	; 0xa0
 8002950:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002952:	0109      	lsls	r1, r1, #4
 8002954:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002956:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002958:	6201      	str	r1, [r0, #32]
}
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	ffff0fff 	.word	0xffff0fff

08002960 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002960:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002962:	2270      	movs	r2, #112	; 0x70
 8002964:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002966:	430b      	orrs	r3, r1
 8002968:	3a69      	subs	r2, #105	; 0x69
 800296a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296c:	6083      	str	r3, [r0, #8]
}
 800296e:	4770      	bx	lr

08002970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002970:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002972:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	4d03      	ldr	r5, [pc, #12]	; (8002984 <TIM_ETR_SetConfig+0x14>)
 8002976:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	4313      	orrs	r3, r2
 800297c:	430b      	orrs	r3, r1
 800297e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	6083      	str	r3, [r0, #8]
}
 8002982:	bd30      	pop	{r4, r5, pc}
 8002984:	ffff00ff 	.word	0xffff00ff

08002988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002988:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800298a:	231f      	movs	r3, #31
 800298c:	4019      	ands	r1, r3
 800298e:	2401      	movs	r4, #1
 8002990:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	6a03      	ldr	r3, [r0, #32]
 8002994:	43a3      	bics	r3, r4
 8002996:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002998:	6a03      	ldr	r3, [r0, #32]
 800299a:	408a      	lsls	r2, r1
 800299c:	4313      	orrs	r3, r2
 800299e:	6203      	str	r3, [r0, #32]
}
 80029a0:	bd10      	pop	{r4, pc}

080029a2 <HAL_TIM_Base_Init>:
{
 80029a2:	b570      	push	{r4, r5, r6, lr}
 80029a4:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80029a6:	d01e      	beq.n	80029e6 <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80029a8:	2339      	movs	r3, #57	; 0x39
 80029aa:	5cc3      	ldrb	r3, [r0, r3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d014      	beq.n	80029da <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	2539      	movs	r5, #57	; 0x39
 80029b2:	2302      	movs	r3, #2
 80029b4:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b6:	0021      	movs	r1, r4
 80029b8:	c901      	ldmia	r1!, {r0}
 80029ba:	f7ff ff19 	bl	80027f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029be:	2301      	movs	r3, #1
 80029c0:	223e      	movs	r2, #62	; 0x3e
 80029c2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	3a04      	subs	r2, #4
 80029c6:	54a3      	strb	r3, [r4, r2]
 80029c8:	3201      	adds	r2, #1
 80029ca:	54a3      	strb	r3, [r4, r2]
 80029cc:	3201      	adds	r2, #1
 80029ce:	54a3      	strb	r3, [r4, r2]
 80029d0:	3201      	adds	r2, #1
 80029d2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80029d6:	2000      	movs	r0, #0
}
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80029da:	3338      	adds	r3, #56	; 0x38
 80029dc:	2200      	movs	r2, #0
 80029de:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80029e0:	f7fe fe46 	bl	8001670 <HAL_TIM_Base_MspInit>
 80029e4:	e7e4      	b.n	80029b0 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
 80029e8:	e7f6      	b.n	80029d8 <HAL_TIM_Base_Init+0x36>
	...

080029ec <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80029ec:	2339      	movs	r3, #57	; 0x39
 80029ee:	5cc3      	ldrb	r3, [r0, r3]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_Base_Start+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	3338      	adds	r3, #56	; 0x38
 80029f6:	2202      	movs	r2, #2
 80029f8:	54c2      	strb	r2, [r0, r3]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	05d2      	lsls	r2, r2, #23
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d008      	beq.n	8002a16 <HAL_TIM_Base_Start+0x2a>
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_TIM_Base_Start+0x48>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d005      	beq.n	8002a16 <HAL_TIM_Base_Start+0x2a>
    __HAL_TIM_ENABLE(htim);
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_Base_Start+0x42>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	2a06      	cmp	r2, #6
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_Base_Start+0x44>
      __HAL_TIM_ENABLE(htim);
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_TIM_Base_Start+0x42>
    return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
}
 8002a2e:	4770      	bx	lr
  return HAL_OK;
 8002a30:	2000      	movs	r0, #0
 8002a32:	e7fc      	b.n	8002a2e <HAL_TIM_Base_Start+0x42>
 8002a34:	40010800 	.word	0x40010800

08002a38 <HAL_TIM_OC_MspInit>:
}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_OC_Init>:
{
 8002a3a:	b570      	push	{r4, r5, r6, lr}
 8002a3c:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002a3e:	d01e      	beq.n	8002a7e <HAL_TIM_OC_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a40:	2339      	movs	r3, #57	; 0x39
 8002a42:	5cc3      	ldrb	r3, [r0, r3]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d014      	beq.n	8002a72 <HAL_TIM_OC_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	2539      	movs	r5, #57	; 0x39
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a4e:	0021      	movs	r1, r4
 8002a50:	c901      	ldmia	r1!, {r0}
 8002a52:	f7ff fecd 	bl	80027f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	2301      	movs	r3, #1
 8002a58:	223e      	movs	r2, #62	; 0x3e
 8002a5a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	3a04      	subs	r2, #4
 8002a5e:	54a3      	strb	r3, [r4, r2]
 8002a60:	3201      	adds	r2, #1
 8002a62:	54a3      	strb	r3, [r4, r2]
 8002a64:	3201      	adds	r2, #1
 8002a66:	54a3      	strb	r3, [r4, r2]
 8002a68:	3201      	adds	r2, #1
 8002a6a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	2200      	movs	r2, #0
 8002a76:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_TIM_OC_MspInit>
 8002a7c:	e7e4      	b.n	8002a48 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	e7f6      	b.n	8002a70 <HAL_TIM_OC_Init+0x36>
	...

08002a84 <HAL_TIM_OC_Start_IT>:
{
 8002a84:	b510      	push	{r4, lr}
 8002a86:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d119      	bne.n	8002ac0 <HAL_TIM_OC_Start_IT+0x3c>
 8002a8c:	233a      	movs	r3, #58	; 0x3a
 8002a8e:	5cc3      	ldrb	r3, [r0, r3]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	1e5a      	subs	r2, r3, #1
 8002a94:	4193      	sbcs	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d16e      	bne.n	8002b7a <HAL_TIM_OC_Start_IT+0xf6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9c:	2900      	cmp	r1, #0
 8002a9e:	d128      	bne.n	8002af2 <HAL_TIM_OC_Start_IT+0x6e>
 8002aa0:	333a      	adds	r3, #58	; 0x3a
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	54e2      	strb	r2, [r4, r3]
  switch (Channel)
 8002aa6:	2908      	cmp	r1, #8
 8002aa8:	d056      	beq.n	8002b58 <HAL_TIM_OC_Start_IT+0xd4>
 8002aaa:	d834      	bhi.n	8002b16 <HAL_TIM_OC_Start_IT+0x92>
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d03c      	beq.n	8002b2a <HAL_TIM_OC_Start_IT+0xa6>
 8002ab0:	2904      	cmp	r1, #4
 8002ab2:	d12e      	bne.n	8002b12 <HAL_TIM_OC_Start_IT+0x8e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	68d3      	ldr	r3, [r2, #12]
 8002ab8:	2004      	movs	r0, #4
 8002aba:	4303      	orrs	r3, r0
 8002abc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8002abe:	e039      	b.n	8002b34 <HAL_TIM_OC_Start_IT+0xb0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ac0:	2904      	cmp	r1, #4
 8002ac2:	d008      	beq.n	8002ad6 <HAL_TIM_OC_Start_IT+0x52>
 8002ac4:	2908      	cmp	r1, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_TIM_OC_Start_IT+0x60>
 8002ac8:	233d      	movs	r3, #61	; 0x3d
 8002aca:	5cc3      	ldrb	r3, [r0, r3]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	1e5a      	subs	r2, r3, #1
 8002ad0:	4193      	sbcs	r3, r2
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e7e0      	b.n	8002a98 <HAL_TIM_OC_Start_IT+0x14>
 8002ad6:	233b      	movs	r3, #59	; 0x3b
 8002ad8:	5cc3      	ldrb	r3, [r0, r3]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	4193      	sbcs	r3, r2
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e7d9      	b.n	8002a98 <HAL_TIM_OC_Start_IT+0x14>
 8002ae4:	233c      	movs	r3, #60	; 0x3c
 8002ae6:	5cc3      	ldrb	r3, [r0, r3]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	4193      	sbcs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e7d2      	b.n	8002a98 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af2:	2904      	cmp	r1, #4
 8002af4:	d005      	beq.n	8002b02 <HAL_TIM_OC_Start_IT+0x7e>
 8002af6:	2908      	cmp	r1, #8
 8002af8:	d007      	beq.n	8002b0a <HAL_TIM_OC_Start_IT+0x86>
 8002afa:	233d      	movs	r3, #61	; 0x3d
 8002afc:	2202      	movs	r2, #2
 8002afe:	54e2      	strb	r2, [r4, r3]
 8002b00:	e7d1      	b.n	8002aa6 <HAL_TIM_OC_Start_IT+0x22>
 8002b02:	233b      	movs	r3, #59	; 0x3b
 8002b04:	2202      	movs	r2, #2
 8002b06:	54e2      	strb	r2, [r4, r3]
 8002b08:	e7cd      	b.n	8002aa6 <HAL_TIM_OC_Start_IT+0x22>
 8002b0a:	233c      	movs	r3, #60	; 0x3c
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	54e2      	strb	r2, [r4, r3]
 8002b10:	e7c9      	b.n	8002aa6 <HAL_TIM_OC_Start_IT+0x22>
  switch (Channel)
 8002b12:	2001      	movs	r0, #1
 8002b14:	e032      	b.n	8002b7c <HAL_TIM_OC_Start_IT+0xf8>
 8002b16:	290c      	cmp	r1, #12
 8002b18:	d105      	bne.n	8002b26 <HAL_TIM_OC_Start_IT+0xa2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	68d3      	ldr	r3, [r2, #12]
 8002b1e:	2010      	movs	r0, #16
 8002b20:	4303      	orrs	r3, r0
 8002b22:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8002b24:	e006      	b.n	8002b34 <HAL_TIM_OC_Start_IT+0xb0>
  switch (Channel)
 8002b26:	2001      	movs	r0, #1
 8002b28:	e028      	b.n	8002b7c <HAL_TIM_OC_Start_IT+0xf8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	68d3      	ldr	r3, [r2, #12]
 8002b2e:	2002      	movs	r0, #2
 8002b30:	4303      	orrs	r3, r0
 8002b32:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f7ff ff26 	bl	8002988 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	05d2      	lsls	r2, r2, #23
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00e      	beq.n	8002b64 <HAL_TIM_OC_Start_IT+0xe0>
 8002b46:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_TIM_OC_Start_IT+0x100>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <HAL_TIM_OC_Start_IT+0xe0>
      __HAL_TIM_ENABLE(htim);
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e011      	b.n	8002b7c <HAL_TIM_OC_Start_IT+0xf8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	68d3      	ldr	r3, [r2, #12]
 8002b5c:	2008      	movs	r0, #8
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8002b62:	e7e7      	b.n	8002b34 <HAL_TIM_OC_Start_IT+0xb0>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	2207      	movs	r2, #7
 8002b68:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	2a06      	cmp	r2, #6
 8002b6c:	d007      	beq.n	8002b7e <HAL_TIM_OC_Start_IT+0xfa>
        __HAL_TIM_ENABLE(htim);
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	2000      	movs	r0, #0
 8002b78:	e000      	b.n	8002b7c <HAL_TIM_OC_Start_IT+0xf8>
    return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
}
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	2000      	movs	r0, #0
 8002b80:	e7fc      	b.n	8002b7c <HAL_TIM_OC_Start_IT+0xf8>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	40010800 	.word	0x40010800

08002b88 <HAL_TIM_PWM_MspInit>:
}
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_PWM_Init>:
{
 8002b8a:	b570      	push	{r4, r5, r6, lr}
 8002b8c:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002b8e:	d01e      	beq.n	8002bce <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b90:	2339      	movs	r3, #57	; 0x39
 8002b92:	5cc3      	ldrb	r3, [r0, r3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	2539      	movs	r5, #57	; 0x39
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	0021      	movs	r1, r4
 8002ba0:	c901      	ldmia	r1!, {r0}
 8002ba2:	f7ff fe25 	bl	80027f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	223e      	movs	r2, #62	; 0x3e
 8002baa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	3a04      	subs	r2, #4
 8002bae:	54a3      	strb	r3, [r4, r2]
 8002bb0:	3201      	adds	r2, #1
 8002bb2:	54a3      	strb	r3, [r4, r2]
 8002bb4:	3201      	adds	r2, #1
 8002bb6:	54a3      	strb	r3, [r4, r2]
 8002bb8:	3201      	adds	r2, #1
 8002bba:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002bbe:	2000      	movs	r0, #0
}
 8002bc0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_TIM_PWM_MspInit>
 8002bcc:	e7e4      	b.n	8002b98 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e7f6      	b.n	8002bc0 <HAL_TIM_PWM_Init+0x36>
	...

08002bd4 <HAL_TIM_PWM_Start>:
{
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d11e      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x46>
 8002bdc:	233a      	movs	r3, #58	; 0x3a
 8002bde:	5cc3      	ldrb	r3, [r0, r3]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	4193      	sbcs	r3, r2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d14a      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d12d      	bne.n	8002c4c <HAL_TIM_PWM_Start+0x78>
 8002bf0:	333a      	adds	r3, #58	; 0x3a
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f7ff fec5 	bl	8002988 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	05d2      	lsls	r2, r2, #23
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d031      	beq.n	8002c6c <HAL_TIM_PWM_Start+0x98>
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_TIM_PWM_Start+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d02e      	beq.n	8002c6c <HAL_TIM_PWM_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c16:	2000      	movs	r0, #0
 8002c18:	e034      	b.n	8002c84 <HAL_TIM_PWM_Start+0xb0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1a:	2904      	cmp	r1, #4
 8002c1c:	d008      	beq.n	8002c30 <HAL_TIM_PWM_Start+0x5c>
 8002c1e:	2908      	cmp	r1, #8
 8002c20:	d00d      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x6a>
 8002c22:	233d      	movs	r3, #61	; 0x3d
 8002c24:	5cc3      	ldrb	r3, [r0, r3]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	4193      	sbcs	r3, r2
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e7db      	b.n	8002be8 <HAL_TIM_PWM_Start+0x14>
 8002c30:	233b      	movs	r3, #59	; 0x3b
 8002c32:	5cc3      	ldrb	r3, [r0, r3]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	1e5a      	subs	r2, r3, #1
 8002c38:	4193      	sbcs	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e7d4      	b.n	8002be8 <HAL_TIM_PWM_Start+0x14>
 8002c3e:	233c      	movs	r3, #60	; 0x3c
 8002c40:	5cc3      	ldrb	r3, [r0, r3]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	4193      	sbcs	r3, r2
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e7cd      	b.n	8002be8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	d005      	beq.n	8002c5c <HAL_TIM_PWM_Start+0x88>
 8002c50:	2908      	cmp	r1, #8
 8002c52:	d007      	beq.n	8002c64 <HAL_TIM_PWM_Start+0x90>
 8002c54:	233d      	movs	r3, #61	; 0x3d
 8002c56:	2202      	movs	r2, #2
 8002c58:	54e2      	strb	r2, [r4, r3]
 8002c5a:	e7cc      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x22>
 8002c5c:	233b      	movs	r3, #59	; 0x3b
 8002c5e:	2202      	movs	r2, #2
 8002c60:	54e2      	strb	r2, [r4, r3]
 8002c62:	e7c8      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x22>
 8002c64:	233c      	movs	r3, #60	; 0x3c
 8002c66:	2202      	movs	r2, #2
 8002c68:	54e2      	strb	r2, [r4, r3]
 8002c6a:	e7c4      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	2207      	movs	r2, #7
 8002c70:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	2a06      	cmp	r2, #6
 8002c74:	d007      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e000      	b.n	8002c84 <HAL_TIM_PWM_Start+0xb0>
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e7fc      	b.n	8002c84 <HAL_TIM_PWM_Start+0xb0>
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40010800 	.word	0x40010800

08002c90 <HAL_TIM_OC_ConfigChannel>:
{
 8002c90:	b510      	push	{r4, lr}
 8002c92:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002c94:	2338      	movs	r3, #56	; 0x38
 8002c96:	5cc3      	ldrb	r3, [r0, r3]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d024      	beq.n	8002ce6 <HAL_TIM_OC_ConfigChannel+0x56>
 8002c9c:	2338      	movs	r3, #56	; 0x38
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 8002ca2:	2a08      	cmp	r2, #8
 8002ca4:	d01a      	beq.n	8002cdc <HAL_TIM_OC_ConfigChannel+0x4c>
 8002ca6:	d808      	bhi.n	8002cba <HAL_TIM_OC_ConfigChannel+0x2a>
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_TIM_OC_ConfigChannel+0x42>
 8002cac:	2a04      	cmp	r2, #4
 8002cae:	d10c      	bne.n	8002cca <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	f7ff fddb 	bl	800286c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2000      	movs	r0, #0
      break;
 8002cb8:	e007      	b.n	8002cca <HAL_TIM_OC_ConfigChannel+0x3a>
  switch (Channel)
 8002cba:	2a0c      	cmp	r2, #12
 8002cbc:	d104      	bne.n	8002cc8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cbe:	6820      	ldr	r0, [r4, #0]
 8002cc0:	f7ff fe0a 	bl	80028d8 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2000      	movs	r0, #0
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_TIM_OC_ConfigChannel+0x3a>
  switch (Channel)
 8002cc8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002cca:	2338      	movs	r3, #56	; 0x38
 8002ccc:	2200      	movs	r2, #0
 8002cce:	54e2      	strb	r2, [r4, r3]
}
 8002cd0:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	f7ff fdb4 	bl	8002840 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2000      	movs	r0, #0
      break;
 8002cda:	e7f6      	b.n	8002cca <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	f7ff fddf 	bl	80028a0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2000      	movs	r0, #0
      break;
 8002ce4:	e7f1      	b.n	8002cca <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_LOCK(htim);
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	e7f2      	b.n	8002cd0 <HAL_TIM_OC_ConfigChannel+0x40>
	...

08002cec <HAL_TIM_PWM_ConfigChannel>:
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0004      	movs	r4, r0
 8002cf0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002cf2:	2338      	movs	r3, #56	; 0x38
 8002cf4:	5cc3      	ldrb	r3, [r0, r3]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d100      	bne.n	8002cfc <HAL_TIM_PWM_ConfigChannel+0x10>
 8002cfa:	e06a      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0xe6>
 8002cfc:	2338      	movs	r3, #56	; 0x38
 8002cfe:	2101      	movs	r1, #1
 8002d00:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002d02:	2a08      	cmp	r2, #8
 8002d04:	d050      	beq.n	8002da8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8002d06:	d81c      	bhi.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d038      	beq.n	8002d7e <HAL_TIM_PWM_ConfigChannel+0x92>
 8002d0c:	2a04      	cmp	r2, #4
 8002d0e:	d116      	bne.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d10:	6800      	ldr	r0, [r0, #0]
 8002d12:	0029      	movs	r1, r5
 8002d14:	f7ff fdaa 	bl	800286c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	6991      	ldr	r1, [r2, #24]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	6993      	ldr	r3, [r2, #24]
 8002d28:	492b      	ldr	r1, [pc, #172]	; (8002dd8 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d2e:	6821      	ldr	r1, [r4, #0]
 8002d30:	698b      	ldr	r3, [r1, #24]
 8002d32:	68ea      	ldr	r2, [r5, #12]
 8002d34:	0212      	lsls	r2, r2, #8
 8002d36:	4313      	orrs	r3, r2
 8002d38:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2000      	movs	r0, #0
      break;
 8002d3c:	e01b      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8002d3e:	0008      	movs	r0, r1
 8002d40:	e019      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8002d42:	2a0c      	cmp	r2, #12
 8002d44:	d116      	bne.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d46:	6800      	ldr	r0, [r0, #0]
 8002d48:	0029      	movs	r1, r5
 8002d4a:	f7ff fdc5 	bl	80028d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	69d1      	ldr	r1, [r2, #28]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5a:	6822      	ldr	r2, [r4, #0]
 8002d5c:	69d3      	ldr	r3, [r2, #28]
 8002d5e:	491e      	ldr	r1, [pc, #120]	; (8002dd8 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8002d60:	400b      	ands	r3, r1
 8002d62:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d64:	6821      	ldr	r1, [r4, #0]
 8002d66:	69cb      	ldr	r3, [r1, #28]
 8002d68:	68ea      	ldr	r2, [r5, #12]
 8002d6a:	0212      	lsls	r2, r2, #8
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2000      	movs	r0, #0
      break;
 8002d72:	e000      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8002d74:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002d76:	2338      	movs	r3, #56	; 0x38
 8002d78:	2200      	movs	r2, #0
 8002d7a:	54e2      	strb	r2, [r4, r3]
}
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d7e:	6800      	ldr	r0, [r0, #0]
 8002d80:	0029      	movs	r1, r5
 8002d82:	f7ff fd5d 	bl	8002840 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	6993      	ldr	r3, [r2, #24]
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	6993      	ldr	r3, [r2, #24]
 8002d94:	3904      	subs	r1, #4
 8002d96:	438b      	bics	r3, r1
 8002d98:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6993      	ldr	r3, [r2, #24]
 8002d9e:	68e9      	ldr	r1, [r5, #12]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2000      	movs	r0, #0
      break;
 8002da6:	e7e6      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da8:	6800      	ldr	r0, [r0, #0]
 8002daa:	0029      	movs	r1, r5
 8002dac:	f7ff fd78 	bl	80028a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	69d3      	ldr	r3, [r2, #28]
 8002db4:	2108      	movs	r1, #8
 8002db6:	430b      	orrs	r3, r1
 8002db8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	69d3      	ldr	r3, [r2, #28]
 8002dbe:	3904      	subs	r1, #4
 8002dc0:	438b      	bics	r3, r1
 8002dc2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	69d3      	ldr	r3, [r2, #28]
 8002dc8:	68e9      	ldr	r1, [r5, #12]
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2000      	movs	r0, #0
      break;
 8002dd0:	e7d1      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x8a>
  __HAL_LOCK(htim);
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	e7d2      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x90>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	fffffbff 	.word	0xfffffbff

08002ddc <HAL_TIM_ConfigClockSource>:
{
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	0004      	movs	r4, r0
 8002de0:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8002de2:	2338      	movs	r3, #56	; 0x38
 8002de4:	5ce3      	ldrb	r3, [r4, r3]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d100      	bne.n	8002dec <HAL_TIM_ConfigClockSource+0x10>
 8002dea:	e077      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x100>
 8002dec:	2338      	movs	r3, #56	; 0x38
 8002dee:	2201      	movs	r2, #1
 8002df0:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002df2:	3301      	adds	r3, #1
 8002df4:	3201      	adds	r2, #1
 8002df6:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfc:	4938      	ldr	r1, [pc, #224]	; (8002ee0 <HAL_TIM_ConfigClockSource+0x104>)
 8002dfe:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002e00:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e02:	6801      	ldr	r1, [r0, #0]
 8002e04:	2960      	cmp	r1, #96	; 0x60
 8002e06:	d04f      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0xcc>
 8002e08:	d829      	bhi.n	8002e5e <HAL_TIM_ConfigClockSource+0x82>
 8002e0a:	2940      	cmp	r1, #64	; 0x40
 8002e0c:	d057      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xe2>
 8002e0e:	d90c      	bls.n	8002e2a <HAL_TIM_ConfigClockSource+0x4e>
 8002e10:	2950      	cmp	r1, #80	; 0x50
 8002e12:	d122      	bne.n	8002e5a <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8002e14:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002e16:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	f7ff fd7b 	bl	8002914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	f7ff fd9d 	bl	8002960 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2000      	movs	r0, #0
      break;
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002e2a:	2920      	cmp	r1, #32
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0x70>
 8002e2e:	d909      	bls.n	8002e44 <HAL_TIM_ConfigClockSource+0x68>
 8002e30:	2930      	cmp	r1, #48	; 0x30
 8002e32:	d00b      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8002e34:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002e36:	2339      	movs	r3, #57	; 0x39
 8002e38:	2201      	movs	r2, #1
 8002e3a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	54e2      	strb	r2, [r4, r3]
}
 8002e42:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e44:	2900      	cmp	r1, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0x70>
 8002e48:	2910      	cmp	r1, #16
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	f7ff fd87 	bl	8002960 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2000      	movs	r0, #0
      break;
 8002e54:	e7ef      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
 8002e58:	e7ed      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e7eb      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	0152      	lsls	r2, r2, #5
 8002e62:	4291      	cmp	r1, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_TIM_ConfigClockSource+0xf8>
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0192      	lsls	r2, r2, #6
 8002e6a:	4291      	cmp	r1, r2
 8002e6c:	d10d      	bne.n	8002e8a <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 8002e6e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e70:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8002e72:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f7ff fd7b 	bl	8002970 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	6891      	ldr	r1, [r2, #8]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	01db      	lsls	r3, r3, #7
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2000      	movs	r0, #0
      break;
 8002e88:	e7d5      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002e8a:	2970      	cmp	r1, #112	; 0x70
 8002e8c:	d124      	bne.n	8002ed8 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 8002e8e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e90:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8002e92:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f7ff fd6b 	bl	8002970 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9e:	2177      	movs	r1, #119	; 0x77
 8002ea0:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002ea2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2000      	movs	r0, #0
      break;
 8002ea6:	e7c6      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8002ea8:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002eaa:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	f7ff fd43 	bl	8002938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	2160      	movs	r1, #96	; 0x60
 8002eb6:	f7ff fd53 	bl	8002960 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2000      	movs	r0, #0
      break;
 8002ebc:	e7bb      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8002ebe:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec0:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	6820      	ldr	r0, [r4, #0]
 8002ec4:	f7ff fd26 	bl	8002914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	f7ff fd48 	bl	8002960 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2000      	movs	r0, #0
      break;
 8002ed2:	e7b0      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e7ae      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
 8002eda:	e7ac      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002edc:	2002      	movs	r0, #2
 8002ede:	e7b0      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x66>
 8002ee0:	ffff0088 	.word	0xffff0088

08002ee4 <HAL_TIM_PeriodElapsedCallback>:
}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_TIM_IC_CaptureCallback>:
}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_TriggerCallback>:
}
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_IRQHandler>:
{
 8002eec:	b510      	push	{r4, lr}
 8002eee:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef0:	6802      	ldr	r2, [r0, #0]
 8002ef2:	6913      	ldr	r3, [r2, #16]
 8002ef4:	079b      	lsls	r3, r3, #30
 8002ef6:	d50f      	bpl.n	8002f18 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef8:	68d3      	ldr	r3, [r2, #12]
 8002efa:	079b      	lsls	r3, r3, #30
 8002efc:	d50c      	bpl.n	8002f18 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002efe:	2303      	movs	r3, #3
 8002f00:	425b      	negs	r3, r3
 8002f02:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f04:	3304      	adds	r3, #4
 8002f06:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	079b      	lsls	r3, r3, #30
 8002f0e:	d055      	beq.n	8002fbc <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f10:	f7ff ffe9 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f14:	2300      	movs	r3, #0
 8002f16:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	6913      	ldr	r3, [r2, #16]
 8002f1c:	075b      	lsls	r3, r3, #29
 8002f1e:	d512      	bpl.n	8002f46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f20:	68d3      	ldr	r3, [r2, #12]
 8002f22:	075b      	lsls	r3, r3, #29
 8002f24:	d50f      	bpl.n	8002f46 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f26:	2305      	movs	r3, #5
 8002f28:	425b      	negs	r3, r3
 8002f2a:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2c:	3307      	adds	r3, #7
 8002f2e:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	23c0      	movs	r3, #192	; 0xc0
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	421a      	tst	r2, r3
 8002f3a:	d045      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3c:	0020      	movs	r0, r4
 8002f3e:	f7ff ffd2 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	2300      	movs	r3, #0
 8002f44:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	6913      	ldr	r3, [r2, #16]
 8002f4a:	071b      	lsls	r3, r3, #28
 8002f4c:	d510      	bpl.n	8002f70 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f4e:	68d3      	ldr	r3, [r2, #12]
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	d50d      	bpl.n	8002f70 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f54:	2309      	movs	r3, #9
 8002f56:	425b      	negs	r3, r3
 8002f58:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	330d      	adds	r3, #13
 8002f5c:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	079b      	lsls	r3, r3, #30
 8002f64:	d037      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	0020      	movs	r0, r4
 8002f68:	f7ff ffbd 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6913      	ldr	r3, [r2, #16]
 8002f74:	06db      	lsls	r3, r3, #27
 8002f76:	d512      	bpl.n	8002f9e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f78:	68d3      	ldr	r3, [r2, #12]
 8002f7a:	06db      	lsls	r3, r3, #27
 8002f7c:	d50f      	bpl.n	8002f9e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f7e:	2311      	movs	r3, #17
 8002f80:	425b      	negs	r3, r3
 8002f82:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f84:	3319      	adds	r3, #25
 8002f86:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	421a      	tst	r2, r3
 8002f92:	d027      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f94:	0020      	movs	r0, r4
 8002f96:	f7ff ffa6 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	6913      	ldr	r3, [r2, #16]
 8002fa2:	07db      	lsls	r3, r3, #31
 8002fa4:	d502      	bpl.n	8002fac <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fa6:	68d3      	ldr	r3, [r2, #12]
 8002fa8:	07db      	lsls	r3, r3, #31
 8002faa:	d422      	bmi.n	8002ff2 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	6913      	ldr	r3, [r2, #16]
 8002fb0:	065b      	lsls	r3, r3, #25
 8002fb2:	d502      	bpl.n	8002fba <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb4:	68d3      	ldr	r3, [r2, #12]
 8002fb6:	065b      	lsls	r3, r3, #25
 8002fb8:	d422      	bmi.n	8003000 <HAL_TIM_IRQHandler+0x114>
}
 8002fba:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbc:	f000 fcf4 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	0020      	movs	r0, r4
 8002fc2:	f7ff ff91 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fc6:	e7a5      	b.n	8002f14 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc8:	0020      	movs	r0, r4
 8002fca:	f000 fced 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fce:	0020      	movs	r0, r4
 8002fd0:	f7ff ff8a 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fd4:	e7b5      	b.n	8002f42 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f000 fce6 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	0020      	movs	r0, r4
 8002fde:	f7ff ff83 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fe2:	e7c3      	b.n	8002f6c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	f000 fcdf 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fea:	0020      	movs	r0, r4
 8002fec:	f7ff ff7c 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ff0:	e7d3      	b.n	8002f9a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	425b      	negs	r3, r3
 8002ff6:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f7ff ff73 	bl	8002ee4 <HAL_TIM_PeriodElapsedCallback>
 8002ffe:	e7d5      	b.n	8002fac <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003000:	2341      	movs	r3, #65	; 0x41
 8003002:	425b      	negs	r3, r3
 8003004:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 8003006:	0020      	movs	r0, r4
 8003008:	f7ff ff6f 	bl	8002eea <HAL_TIM_TriggerCallback>
}
 800300c:	e7d5      	b.n	8002fba <HAL_TIM_IRQHandler+0xce>
	...

08003010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003010:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003012:	2338      	movs	r3, #56	; 0x38
 8003014:	5cc3      	ldrb	r3, [r0, r3]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d022      	beq.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800301a:	2338      	movs	r3, #56	; 0x38
 800301c:	2201      	movs	r2, #1
 800301e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	3301      	adds	r3, #1
 8003022:	3201      	adds	r2, #1
 8003024:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003026:	6803      	ldr	r3, [r0, #0]
 8003028:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302a:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	326e      	adds	r2, #110	; 0x6e
 800302e:	4394      	bics	r4, r2
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003030:	680a      	ldr	r2, [r1, #0]
 8003032:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	05d2      	lsls	r2, r2, #23
 800303c:	4293      	cmp	r3, r2
 800303e:	d002      	beq.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8003040:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d104      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304a:	684a      	ldr	r2, [r1, #4]
 800304c:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	2339      	movs	r3, #57	; 0x39
 8003052:	2201      	movs	r2, #1
 8003054:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003056:	3b01      	subs	r3, #1
 8003058:	2200      	movs	r2, #0
 800305a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800305c:	2000      	movs	r0, #0
}
 800305e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003060:	2002      	movs	r0, #2
 8003062:	e7fc      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003064:	40010800 	.word	0x40010800

08003068 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003068:	b510      	push	{r4, lr}
 800306a:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800306c:	7900      	ldrb	r0, [r0, #4]
 800306e:	2800      	cmp	r0, #0
 8003070:	d050      	beq.n	8003114 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2a00      	cmp	r2, #0
 8003076:	d057      	beq.n	8003128 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8003078:	7958      	ldrb	r0, [r3, #5]
 800307a:	2801      	cmp	r0, #1
 800307c:	d018      	beq.n	80030b0 <LL_EXTI_Init+0x48>
 800307e:	2802      	cmp	r0, #2
 8003080:	d020      	beq.n	80030c4 <LL_EXTI_Init+0x5c>
 8003082:	2800      	cmp	r0, #0
 8003084:	d00b      	beq.n	800309e <LL_EXTI_Init+0x36>
 8003086:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003088:	799a      	ldrb	r2, [r3, #6]
 800308a:	2a00      	cmp	r2, #0
 800308c:	d04b      	beq.n	8003126 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 800308e:	2a02      	cmp	r2, #2
 8003090:	d02c      	beq.n	80030ec <LL_EXTI_Init+0x84>
 8003092:	2a03      	cmp	r2, #3
 8003094:	d034      	beq.n	8003100 <LL_EXTI_Init+0x98>
 8003096:	2a01      	cmp	r2, #1
 8003098:	d01e      	beq.n	80030d8 <LL_EXTI_Init+0x70>
 800309a:	2001      	movs	r0, #1
 800309c:	e043      	b.n	8003126 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800309e:	4923      	ldr	r1, [pc, #140]	; (800312c <LL_EXTI_Init+0xc4>)
 80030a0:	684c      	ldr	r4, [r1, #4]
 80030a2:	4394      	bics	r4, r2
 80030a4:	604c      	str	r4, [r1, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030a6:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 80030a8:	680c      	ldr	r4, [r1, #0]
 80030aa:	4322      	orrs	r2, r4
 80030ac:	600a      	str	r2, [r1, #0]
}
 80030ae:	e7eb      	b.n	8003088 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80030b0:	491e      	ldr	r1, [pc, #120]	; (800312c <LL_EXTI_Init+0xc4>)
 80030b2:	6808      	ldr	r0, [r1, #0]
 80030b4:	4390      	bics	r0, r2
 80030b6:	6008      	str	r0, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030b8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80030ba:	6848      	ldr	r0, [r1, #4]
 80030bc:	4302      	orrs	r2, r0
 80030be:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 80030c0:	2000      	movs	r0, #0
}
 80030c2:	e7e1      	b.n	8003088 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 80030c4:	4919      	ldr	r1, [pc, #100]	; (800312c <LL_EXTI_Init+0xc4>)
 80030c6:	6808      	ldr	r0, [r1, #0]
 80030c8:	4302      	orrs	r2, r0
 80030ca:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030cc:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80030ce:	6848      	ldr	r0, [r1, #4]
 80030d0:	4302      	orrs	r2, r0
 80030d2:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 80030d4:	2000      	movs	r0, #0
}
 80030d6:	e7d7      	b.n	8003088 <LL_EXTI_Init+0x20>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030d8:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <LL_EXTI_Init+0xc4>)
 80030dc:	68d1      	ldr	r1, [r2, #12]
 80030de:	43a1      	bics	r1, r4
 80030e0:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030e2:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80030e4:	6891      	ldr	r1, [r2, #8]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6093      	str	r3, [r2, #8]
}
 80030ea:	e01c      	b.n	8003126 <LL_EXTI_Init+0xbe>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030ec:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <LL_EXTI_Init+0xc4>)
 80030f0:	6891      	ldr	r1, [r2, #8]
 80030f2:	43a1      	bics	r1, r4
 80030f4:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030f6:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80030f8:	68d1      	ldr	r1, [r2, #12]
 80030fa:	430b      	orrs	r3, r1
 80030fc:	60d3      	str	r3, [r2, #12]
}
 80030fe:	e012      	b.n	8003126 <LL_EXTI_Init+0xbe>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003100:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <LL_EXTI_Init+0xc4>)
 8003104:	6894      	ldr	r4, [r2, #8]
 8003106:	4321      	orrs	r1, r4
 8003108:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800310a:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800310c:	68d1      	ldr	r1, [r2, #12]
 800310e:	430b      	orrs	r3, r1
 8003110:	60d3      	str	r3, [r2, #12]
}
 8003112:	e008      	b.n	8003126 <LL_EXTI_Init+0xbe>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003114:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <LL_EXTI_Init+0xc4>)
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	43a1      	bics	r1, r4
 800311c:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800311e:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003120:	6853      	ldr	r3, [r2, #4]
 8003122:	438b      	bics	r3, r1
 8003124:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8003126:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8003128:	2000      	movs	r0, #0
 800312a:	e7fc      	b.n	8003126 <LL_EXTI_Init+0xbe>
 800312c:	40010400 	.word	0x40010400

08003130 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8003132:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003134:	e016      	b.n	8003164 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800313a:	68c4      	ldr	r4, [r0, #12]
 800313c:	002b      	movs	r3, r5
 800313e:	436b      	muls	r3, r5
 8003140:	005e      	lsls	r6, r3, #1
 8003142:	18f6      	adds	r6, r6, r3
 8003144:	43f7      	mvns	r7, r6
 8003146:	43b4      	bics	r4, r6
 8003148:	4666      	mov	r6, ip
 800314a:	435e      	muls	r6, r3
 800314c:	4334      	orrs	r4, r6
 800314e:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003150:	684c      	ldr	r4, [r1, #4]
 8003152:	2c02      	cmp	r4, #2
 8003154:	d026      	beq.n	80031a4 <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003156:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003158:	6804      	ldr	r4, [r0, #0]
 800315a:	403c      	ands	r4, r7
 800315c:	436b      	muls	r3, r5
 800315e:	4323      	orrs	r3, r4
 8003160:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8003162:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003164:	680c      	ldr	r4, [r1, #0]
 8003166:	0023      	movs	r3, r4
 8003168:	40d3      	lsrs	r3, r2
 800316a:	d03b      	beq.n	80031e4 <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800316c:	2301      	movs	r3, #1
 800316e:	4093      	lsls	r3, r2
 8003170:	0025      	movs	r5, r4
 8003172:	401d      	ands	r5, r3
    if (currentpin)
 8003174:	421c      	tst	r4, r3
 8003176:	d0f4      	beq.n	8003162 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003178:	684b      	ldr	r3, [r1, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d8da      	bhi.n	8003136 <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003180:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8003182:	6883      	ldr	r3, [r0, #8]
 8003184:	002c      	movs	r4, r5
 8003186:	436c      	muls	r4, r5
 8003188:	0066      	lsls	r6, r4, #1
 800318a:	1936      	adds	r6, r6, r4
 800318c:	43b3      	bics	r3, r6
 800318e:	437c      	muls	r4, r7
 8003190:	4323      	orrs	r3, r4
 8003192:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003194:	680e      	ldr	r6, [r1, #0]
 8003196:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003198:	6843      	ldr	r3, [r0, #4]
 800319a:	43b3      	bics	r3, r6
 800319c:	4374      	muls	r4, r6
 800319e:	4323      	orrs	r3, r4
 80031a0:	6043      	str	r3, [r0, #4]
}
 80031a2:	e7c8      	b.n	8003136 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 80031a4:	2dff      	cmp	r5, #255	; 0xff
 80031a6:	d80d      	bhi.n	80031c4 <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031a8:	694c      	ldr	r4, [r1, #20]
 80031aa:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80031ac:	6a06      	ldr	r6, [r0, #32]
 80031ae:	001c      	movs	r4, r3
 80031b0:	436c      	muls	r4, r5
 80031b2:	436c      	muls	r4, r5
 80031b4:	0125      	lsls	r5, r4, #4
 80031b6:	1b2d      	subs	r5, r5, r4
 80031b8:	43ae      	bics	r6, r5
 80031ba:	4665      	mov	r5, ip
 80031bc:	436c      	muls	r4, r5
 80031be:	4334      	orrs	r4, r6
 80031c0:	6204      	str	r4, [r0, #32]
}
 80031c2:	e7c8      	b.n	8003156 <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031c4:	694c      	ldr	r4, [r1, #20]
 80031c6:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80031c8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80031ca:	0a2d      	lsrs	r5, r5, #8
 80031cc:	002c      	movs	r4, r5
 80031ce:	436c      	muls	r4, r5
 80031d0:	436c      	muls	r4, r5
 80031d2:	436c      	muls	r4, r5
 80031d4:	0125      	lsls	r5, r4, #4
 80031d6:	1b2d      	subs	r5, r5, r4
 80031d8:	43ae      	bics	r6, r5
 80031da:	4665      	mov	r5, ip
 80031dc:	436c      	muls	r4, r5
 80031de:	4334      	orrs	r4, r6
 80031e0:	6244      	str	r4, [r0, #36]	; 0x24
}
 80031e2:	e7b8      	b.n	8003156 <LL_GPIO_Init+0x26>
  }


  return (SUCCESS);
}
 80031e4:	2000      	movs	r0, #0
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <LL_SetSystemCoreClock+0x8>)
 80031ea:	6018      	str	r0, [r3, #0]
}
 80031ec:	4770      	bx	lr
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000000 	.word	0x20000000

080031f4 <control_loop_init>:
	.last_deltaT_degC = 0.0F
};



void control_loop_init(void) {
 80031f4:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_dma_buf, 1);
 80031f6:	4903      	ldr	r1, [pc, #12]	; (8003204 <control_loop_init+0x10>)
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <control_loop_init+0x14>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	f7fe fcd8 	bl	8001bb0 <HAL_ADC_Start_DMA>
}
 8003200:	bd10      	pop	{r4, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	2000018c 	.word	0x2000018c
 8003208:	2000004c 	.word	0x2000004c

0800320c <HAL_ADC_ConvCpltCallback>:
 800320c:	b672      	cpsid	i
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	__disable_irq();  // Critical section
	accumulator += (adc_dma_buf & 0xFFF);
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <HAL_ADC_ConvCpltCallback+0x20>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	0d1b      	lsrs	r3, r3, #20
 8003216:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_ADC_ConvCpltCallback+0x24>)
 8003218:	6811      	ldr	r1, [r2, #0]
 800321a:	185b      	adds	r3, r3, r1
 800321c:	6013      	str	r3, [r2, #0]
	counter++;
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_ADC_ConvCpltCallback+0x28>)
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003226:	b662      	cpsie	i
	__enable_irq();
}
 8003228:	4770      	bx	lr
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	2000018c 	.word	0x2000018c
 8003230:	20000188 	.word	0x20000188
 8003234:	20000190 	.word	0x20000190

08003238 <run_pid>:
/**
 * Evaluates a PID loop with constants and state in `data`.
 *
 * Returns a float representing the duty cycle output. This value is capped between 0.0F and 1.0F.
 */
float run_pid(PIDData* data, float temp_degC) {
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	46c6      	mov	lr, r8
 800323c:	b500      	push	{lr}
 800323e:	0004      	movs	r4, r0
	float error_degC = data->setpoint_degC - temp_degC;
 8003240:	6940      	ldr	r0, [r0, #20]
 8003242:	f7fd fcff 	bl	8000c44 <__aeabi_fsub>
 8003246:	1c05      	adds	r5, r0, #0
	float duty_cycle;

	// Fix duty_cycle if outside PID window
	if (error_degC > data->pid_window_degC) {
 8003248:	6926      	ldr	r6, [r4, #16]
 800324a:	1c01      	adds	r1, r0, #0
 800324c:	1c30      	adds	r0, r6, #0
 800324e:	f7fd f801 	bl	8000254 <__aeabi_fcmplt>
 8003252:	2800      	cmp	r0, #0
 8003254:	d008      	beq.n	8003268 <run_pid+0x30>
		duty_cycle = 1.0F;
		data->integral_degCs = 0.0F;
 8003256:	2300      	movs	r3, #0
 8003258:	61a3      	str	r3, [r4, #24]
		duty_cycle = 1.0F;
 800325a:	26fe      	movs	r6, #254	; 0xfe
 800325c:	05b6      	lsls	r6, r6, #22

		// Cap to 0.0F - 1.0F (inclusive)
		duty_cycle = (duty_cycle < 1.0F) ? duty_cycle : 1.0F;
		duty_cycle = (duty_cycle > 0.0F) ? duty_cycle : 0.0F;
	}
	data->last_deltaT_degC = error_degC;
 800325e:	61e5      	str	r5, [r4, #28]


	return duty_cycle;
}
 8003260:	1c30      	adds	r0, r6, #0
 8003262:	bc80      	pop	{r7}
 8003264:	46b8      	mov	r8, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (error_degC < -data->pid_window_degC) {
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	18f0      	adds	r0, r6, r3
 800326e:	1c29      	adds	r1, r5, #0
 8003270:	f7fd f804 	bl	800027c <__aeabi_fcmpgt>
 8003274:	2800      	cmp	r0, #0
 8003276:	d002      	beq.n	800327e <run_pid+0x46>
		data->integral_degCs = 0.0F;
 8003278:	2600      	movs	r6, #0
 800327a:	61a6      	str	r6, [r4, #24]
 800327c:	e7ef      	b.n	800325e <run_pid+0x26>
		float derivative_degCps = (error_degC - data->last_deltaT_degC) / data->period_s;
 800327e:	69e1      	ldr	r1, [r4, #28]
 8003280:	1c28      	adds	r0, r5, #0
 8003282:	f7fd fcdf 	bl	8000c44 <__aeabi_fsub>
 8003286:	68e6      	ldr	r6, [r4, #12]
 8003288:	1c31      	adds	r1, r6, #0
 800328a:	f7fd f9c3 	bl	8000614 <__aeabi_fdiv>
 800328e:	1c07      	adds	r7, r0, #0
		data->integral_degCs += error_degC * data->period_s;
 8003290:	1c29      	adds	r1, r5, #0
 8003292:	1c30      	adds	r0, r6, #0
 8003294:	f7fd fb88 	bl	80009a8 <__aeabi_fmul>
 8003298:	69a1      	ldr	r1, [r4, #24]
 800329a:	f7fd f81b 	bl	80002d4 <__aeabi_fadd>
 800329e:	1c06      	adds	r6, r0, #0
 80032a0:	61a0      	str	r0, [r4, #24]
		duty_cycle = data->k_p*error_degC + data->k_i*data->integral_degCs - data->k_d*derivative_degCps;
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	1c29      	adds	r1, r5, #0
 80032a6:	f7fd fb7f 	bl	80009a8 <__aeabi_fmul>
 80032aa:	4680      	mov	r8, r0
 80032ac:	6861      	ldr	r1, [r4, #4]
 80032ae:	1c30      	adds	r0, r6, #0
 80032b0:	f7fd fb7a 	bl	80009a8 <__aeabi_fmul>
 80032b4:	1c01      	adds	r1, r0, #0
 80032b6:	4640      	mov	r0, r8
 80032b8:	f7fd f80c 	bl	80002d4 <__aeabi_fadd>
 80032bc:	1c06      	adds	r6, r0, #0
 80032be:	68a0      	ldr	r0, [r4, #8]
 80032c0:	1c39      	adds	r1, r7, #0
 80032c2:	f7fd fb71 	bl	80009a8 <__aeabi_fmul>
 80032c6:	1c01      	adds	r1, r0, #0
 80032c8:	1c30      	adds	r0, r6, #0
 80032ca:	f7fd fcbb 	bl	8000c44 <__aeabi_fsub>
 80032ce:	1c06      	adds	r6, r0, #0
		duty_cycle = (duty_cycle < 1.0F) ? duty_cycle : 1.0F;
 80032d0:	21fe      	movs	r1, #254	; 0xfe
 80032d2:	0589      	lsls	r1, r1, #22
 80032d4:	f7fc ffbe 	bl	8000254 <__aeabi_fcmplt>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d101      	bne.n	80032e0 <run_pid+0xa8>
 80032dc:	26fe      	movs	r6, #254	; 0xfe
 80032de:	05b6      	lsls	r6, r6, #22
		duty_cycle = (duty_cycle > 0.0F) ? duty_cycle : 0.0F;
 80032e0:	2100      	movs	r1, #0
 80032e2:	1c30      	adds	r0, r6, #0
 80032e4:	f7fc ffca 	bl	800027c <__aeabi_fcmpgt>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d1b8      	bne.n	800325e <run_pid+0x26>
 80032ec:	2600      	movs	r6, #0
 80032ee:	e7b6      	b.n	800325e <run_pid+0x26>

080032f0 <control_loop_run>:
void control_loop_run(void) {
 80032f0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80032f2:	b672      	cpsid	i
	uint32_t acc_copy = accumulator;
 80032f4:	4917      	ldr	r1, [pc, #92]	; (8003354 <control_loop_run+0x64>)
 80032f6:	6808      	ldr	r0, [r1, #0]
	uint32_t count_copy = counter;
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <control_loop_run+0x68>)
 80032fa:	681d      	ldr	r5, [r3, #0]
	accumulator = 0;
 80032fc:	2200      	movs	r2, #0
 80032fe:	600a      	str	r2, [r1, #0]
	counter = 0;
 8003300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003302:	b662      	cpsie	i
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003304:	23a0      	movs	r3, #160	; 0xa0
 8003306:	05db      	lsls	r3, r3, #23
 8003308:	3208      	adds	r2, #8
 800330a:	619a      	str	r2, [r3, #24]
	float adc_code = (float) acc_copy / (float) count_copy;
 800330c:	f7fd fe5a 	bl	8000fc4 <__aeabi_ui2f>
 8003310:	1c04      	adds	r4, r0, #0
 8003312:	0028      	movs	r0, r5
 8003314:	f7fd fe56 	bl	8000fc4 <__aeabi_ui2f>
 8003318:	1c01      	adds	r1, r0, #0
 800331a:	1c20      	adds	r0, r4, #0
 800331c:	f7fd f97a 	bl	8000614 <__aeabi_fdiv>
	float result_V = adc_code * 3.3F / 4095.0F;
 8003320:	490e      	ldr	r1, [pc, #56]	; (800335c <control_loop_run+0x6c>)
 8003322:	f7fd fb41 	bl	80009a8 <__aeabi_fmul>
 8003326:	490e      	ldr	r1, [pc, #56]	; (8003360 <control_loop_run+0x70>)
 8003328:	f7fd f974 	bl	8000614 <__aeabi_fdiv>
	result_V /= TC_AMP_GAIN;  // Remove amplifier gain
 800332c:	490d      	ldr	r1, [pc, #52]	; (8003364 <control_loop_run+0x74>)
 800332e:	f7fd f971 	bl	8000614 <__aeabi_fdiv>
	tip_temperature_degC = tc_voltage_to_temperature(result_V);
 8003332:	f000 f96d 	bl	8003610 <tc_voltage_to_temperature>
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <control_loop_run+0x78>)
 8003338:	6018      	str	r0, [r3, #0]
	float duty_cycle = run_pid(&tip_pid, tip_temperature_degC);
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	480b      	ldr	r0, [pc, #44]	; (800336c <control_loop_run+0x7c>)
 800333e:	f7ff ff7b 	bl	8003238 <run_pid>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle * TIP_PWM_MAX);
 8003342:	490b      	ldr	r1, [pc, #44]	; (8003370 <control_loop_run+0x80>)
 8003344:	f7fd fb30 	bl	80009a8 <__aeabi_fmul>
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <control_loop_run+0x84>)
 800334a:	681c      	ldr	r4, [r3, #0]
 800334c:	f7fc ffaa 	bl	80002a4 <__aeabi_f2uiz>
 8003350:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	20000188 	.word	0x20000188
 8003358:	20000190 	.word	0x20000190
 800335c:	40533333 	.word	0x40533333
 8003360:	457ff000 	.word	0x457ff000
 8003364:	43348000 	.word	0x43348000
 8003368:	20000194 	.word	0x20000194
 800336c:	2000000c 	.word	0x2000000c
 8003370:	43f98000 	.word	0x43f98000
 8003374:	20000144 	.word	0x20000144

08003378 <lcdWriteByte>:
/**
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 */
static void lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	b082      	sub	sp, #8

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 800337c:	4c13      	ldr	r4, [pc, #76]	; (80033cc <lcdWriteByte+0x54>)
 800337e:	79e3      	ldrb	r3, [r4, #7]
 8003380:	4318      	orrs	r0, r3
 8003382:	780b      	ldrb	r3, [r1, #0]
 8003384:	260f      	movs	r6, #15
 8003386:	43b3      	bics	r3, r6
 8003388:	4303      	orrs	r3, r0
 800338a:	2504      	movs	r5, #4
 800338c:	432b      	orrs	r3, r5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <lcdWriteByte+0x58>)
 8003392:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8003394:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8003396:	2300      	movs	r3, #0
 8003398:	56cb      	ldrsb	r3, [r1, r3]
 800339a:	43b3      	bics	r3, r6
 800339c:	4303      	orrs	r3, r0
 800339e:	7093      	strb	r3, [r2, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80033a0:	780b      	ldrb	r3, [r1, #0]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4303      	orrs	r3, r0
 80033a6:	432b      	orrs	r3, r5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	70d3      	strb	r3, [r2, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80033ac:	7113      	strb	r3, [r2, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80033ae:	780b      	ldrb	r3, [r1, #0]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	4318      	orrs	r0, r3
 80033b4:	7150      	strb	r0, [r2, #5]


    HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, HAL_MAX_DELAY);
 80033b6:	79a1      	ldrb	r1, [r4, #6]
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	425b      	negs	r3, r3
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	3307      	adds	r3, #7
 80033c2:	f7ff f905 	bl	80025d0 <HAL_I2C_Master_Transmit>
}
 80033c6:	b002      	add	sp, #8
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	200001a0 	.word	0x200001a0
 80033d0:	20000198 	.word	0x20000198

080033d4 <lcdCommand>:
void lcdCommand(LCDCommands command, LCDParamsActions action) {
 80033d4:	b500      	push	{lr}
 80033d6:	b083      	sub	sp, #12
    uint8_t lcdData = 0x00;
 80033d8:	466b      	mov	r3, sp
 80033da:	2200      	movs	r2, #0
 80033dc:	71da      	strb	r2, [r3, #7]
    switch (action) {
 80033de:	2900      	cmp	r1, #0
 80033e0:	d03b      	beq.n	800345a <lcdCommand+0x86>
 80033e2:	2901      	cmp	r1, #1
 80033e4:	d172      	bne.n	80034cc <lcdCommand+0xf8>
            switch (command) {
 80033e6:	2808      	cmp	r0, #8
 80033e8:	d870      	bhi.n	80034cc <lcdCommand+0xf8>
 80033ea:	0083      	lsls	r3, r0, #2
 80033ec:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <lcdCommand+0x10c>)
 80033ee:	58d3      	ldr	r3, [r2, r3]
 80033f0:	469f      	mov	pc, r3
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80033f2:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <lcdCommand+0x110>)
 80033f4:	7a13      	ldrb	r3, [r2, #8]
 80033f6:	2104      	movs	r1, #4
 80033f8:	430b      	orrs	r3, r1
 80033fa:	7213      	strb	r3, [r2, #8]
                    break;
 80033fc:	e038      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80033fe:	4a39      	ldr	r2, [pc, #228]	; (80034e4 <lcdCommand+0x110>)
 8003400:	7a13      	ldrb	r3, [r2, #8]
 8003402:	2102      	movs	r1, #2
 8003404:	430b      	orrs	r3, r1
 8003406:	7213      	strb	r3, [r2, #8]
                    break;
 8003408:	e032      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <lcdCommand+0x110>)
 800340c:	7a13      	ldrb	r3, [r2, #8]
 800340e:	2101      	movs	r1, #1
 8003410:	430b      	orrs	r3, r1
 8003412:	7213      	strb	r3, [r2, #8]
                    break;
 8003414:	e02c      	b.n	8003470 <lcdCommand+0x9c>
                    lcdData = LCD_BIT_DISP_CLEAR;
 8003416:	466b      	mov	r3, sp
 8003418:	1dd9      	adds	r1, r3, #7
 800341a:	2301      	movs	r3, #1
 800341c:	700b      	strb	r3, [r1, #0]
                    lcdWriteByte((uint8_t)0x00, &lcdData);
 800341e:	2000      	movs	r0, #0
 8003420:	f7ff ffaa 	bl	8003378 <lcdWriteByte>
					HAL_Delay(2);
 8003424:	2002      	movs	r0, #2
 8003426:	f7fe fa63 	bl	80018f0 <HAL_Delay>
					return;
 800342a:	e04f      	b.n	80034cc <lcdCommand+0xf8>
                    lcdData = LCD_BIT_CURSOR_HOME;
 800342c:	466b      	mov	r3, sp
 800342e:	1dd9      	adds	r1, r3, #7
 8003430:	2302      	movs	r3, #2
 8003432:	700b      	strb	r3, [r1, #0]
                    lcdWriteByte((uint8_t)0x00, &lcdData);
 8003434:	2000      	movs	r0, #0
 8003436:	f7ff ff9f 	bl	8003378 <lcdWriteByte>
					HAL_Delay(2);
 800343a:	2002      	movs	r0, #2
 800343c:	f7fe fa58 	bl	80018f0 <HAL_Delay>
					return;
 8003440:	e044      	b.n	80034cc <lcdCommand+0xf8>
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8003442:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <lcdCommand+0x110>)
 8003444:	7a53      	ldrb	r3, [r2, #9]
 8003446:	2102      	movs	r1, #2
 8003448:	430b      	orrs	r3, r1
 800344a:	7253      	strb	r3, [r2, #9]
                    break;
 800344c:	e010      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800344e:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <lcdCommand+0x110>)
 8003450:	7a53      	ldrb	r3, [r2, #9]
 8003452:	2101      	movs	r1, #1
 8003454:	430b      	orrs	r3, r1
 8003456:	7253      	strb	r3, [r2, #9]
                    break;
 8003458:	e00a      	b.n	8003470 <lcdCommand+0x9c>
            switch (command) {
 800345a:	2808      	cmp	r0, #8
 800345c:	d836      	bhi.n	80034cc <lcdCommand+0xf8>
 800345e:	0083      	lsls	r3, r0, #2
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <lcdCommand+0x114>)
 8003462:	58d3      	ldr	r3, [r2, r3]
 8003464:	469f      	mov	pc, r3
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <lcdCommand+0x110>)
 8003468:	7a13      	ldrb	r3, [r2, #8]
 800346a:	2104      	movs	r1, #4
 800346c:	438b      	bics	r3, r1
 800346e:	7213      	strb	r3, [r2, #8]
    switch (command) {
 8003470:	2804      	cmp	r0, #4
 8003472:	d922      	bls.n	80034ba <lcdCommand+0xe6>
 8003474:	3806      	subs	r0, #6
 8003476:	b2c0      	uxtb	r0, r0
 8003478:	2802      	cmp	r0, #2
 800347a:	d822      	bhi.n	80034c2 <lcdCommand+0xee>
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <lcdCommand+0x110>)
 800347e:	7a5b      	ldrb	r3, [r3, #9]
 8003480:	2204      	movs	r2, #4
 8003482:	4313      	orrs	r3, r2
 8003484:	466a      	mov	r2, sp
 8003486:	71d3      	strb	r3, [r2, #7]
            break;
 8003488:	e01b      	b.n	80034c2 <lcdCommand+0xee>
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <lcdCommand+0x110>)
 800348c:	7a13      	ldrb	r3, [r2, #8]
 800348e:	2102      	movs	r1, #2
 8003490:	438b      	bics	r3, r1
 8003492:	7213      	strb	r3, [r2, #8]
                    break;
 8003494:	e7ec      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <lcdCommand+0x110>)
 8003498:	7a13      	ldrb	r3, [r2, #8]
 800349a:	2101      	movs	r1, #1
 800349c:	438b      	bics	r3, r1
 800349e:	7213      	strb	r3, [r2, #8]
                    break;
 80034a0:	e7e6      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <lcdCommand+0x110>)
 80034a4:	7a53      	ldrb	r3, [r2, #9]
 80034a6:	2102      	movs	r1, #2
 80034a8:	438b      	bics	r3, r1
 80034aa:	7253      	strb	r3, [r2, #9]
                    break;
 80034ac:	e7e0      	b.n	8003470 <lcdCommand+0x9c>
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <lcdCommand+0x110>)
 80034b0:	7a53      	ldrb	r3, [r2, #9]
 80034b2:	2101      	movs	r1, #1
 80034b4:	438b      	bics	r3, r1
 80034b6:	7253      	strb	r3, [r2, #9]
                    break;
 80034b8:	e7da      	b.n	8003470 <lcdCommand+0x9c>
    switch (command) {
 80034ba:	2803      	cmp	r0, #3
 80034bc:	d208      	bcs.n	80034d0 <lcdCommand+0xfc>
 80034be:	2801      	cmp	r0, #1
 80034c0:	d006      	beq.n	80034d0 <lcdCommand+0xfc>
    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80034c2:	466b      	mov	r3, sp
 80034c4:	1dd9      	adds	r1, r3, #7
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7ff ff56 	bl	8003378 <lcdWriteByte>
}
 80034cc:	b003      	add	sp, #12
 80034ce:	bd00      	pop	{pc}
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <lcdCommand+0x110>)
 80034d2:	7a1b      	ldrb	r3, [r3, #8]
 80034d4:	2208      	movs	r2, #8
 80034d6:	4313      	orrs	r3, r2
 80034d8:	466a      	mov	r2, sp
 80034da:	71d3      	strb	r3, [r2, #7]
            break;
 80034dc:	e7f1      	b.n	80034c2 <lcdCommand+0xee>
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	08003bcc 	.word	0x08003bcc
 80034e4:	200001a0 	.word	0x200001a0
 80034e8:	08003bf0 	.word	0x08003bf0

080034ec <lcdInit>:
void lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80034ec:	b530      	push	{r4, r5, lr}
 80034ee:	b085      	sub	sp, #20
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 80034f0:	240f      	movs	r4, #15
 80034f2:	446c      	add	r4, sp
 80034f4:	2500      	movs	r5, #0
 80034f6:	7025      	strb	r5, [r4, #0]
    lcdParams.hi2c      = hi2c;
 80034f8:	4c2d      	ldr	r4, [pc, #180]	; (80035b0 <lcdInit+0xc4>)
 80034fa:	6020      	str	r0, [r4, #0]
    lcdParams.address   = address << 1;
 80034fc:	0049      	lsls	r1, r1, #1
 80034fe:	71a1      	strb	r1, [r4, #6]
    lcdParams.lines     = lines;
 8003500:	7122      	strb	r2, [r4, #4]
    lcdParams.columns   = columns;
 8003502:	7163      	strb	r3, [r4, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8003504:	2308      	movs	r3, #8
 8003506:	71e3      	strb	r3, [r4, #7]
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <lcdInit+0xc8>)
 800350a:	2234      	movs	r2, #52	; 0x34
 800350c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800350e:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8003510:	3a04      	subs	r2, #4
 8003512:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; ++i) {
 8003514:	2400      	movs	r4, #0
 8003516:	e004      	b.n	8003522 <lcdInit+0x36>
        	HAL_Delay(1);
 8003518:	2001      	movs	r0, #1
 800351a:	f7fe f9e9 	bl	80018f0 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 800351e:	3401      	adds	r4, #1
 8003520:	b2e4      	uxtb	r4, r4
 8003522:	2c02      	cmp	r4, #2
 8003524:	d80f      	bhi.n	8003546 <lcdInit+0x5a>
    	HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, HAL_MAX_DELAY);
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <lcdInit+0xc4>)
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <lcdInit+0xc8>)
 800352a:	7999      	ldrb	r1, [r3, #6]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	2301      	movs	r3, #1
 8003530:	425b      	negs	r3, r3
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	3304      	adds	r3, #4
 8003536:	f7ff f84b 	bl	80025d0 <HAL_I2C_Master_Transmit>
        if (i == 2) {
 800353a:	2c02      	cmp	r4, #2
 800353c:	d0ec      	beq.n	8003518 <lcdInit+0x2c>
            HAL_Delay(5);
 800353e:	2005      	movs	r0, #5
 8003540:	f7fe f9d6 	bl	80018f0 <HAL_Delay>
 8003544:	e7eb      	b.n	800351e <lcdInit+0x32>
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8003546:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <lcdInit+0xc8>)
 8003548:	232c      	movs	r3, #44	; 0x2c
 800354a:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800354c:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 800354e:	3b04      	subs	r3, #4
 8003550:	7093      	strb	r3, [r2, #2]
    HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, HAL_MAX_DELAY);
 8003552:	4c17      	ldr	r4, [pc, #92]	; (80035b0 <lcdInit+0xc4>)
 8003554:	79a1      	ldrb	r1, [r4, #6]
 8003556:	6820      	ldr	r0, [r4, #0]
 8003558:	3b29      	subs	r3, #41	; 0x29
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	3304      	adds	r3, #4
 800355e:	f7ff f837 	bl	80025d0 <HAL_I2C_Master_Transmit>
    lcdData |= LCD_MODE_4BITS;
 8003562:	220f      	movs	r2, #15
 8003564:	446a      	add	r2, sp
 8003566:	7813      	ldrb	r3, [r2, #0]
 8003568:	2102      	movs	r1, #2
 800356a:	430b      	orrs	r3, r1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	7013      	strb	r3, [r2, #0]
    if (lcdParams.lines > 1) {
 8003570:	7922      	ldrb	r2, [r4, #4]
 8003572:	2a01      	cmp	r2, #1
 8003574:	d904      	bls.n	8003580 <lcdInit+0x94>
        lcdData |= LCD_BIT_2LINE;
 8003576:	2208      	movs	r2, #8
 8003578:	4313      	orrs	r3, r2
 800357a:	220f      	movs	r2, #15
 800357c:	446a      	add	r2, sp
 800357e:	7013      	strb	r3, [r2, #0]
    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8003580:	210f      	movs	r1, #15
 8003582:	4469      	add	r1, sp
 8003584:	2000      	movs	r0, #0
 8003586:	f7ff fef7 	bl	8003378 <lcdWriteByte>
    lcdDisplayOn();
 800358a:	2101      	movs	r1, #1
 800358c:	2001      	movs	r0, #1
 800358e:	f7ff ff21 	bl	80033d4 <lcdCommand>
    lcdCursorDirToRight();
 8003592:	2101      	movs	r1, #1
 8003594:	2007      	movs	r0, #7
 8003596:	f7ff ff1d 	bl	80033d4 <lcdCommand>
    lcdDisplayClear();
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f7ff ff19 	bl	80033d4 <lcdCommand>
    lcdCursorHome();
 80035a2:	2101      	movs	r1, #1
 80035a4:	2005      	movs	r0, #5
 80035a6:	f7ff ff15 	bl	80033d4 <lcdCommand>
}
 80035aa:	b005      	add	sp, #20
 80035ac:	bd30      	pop	{r4, r5, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	200001a0 	.word	0x200001a0
 80035b4:	20000198 	.word	0x20000198

080035b8 <lcdSetCursorPosition>:
void lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80035b8:	b500      	push	{lr}
 80035ba:	b083      	sub	sp, #12
 80035bc:	0003      	movs	r3, r0
    if ( line >= lcdParams.lines ) {
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <lcdSetCursorPosition+0x30>)
 80035c0:	7912      	ldrb	r2, [r2, #4]
 80035c2:	428a      	cmp	r2, r1
 80035c4:	d801      	bhi.n	80035ca <lcdSetCursorPosition+0x12>
        line = lcdParams.lines - 1;
 80035c6:	3a01      	subs	r2, #1
 80035c8:	b2d1      	uxtb	r1, r2
    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80035ca:	4a08      	ldr	r2, [pc, #32]	; (80035ec <lcdSetCursorPosition+0x34>)
 80035cc:	5c50      	ldrb	r0, [r2, r1]
 80035ce:	18c0      	adds	r0, r0, r3
 80035d0:	b240      	sxtb	r0, r0
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	425b      	negs	r3, r3
 80035d6:	4303      	orrs	r3, r0
 80035d8:	466a      	mov	r2, sp
 80035da:	1dd1      	adds	r1, r2, #7
 80035dc:	700b      	strb	r3, [r1, #0]
    return lcdWriteByte(0x00, &lcdCommand);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7ff feca 	bl	8003378 <lcdWriteByte>
}
 80035e4:	b003      	add	sp, #12
 80035e6:	bd00      	pop	{pc}
 80035e8:	200001a0 	.word	0x200001a0
 80035ec:	08003c14 	.word	0x08003c14

080035f0 <lcdPrintStr>:
void lcdPrintStr(char * data) {
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	0005      	movs	r5, r0
    for (uint8_t i = 0; i < strlen(data); ++i) {
 80035f4:	2400      	movs	r4, #0
 80035f6:	e005      	b.n	8003604 <lcdPrintStr+0x14>
        lcdWriteByte(LCD_BIT_RS, (uint8_t*)&data[i]);
 80035f8:	1929      	adds	r1, r5, r4
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff febc 	bl	8003378 <lcdWriteByte>
    for (uint8_t i = 0; i < strlen(data); ++i) {
 8003600:	3401      	adds	r4, #1
 8003602:	b2e4      	uxtb	r4, r4
 8003604:	0028      	movs	r0, r5
 8003606:	f7fc fd7f 	bl	8000108 <strlen>
 800360a:	4284      	cmp	r4, r0
 800360c:	d3f4      	bcc.n	80035f8 <lcdPrintStr+0x8>
}
 800360e:	bd70      	pop	{r4, r5, r6, pc}

08003610 <tc_voltage_to_temperature>:
#include <stdint.h>

/**
 * Convert a thermocouple voltage to temperature in degrees C
 */
float tc_voltage_to_temperature(float V) {
 8003610:	b510      	push	{r4, lr}
	return V * TC_COEFF_K_PER_V;
 8003612:	4902      	ldr	r1, [pc, #8]	; (800361c <tc_voltage_to_temperature+0xc>)
 8003614:	f7fd f9c8 	bl	80009a8 <__aeabi_fmul>
}
 8003618:	bd10      	pop	{r4, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	473a030c 	.word	0x473a030c

08003620 <HAL_GPIO_EXTI_Callback>:
	lcdPrintStr(line);
}


// Callback for button press interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003620:	b510      	push	{r4, lr}
 8003622:	0004      	movs	r4, r0
	lcdSetCursorPosition(0, 1);
 8003624:	2101      	movs	r1, #1
 8003626:	2000      	movs	r0, #0
 8003628:	f7ff ffc6 	bl	80035b8 <lcdSetCursorPosition>
	switch (GPIO_Pin) {
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	429c      	cmp	r4, r3
 8003632:	d016      	beq.n	8003662 <HAL_GPIO_EXTI_Callback+0x42>
 8003634:	d809      	bhi.n	800364a <HAL_GPIO_EXTI_Callback+0x2a>
 8003636:	2c02      	cmp	r4, #2
 8003638:	d00f      	beq.n	800365a <HAL_GPIO_EXTI_Callback+0x3a>
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	429c      	cmp	r4, r3
 8003640:	d102      	bne.n	8003648 <HAL_GPIO_EXTI_Callback+0x28>
	case BTN_ENTER_Pin:
		button_raw = BTN_ENTER;
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_GPIO_EXTI_Callback+0x4c>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]

	case BTN_MENU_Pin:
		button_raw = BTN_MENU;
		break;
	}
}
 8003648:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin) {
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	429c      	cmp	r4, r3
 8003650:	d1fa      	bne.n	8003648 <HAL_GPIO_EXTI_Callback+0x28>
		button_raw = BTN_UP;
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_GPIO_EXTI_Callback+0x4c>)
 8003654:	2202      	movs	r2, #2
 8003656:	701a      	strb	r2, [r3, #0]
		break;
 8003658:	e7f6      	b.n	8003648 <HAL_GPIO_EXTI_Callback+0x28>
		button_raw = BTN_DOWN;
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_GPIO_EXTI_Callback+0x4c>)
 800365c:	2203      	movs	r2, #3
 800365e:	701a      	strb	r2, [r3, #0]
		break;
 8003660:	e7f2      	b.n	8003648 <HAL_GPIO_EXTI_Callback+0x28>
		button_raw = BTN_MENU;
 8003662:	4b02      	ldr	r3, [pc, #8]	; (800366c <HAL_GPIO_EXTI_Callback+0x4c>)
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
}
 8003668:	e7ee      	b.n	8003648 <HAL_GPIO_EXTI_Callback+0x28>
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	200001ad 	.word	0x200001ad

08003670 <check_buttons>:

/**
 * Periodic task checking whether debounced button flags are set, and handling
 * button actions.
 */
void check_buttons(void) {
 8003670:	b510      	push	{r4, lr}
	switch (button_debounced) {
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <check_buttons+0x58>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d005      	beq.n	8003688 <check_buttons+0x18>
 800367c:	2a03      	cmp	r2, #3
 800367e:	d013      	beq.n	80036a8 <check_buttons+0x38>
		case BTN_MENU:
		case BTN_NONE:
			break;
	}

	button_debounced = BTN_NONE;
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <check_buttons+0x58>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
}
 8003686:	bd10      	pop	{r4, pc}
			if (tip_pid.setpoint_degC < TIP_MAX_TEMP_DEGC) {
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <check_buttons+0x5c>)
 800368a:	6958      	ldr	r0, [r3, #20]
 800368c:	4910      	ldr	r1, [pc, #64]	; (80036d0 <check_buttons+0x60>)
 800368e:	f7fc fde1 	bl	8000254 <__aeabi_fcmplt>
 8003692:	2800      	cmp	r0, #0
 8003694:	d0f4      	beq.n	8003680 <check_buttons+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8003696:	b672      	cpsid	i
				tip_pid.setpoint_degC += 10;
 8003698:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <check_buttons+0x5c>)
 800369a:	6960      	ldr	r0, [r4, #20]
 800369c:	490d      	ldr	r1, [pc, #52]	; (80036d4 <check_buttons+0x64>)
 800369e:	f7fc fe19 	bl	80002d4 <__aeabi_fadd>
 80036a2:	6160      	str	r0, [r4, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80036a4:	b662      	cpsie	i
}
 80036a6:	e7eb      	b.n	8003680 <check_buttons+0x10>
			if (tip_pid.setpoint_degC > TIP_MIN_TEMP_DEGC) {
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <check_buttons+0x5c>)
 80036aa:	6958      	ldr	r0, [r3, #20]
 80036ac:	2100      	movs	r1, #0
 80036ae:	f7fc fde5 	bl	800027c <__aeabi_fcmpgt>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d0e4      	beq.n	8003680 <check_buttons+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 80036b6:	b672      	cpsid	i
				tip_pid.setpoint_degC -= 10;
 80036b8:	4c04      	ldr	r4, [pc, #16]	; (80036cc <check_buttons+0x5c>)
 80036ba:	6960      	ldr	r0, [r4, #20]
 80036bc:	4905      	ldr	r1, [pc, #20]	; (80036d4 <check_buttons+0x64>)
 80036be:	f7fd fac1 	bl	8000c44 <__aeabi_fsub>
 80036c2:	6160      	str	r0, [r4, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80036c4:	b662      	cpsie	i
}
 80036c6:	e7db      	b.n	8003680 <check_buttons+0x10>
 80036c8:	200001ac 	.word	0x200001ac
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	43e10000 	.word	0x43e10000
 80036d4:	41200000 	.word	0x41200000

080036d8 <button_debounce_handler>:

/**
 * Timer update task called every 1ms. Debounces buttons by waiting for
 * BTN_DEBOUNCE_CYCLES*1ms and then checking if button is still pressed.
 */
void button_debounce_handler(void) {
 80036d8:	b510      	push	{r4, lr}
	if (button_raw != BTN_NONE) {
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <button_debounce_handler+0x74>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01f      	beq.n	8003722 <button_debounce_handler+0x4a>
		static uint8_t counter = BTN_DEBOUNCE_CYCLES;
		if (counter != 0) {
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <button_debounce_handler+0x78>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11c      	bne.n	8003724 <button_debounce_handler+0x4c>
		}

		GPIO_TypeDef* button_port;
		uint32_t button_pin;

		switch (button_raw) {
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <button_debounce_handler+0x74>)
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	b2d3      	uxtb	r3, r2
 80036f0:	2a03      	cmp	r2, #3
 80036f2:	d024      	beq.n	800373e <button_debounce_handler+0x66>
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d819      	bhi.n	800372c <button_debounce_handler+0x54>
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d023      	beq.n	8003744 <button_debounce_handler+0x6c>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d11b      	bne.n	8003738 <button_debounce_handler+0x60>
			button_port = BTN_DOWN_GPIO_Port;
			button_pin = BTN_DOWN_Pin;
			break;
		case BTN_UP:
			button_port = BTN_UP_GPIO_Port;
			button_pin = BTN_UP_Pin;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	021b      	lsls	r3, r3, #8
			button_port = BTN_UP_GPIO_Port;
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <button_debounce_handler+0x7c>)
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003706:	6912      	ldr	r2, [r2, #16]
			Error_Handler();
			return;
		}

		// Buttons are active low
		if (!(LL_GPIO_ReadInputPort(button_port) & button_pin)) {
 8003708:	421a      	tst	r2, r3
 800370a:	d104      	bne.n	8003716 <button_debounce_handler+0x3e>
			button_debounced = button_raw;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <button_debounce_handler+0x74>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <button_debounce_handler+0x80>)
 8003714:	7013      	strb	r3, [r2, #0]
		}

		counter = BTN_DEBOUNCE_CYCLES;
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <button_debounce_handler+0x78>)
 8003718:	2232      	movs	r2, #50	; 0x32
 800371a:	701a      	strb	r2, [r3, #0]
		button_raw = BTN_NONE;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <button_debounce_handler+0x74>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
	}
}
 8003722:	bd10      	pop	{r4, pc}
			counter--;
 8003724:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <button_debounce_handler+0x78>)
 8003726:	3b01      	subs	r3, #1
 8003728:	7013      	strb	r3, [r2, #0]
			return;
 800372a:	e7fa      	b.n	8003722 <button_debounce_handler+0x4a>
		switch (button_raw) {
 800372c:	2b04      	cmp	r3, #4
 800372e:	d103      	bne.n	8003738 <button_debounce_handler+0x60>
			button_pin = BTN_MENU_Pin;
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	01db      	lsls	r3, r3, #7
			button_port = BTN_MENU_GPIO_Port;
 8003734:	4a07      	ldr	r2, [pc, #28]	; (8003754 <button_debounce_handler+0x7c>)
 8003736:	e7e6      	b.n	8003706 <button_debounce_handler+0x2e>
			Error_Handler();
 8003738:	f7fd feac 	bl	8001494 <Error_Handler>
			return;
 800373c:	e7f1      	b.n	8003722 <button_debounce_handler+0x4a>
			button_pin = BTN_DOWN_Pin;
 800373e:	2302      	movs	r3, #2
			button_port = BTN_DOWN_GPIO_Port;
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <button_debounce_handler+0x84>)
 8003742:	e7e0      	b.n	8003706 <button_debounce_handler+0x2e>
		switch (button_raw) {
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <button_debounce_handler+0x84>)
 800374a:	e7dc      	b.n	8003706 <button_debounce_handler+0x2e>
 800374c:	200001ad 	.word	0x200001ad
 8003750:	2000002c 	.word	0x2000002c
 8003754:	50000800 	.word	0x50000800
 8003758:	200001ac 	.word	0x200001ac
 800375c:	50000400 	.word	0x50000400

08003760 <string_pad>:


/**
 * Pad string with spaces after it up to length n.
 */
void string_pad(char* str, size_t n) {
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	0005      	movs	r5, r0
 8003764:	000e      	movs	r6, r1
	size_t len = strlen(str);
 8003766:	f7fc fccf 	bl	8000108 <strlen>
	size_t spaces = n - len;
 800376a:	1a36      	subs	r6, r6, r0
	for (size_t i = 0; i < spaces; i++) {
 800376c:	2400      	movs	r4, #0
 800376e:	e008      	b.n	8003782 <string_pad+0x22>
		strcat(str, " ");
 8003770:	0028      	movs	r0, r5
 8003772:	f7fc fcc9 	bl	8000108 <strlen>
 8003776:	1828      	adds	r0, r5, r0
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <string_pad+0x28>)
 800377a:	2202      	movs	r2, #2
 800377c:	f000 f9d0 	bl	8003b20 <memcpy>
	for (size_t i = 0; i < spaces; i++) {
 8003780:	3401      	adds	r4, #1
 8003782:	42b4      	cmp	r4, r6
 8003784:	d3f4      	bcc.n	8003770 <string_pad+0x10>
	}
//	while (strlen(str) < n) {
//		strcat(str, " ");
//	}
}
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	08003c18 	.word	0x08003c18

0800378c <refresh_display>:
void refresh_display(void) {
 800378c:	b510      	push	{r4, lr}
 800378e:	b088      	sub	sp, #32
	char line[17] = "";
 8003790:	2300      	movs	r3, #0
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	220d      	movs	r2, #13
 8003796:	2100      	movs	r1, #0
 8003798:	a804      	add	r0, sp, #16
 800379a:	f000 f987 	bl	8003aac <memset>
	lcdSetCursorPosition(0, 0);
 800379e:	2100      	movs	r1, #0
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff ff09 	bl	80035b8 <lcdSetCursorPosition>
	float error = tip_temperature_degC - tip_pid.setpoint_degC;
 80037a6:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <refresh_display+0x150>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <refresh_display+0x154>)
 80037ac:	6959      	ldr	r1, [r3, #20]
 80037ae:	f7fd fa49 	bl	8000c44 <__aeabi_fsub>
 80037b2:	1c04      	adds	r4, r0, #0
	if (error > -10.0F && error < 10.0F) {
 80037b4:	494b      	ldr	r1, [pc, #300]	; (80038e4 <refresh_display+0x158>)
 80037b6:	f7fc fd61 	bl	800027c <__aeabi_fcmpgt>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d006      	beq.n	80037cc <refresh_display+0x40>
 80037be:	494a      	ldr	r1, [pc, #296]	; (80038e8 <refresh_display+0x15c>)
 80037c0:	1c20      	adds	r0, r4, #0
 80037c2:	f7fc fd47 	bl	8000254 <__aeabi_fcmplt>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d000      	beq.n	80037cc <refresh_display+0x40>
 80037ca:	e071      	b.n	80038b0 <refresh_display+0x124>
	} else if (error < 10.0F) {
 80037cc:	4946      	ldr	r1, [pc, #280]	; (80038e8 <refresh_display+0x15c>)
 80037ce:	1c20      	adds	r0, r4, #0
 80037d0:	f7fc fd40 	bl	8000254 <__aeabi_fcmplt>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d100      	bne.n	80037da <refresh_display+0x4e>
 80037d8:	e075      	b.n	80038c6 <refresh_display+0x13a>
		strcat(line, "Heating");
 80037da:	a803      	add	r0, sp, #12
 80037dc:	f7fc fc94 	bl	8000108 <strlen>
 80037e0:	ab03      	add	r3, sp, #12
 80037e2:	469c      	mov	ip, r3
 80037e4:	4460      	add	r0, ip
 80037e6:	4941      	ldr	r1, [pc, #260]	; (80038ec <refresh_display+0x160>)
 80037e8:	2208      	movs	r2, #8
 80037ea:	f000 f999 	bl	8003b20 <memcpy>
	string_pad(line, 16);
 80037ee:	ac03      	add	r4, sp, #12
 80037f0:	2110      	movs	r1, #16
 80037f2:	0020      	movs	r0, r4
 80037f4:	f7ff ffb4 	bl	8003760 <string_pad>
	lcdPrintStr(line);
 80037f8:	0020      	movs	r0, r4
 80037fa:	f7ff fef9 	bl	80035f0 <lcdPrintStr>
	line[0] = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	7023      	strb	r3, [r4, #0]
	strcat(line, "T:");
 8003802:	0020      	movs	r0, r4
 8003804:	f7fc fc80 	bl	8000108 <strlen>
 8003808:	1820      	adds	r0, r4, r0
 800380a:	4939      	ldr	r1, [pc, #228]	; (80038f0 <refresh_display+0x164>)
 800380c:	2203      	movs	r2, #3
 800380e:	f000 f987 	bl	8003b20 <memcpy>
	itoa(tip_temperature_degC + 0.5F, num, 10);
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <refresh_display+0x150>)
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	21fc      	movs	r1, #252	; 0xfc
 8003818:	0589      	lsls	r1, r1, #22
 800381a:	f7fc fd5b 	bl	80002d4 <__aeabi_fadd>
 800381e:	f7fd fbb1 	bl	8000f84 <__aeabi_f2iz>
 8003822:	220a      	movs	r2, #10
 8003824:	a901      	add	r1, sp, #4
 8003826:	f000 f909 	bl	8003a3c <itoa>
	strcat(line, num);
 800382a:	a901      	add	r1, sp, #4
 800382c:	0020      	movs	r0, r4
 800382e:	f000 f945 	bl	8003abc <strcat>
	strcat(line, "/");
 8003832:	0020      	movs	r0, r4
 8003834:	f7fc fc68 	bl	8000108 <strlen>
 8003838:	1820      	adds	r0, r4, r0
 800383a:	492e      	ldr	r1, [pc, #184]	; (80038f4 <refresh_display+0x168>)
 800383c:	2202      	movs	r2, #2
 800383e:	f000 f96f 	bl	8003b20 <memcpy>
	itoa(tip_pid.setpoint_degC + 0.5F, num, 10);
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <refresh_display+0x154>)
 8003844:	6958      	ldr	r0, [r3, #20]
 8003846:	21fc      	movs	r1, #252	; 0xfc
 8003848:	0589      	lsls	r1, r1, #22
 800384a:	f7fc fd43 	bl	80002d4 <__aeabi_fadd>
 800384e:	f7fd fb99 	bl	8000f84 <__aeabi_f2iz>
 8003852:	220a      	movs	r2, #10
 8003854:	a901      	add	r1, sp, #4
 8003856:	f000 f8f1 	bl	8003a3c <itoa>
	strcat(line, num);
 800385a:	a901      	add	r1, sp, #4
 800385c:	0020      	movs	r0, r4
 800385e:	f000 f92d 	bl	8003abc <strcat>
	string_pad(line, 11);
 8003862:	210b      	movs	r1, #11
 8003864:	0020      	movs	r0, r4
 8003866:	f7ff ff7b 	bl	8003760 <string_pad>
	strcat(line, "P:");
 800386a:	0020      	movs	r0, r4
 800386c:	f7fc fc4c 	bl	8000108 <strlen>
 8003870:	1820      	adds	r0, r4, r0
 8003872:	4921      	ldr	r1, [pc, #132]	; (80038f8 <refresh_display+0x16c>)
 8003874:	2203      	movs	r2, #3
 8003876:	f000 f953 	bl	8003b20 <memcpy>
	itoa(__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) / 10, num, 10);
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <refresh_display+0x170>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003880:	210a      	movs	r1, #10
 8003882:	f7fc fc49 	bl	8000118 <__udivsi3>
 8003886:	220a      	movs	r2, #10
 8003888:	a901      	add	r1, sp, #4
 800388a:	f000 f8d7 	bl	8003a3c <itoa>
	strcat(line, num);
 800388e:	a901      	add	r1, sp, #4
 8003890:	0020      	movs	r0, r4
 8003892:	f000 f913 	bl	8003abc <strcat>
	string_pad(line, 16);
 8003896:	2110      	movs	r1, #16
 8003898:	0020      	movs	r0, r4
 800389a:	f7ff ff61 	bl	8003760 <string_pad>
	lcdSetCursorPosition(0, 1);
 800389e:	2101      	movs	r1, #1
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7ff fe89 	bl	80035b8 <lcdSetCursorPosition>
	lcdPrintStr(line);
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7ff fea2 	bl	80035f0 <lcdPrintStr>
}
 80038ac:	b008      	add	sp, #32
 80038ae:	bd10      	pop	{r4, pc}
		strcat(line, "Ready");
 80038b0:	a803      	add	r0, sp, #12
 80038b2:	f7fc fc29 	bl	8000108 <strlen>
 80038b6:	ab03      	add	r3, sp, #12
 80038b8:	469c      	mov	ip, r3
 80038ba:	4460      	add	r0, ip
 80038bc:	4910      	ldr	r1, [pc, #64]	; (8003900 <refresh_display+0x174>)
 80038be:	2206      	movs	r2, #6
 80038c0:	f000 f92e 	bl	8003b20 <memcpy>
 80038c4:	e793      	b.n	80037ee <refresh_display+0x62>
		strcat(line, "OverTemp!");
 80038c6:	a803      	add	r0, sp, #12
 80038c8:	f7fc fc1e 	bl	8000108 <strlen>
 80038cc:	ab03      	add	r3, sp, #12
 80038ce:	469c      	mov	ip, r3
 80038d0:	4460      	add	r0, ip
 80038d2:	490c      	ldr	r1, [pc, #48]	; (8003904 <refresh_display+0x178>)
 80038d4:	220a      	movs	r2, #10
 80038d6:	f000 f923 	bl	8003b20 <memcpy>
 80038da:	e788      	b.n	80037ee <refresh_display+0x62>
 80038dc:	20000194 	.word	0x20000194
 80038e0:	2000000c 	.word	0x2000000c
 80038e4:	c1200000 	.word	0xc1200000
 80038e8:	41200000 	.word	0x41200000
 80038ec:	08003c24 	.word	0x08003c24
 80038f0:	08003c38 	.word	0x08003c38
 80038f4:	08003c3c 	.word	0x08003c3c
 80038f8:	08003c40 	.word	0x08003c40
 80038fc:	20000144 	.word	0x20000144
 8003900:	08003c1c 	.word	0x08003c1c
 8003904:	08003c2c 	.word	0x08003c2c

08003908 <user_main>:
 */

volatile bool check_buttons_flag = false;
volatile bool refresh_display_flag = false;

void user_main(void) {
 8003908:	b530      	push	{r4, r5, lr}
 800390a:	b087      	sub	sp, #28
	lcdInit(&hi2c1, 0x27, 2, 16);
 800390c:	4820      	ldr	r0, [pc, #128]	; (8003990 <user_main+0x88>)
 800390e:	2310      	movs	r3, #16
 8003910:	2202      	movs	r2, #2
 8003912:	2127      	movs	r1, #39	; 0x27
 8003914:	f7ff fdea 	bl	80034ec <lcdInit>
	char str[] = "SolderingStation";
 8003918:	a801      	add	r0, sp, #4
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <user_main+0x8c>)
 800391c:	0002      	movs	r2, r0
 800391e:	0019      	movs	r1, r3
 8003920:	c938      	ldmia	r1!, {r3, r4, r5}
 8003922:	c238      	stmia	r2!, {r3, r4, r5}
 8003924:	680b      	ldr	r3, [r1, #0]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	790b      	ldrb	r3, [r1, #4]
 800392a:	7113      	strb	r3, [r2, #4]
	lcdPrintStr(str);
 800392c:	f7ff fe60 	bl	80035f0 <lcdPrintStr>
	HAL_TIM_Base_Start(&htim2);
 8003930:	4c19      	ldr	r4, [pc, #100]	; (8003998 <user_main+0x90>)
 8003932:	0020      	movs	r0, r4
 8003934:	f7ff f85a 	bl	80029ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003938:	2100      	movs	r1, #0
 800393a:	0020      	movs	r0, r4
 800393c:	f7ff f94a 	bl	8002bd4 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8003940:	2104      	movs	r1, #4
 8003942:	0020      	movs	r0, r4
 8003944:	f7ff f89e 	bl	8002a84 <HAL_TIM_OC_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 600);
 800394e:	2296      	movs	r2, #150	; 0x96
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	639a      	str	r2, [r3, #56]	; 0x38

	// Must be run before HAL_ADC_Start()
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003954:	4811      	ldr	r0, [pc, #68]	; (800399c <user_main+0x94>)
 8003956:	2100      	movs	r1, #0
 8003958:	f7fe fa28 	bl	8001dac <HAL_ADCEx_Calibration_Start>

	control_loop_init();
 800395c:	f7ff fc4a 	bl	80031f4 <control_loop_init>
 8003960:	e00d      	b.n	800397e <user_main+0x76>

	while (true) {
		if (check_buttons_flag) {
			check_buttons();
 8003962:	f7ff fe85 	bl	8003670 <check_buttons>
			check_buttons_flag = false;
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <user_main+0x98>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e00b      	b.n	8003986 <user_main+0x7e>
		}
		if (refresh_display_flag) {
			refresh_display();
 800396e:	f7ff ff0d 	bl	800378c <refresh_display>
			refresh_display_flag = false;
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <user_main+0x9c>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(1);
 8003978:	2001      	movs	r0, #1
 800397a:	f7fd ffb9 	bl	80018f0 <HAL_Delay>
		if (check_buttons_flag) {
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <user_main+0x98>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ed      	bne.n	8003962 <user_main+0x5a>
		if (refresh_display_flag) {
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <user_main+0x9c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ef      	bne.n	800396e <user_main+0x66>
 800398e:	e7f3      	b.n	8003978 <user_main+0x70>
 8003990:	200000f0 	.word	0x200000f0
 8003994:	08003c44 	.word	0x08003c44
 8003998:	20000144 	.word	0x20000144
 800399c:	2000004c 	.word	0x2000004c
 80039a0:	200001ae 	.word	0x200001ae
 80039a4:	200001af 	.word	0x200001af

080039a8 <HAL_TIM_OC_DelayElapsedCallback>:

/**
 * TIM2 output compare callback. Called after the PWM high period so that
 * current measurement can be performed at the correct time.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80039a8:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_dma_buf, 1);
 80039aa:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_TIM_OC_DelayElapsedCallback+0x10>)
 80039ac:	4803      	ldr	r0, [pc, #12]	; (80039bc <HAL_TIM_OC_DelayElapsedCallback+0x14>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	f7fe f8fe 	bl	8001bb0 <HAL_ADC_Start_DMA>
}
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	2000018c 	.word	0x2000018c
 80039bc:	2000004c 	.word	0x2000004c

080039c0 <user_systick_handler>:

/**
 * Called by SysTick_Handler() every 1ms.
 */
void user_systick_handler(void) {
 80039c0:	b510      	push	{r4, lr}
	if (HAL_GetTick() % TASK_PERIOD_CTRL_LOOP_MS == 0) {
 80039c2:	f7fd ff8f 	bl	80018e4 <HAL_GetTick>
 80039c6:	2164      	movs	r1, #100	; 0x64
 80039c8:	f7fc fc2c 	bl	8000224 <__aeabi_uidivmod>
 80039cc:	2900      	cmp	r1, #0
 80039ce:	d016      	beq.n	80039fe <user_systick_handler+0x3e>
		control_loop_run();
	}

	button_debounce_handler();
 80039d0:	f7ff fe82 	bl	80036d8 <button_debounce_handler>

	if (HAL_GetTick() % TASK_PERIOD_CHECK_BUTTONS_MS == 0) {
 80039d4:	f7fd ff86 	bl	80018e4 <HAL_GetTick>
 80039d8:	2132      	movs	r1, #50	; 0x32
 80039da:	f7fc fc23 	bl	8000224 <__aeabi_uidivmod>
 80039de:	2900      	cmp	r1, #0
 80039e0:	d102      	bne.n	80039e8 <user_systick_handler+0x28>
		check_buttons_flag = true;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <user_systick_handler+0x44>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() % TASK_PERIOD_REFRESH_DISPLAY_MS == 0) {
 80039e8:	f7fd ff7c 	bl	80018e4 <HAL_GetTick>
 80039ec:	21fa      	movs	r1, #250	; 0xfa
 80039ee:	f7fc fc19 	bl	8000224 <__aeabi_uidivmod>
 80039f2:	2900      	cmp	r1, #0
 80039f4:	d102      	bne.n	80039fc <user_systick_handler+0x3c>
		refresh_display_flag = true;
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <user_systick_handler+0x48>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
	}
}
 80039fc:	bd10      	pop	{r4, pc}
		control_loop_run();
 80039fe:	f7ff fc77 	bl	80032f0 <control_loop_run>
 8003a02:	e7e5      	b.n	80039d0 <user_systick_handler+0x10>
 8003a04:	200001ae 	.word	0x200001ae
 8003a08:	200001af 	.word	0x200001af

08003a0c <__itoa>:
 8003a0c:	1e93      	subs	r3, r2, #2
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	000c      	movs	r4, r1
 8003a12:	2b22      	cmp	r3, #34	; 0x22
 8003a14:	d904      	bls.n	8003a20 <__itoa+0x14>
 8003a16:	2300      	movs	r3, #0
 8003a18:	001c      	movs	r4, r3
 8003a1a:	700b      	strb	r3, [r1, #0]
 8003a1c:	0020      	movs	r0, r4
 8003a1e:	bd10      	pop	{r4, pc}
 8003a20:	2a0a      	cmp	r2, #10
 8003a22:	d109      	bne.n	8003a38 <__itoa+0x2c>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	da07      	bge.n	8003a38 <__itoa+0x2c>
 8003a28:	232d      	movs	r3, #45	; 0x2d
 8003a2a:	700b      	strb	r3, [r1, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4240      	negs	r0, r0
 8003a30:	1861      	adds	r1, r4, r1
 8003a32:	f000 f807 	bl	8003a44 <__utoa>
 8003a36:	e7f1      	b.n	8003a1c <__itoa+0x10>
 8003a38:	2100      	movs	r1, #0
 8003a3a:	e7f9      	b.n	8003a30 <__itoa+0x24>

08003a3c <itoa>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	f7ff ffe5 	bl	8003a0c <__itoa>
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <__utoa>:
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	000c      	movs	r4, r1
 8003a48:	0016      	movs	r6, r2
 8003a4a:	b08d      	sub	sp, #52	; 0x34
 8003a4c:	2225      	movs	r2, #37	; 0x25
 8003a4e:	0007      	movs	r7, r0
 8003a50:	4915      	ldr	r1, [pc, #84]	; (8003aa8 <__utoa+0x64>)
 8003a52:	a802      	add	r0, sp, #8
 8003a54:	f000 f864 	bl	8003b20 <memcpy>
 8003a58:	1e62      	subs	r2, r4, #1
 8003a5a:	1eb3      	subs	r3, r6, #2
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	9201      	str	r2, [sp, #4]
 8003a60:	2b22      	cmp	r3, #34	; 0x22
 8003a62:	d904      	bls.n	8003a6e <__utoa+0x2a>
 8003a64:	7025      	strb	r5, [r4, #0]
 8003a66:	002c      	movs	r4, r5
 8003a68:	0020      	movs	r0, r4
 8003a6a:	b00d      	add	sp, #52	; 0x34
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6e:	0038      	movs	r0, r7
 8003a70:	0031      	movs	r1, r6
 8003a72:	f7fc fbd7 	bl	8000224 <__aeabi_uidivmod>
 8003a76:	000b      	movs	r3, r1
 8003a78:	aa02      	add	r2, sp, #8
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	9a01      	ldr	r2, [sp, #4]
 8003a7e:	0029      	movs	r1, r5
 8003a80:	3501      	adds	r5, #1
 8003a82:	5553      	strb	r3, [r2, r5]
 8003a84:	003b      	movs	r3, r7
 8003a86:	0007      	movs	r7, r0
 8003a88:	429e      	cmp	r6, r3
 8003a8a:	d9f0      	bls.n	8003a6e <__utoa+0x2a>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	0022      	movs	r2, r4
 8003a90:	5563      	strb	r3, [r4, r5]
 8003a92:	000b      	movs	r3, r1
 8003a94:	1ac8      	subs	r0, r1, r3
 8003a96:	4283      	cmp	r3, r0
 8003a98:	dde6      	ble.n	8003a68 <__utoa+0x24>
 8003a9a:	7810      	ldrb	r0, [r2, #0]
 8003a9c:	5ce5      	ldrb	r5, [r4, r3]
 8003a9e:	7015      	strb	r5, [r2, #0]
 8003aa0:	54e0      	strb	r0, [r4, r3]
 8003aa2:	3201      	adds	r2, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	e7f5      	b.n	8003a94 <__utoa+0x50>
 8003aa8:	08003c55 	.word	0x08003c55

08003aac <memset>:
 8003aac:	0003      	movs	r3, r0
 8003aae:	1882      	adds	r2, r0, r2
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	7019      	strb	r1, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <strcat>:
 8003abc:	0002      	movs	r2, r0
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	7813      	ldrb	r3, [r2, #0]
 8003ac2:	0014      	movs	r4, r2
 8003ac4:	3201      	adds	r2, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1fa      	bne.n	8003ac0 <strcat+0x4>
 8003aca:	5cca      	ldrb	r2, [r1, r3]
 8003acc:	54e2      	strb	r2, [r4, r3]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	2a00      	cmp	r2, #0
 8003ad2:	d1fa      	bne.n	8003aca <strcat+0xe>
 8003ad4:	bd10      	pop	{r4, pc}
	...

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	2600      	movs	r6, #0
 8003adc:	4c0c      	ldr	r4, [pc, #48]	; (8003b10 <__libc_init_array+0x38>)
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x3c>)
 8003ae0:	1b64      	subs	r4, r4, r5
 8003ae2:	10a4      	asrs	r4, r4, #2
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	2600      	movs	r6, #0
 8003aea:	f000 f823 	bl	8003b34 <_init>
 8003aee:	4c0a      	ldr	r4, [pc, #40]	; (8003b18 <__libc_init_array+0x40>)
 8003af0:	4d0a      	ldr	r5, [pc, #40]	; (8003b1c <__libc_init_array+0x44>)
 8003af2:	1b64      	subs	r4, r4, r5
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	00b3      	lsls	r3, r6, #2
 8003afe:	58eb      	ldr	r3, [r5, r3]
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	00b3      	lsls	r3, r6, #2
 8003b08:	58eb      	ldr	r3, [r5, r3]
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003c7c 	.word	0x08003c7c
 8003b14:	08003c7c 	.word	0x08003c7c
 8003b18:	08003c80 	.word	0x08003c80
 8003b1c:	08003c7c 	.word	0x08003c7c

08003b20 <memcpy>:
 8003b20:	2300      	movs	r3, #0
 8003b22:	b510      	push	{r4, lr}
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d100      	bne.n	8003b2a <memcpy+0xa>
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	5ccc      	ldrb	r4, [r1, r3]
 8003b2c:	54c4      	strb	r4, [r0, r3]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	e7f8      	b.n	8003b24 <memcpy+0x4>
	...

08003b34 <_init>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr

08003b40 <_fini>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr
