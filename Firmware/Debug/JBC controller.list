
JBC controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002784  08002784  00012784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080027d0  080027d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d0  080027d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000005c  08002834  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  200002c4  08002834  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001297f  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000333c  00000000  00000000  00032a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000078d7  00000000  00000000  00035d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ad8  00000000  00000000  0003d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cce  00000000  00000000  0003e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000134eb  00000000  00000000  0003ee06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015e41  00000000  00000000  000522f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000720a7  00000000  00000000  00068132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000256c  00000000  00000000  000da1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000dc748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800276c 	.word	0x0800276c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800276c 	.word	0x0800276c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f806 	bl	8000268 <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__aeabi_idiv0>:
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800026c:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	2208      	movs	r2, #8
 8000270:	2100      	movs	r1, #0
 8000272:	4668      	mov	r0, sp
 8000274:	f001 fdf4 	bl	8001e60 <memset>
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000278:	2207      	movs	r2, #7
  hadc.Init.OversamplingMode = ENABLE;
 800027a:	4c23      	ldr	r4, [pc, #140]	; (8000308 <MX_ADC_Init+0x9c>)
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800027c:	230c      	movs	r3, #12
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800027e:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000280:	22c2      	movs	r2, #194	; 0xc2
 8000282:	32ff      	adds	r2, #255	; 0xff
 8000284:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000286:	0022      	movs	r2, r4
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000288:	6423      	str	r3, [r4, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800028a:	2300      	movs	r3, #0
  hadc.Init.DMAContinuousRequests = DISABLE;
 800028c:	322c      	adds	r2, #44	; 0x2c
 800028e:	7013      	strb	r3, [r2, #0]
  hadc.Instance = ADC1;
 8000290:	4a1e      	ldr	r2, [pc, #120]	; (800030c <MX_ADC_Init+0xa0>)
  hadc.Init.OversamplingMode = ENABLE;
 8000292:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8000294:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	05d2      	lsls	r2, r2, #23
 800029a:	6062      	str	r2, [r4, #4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800029c:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800029e:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = DISABLE;
 80002a0:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode = ENABLE;
 80002a2:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80002a4:	6463      	str	r3, [r4, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80002a6:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002a8:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002aa:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80002ac:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80002ae:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b0:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80002b2:	6125      	str	r5, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002b4:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80002b6:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80002b8:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002ba:	f000 fbc3 	bl	8000a44 <HAL_ADC_Init>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC_Init+0x5a>
  {
    Error_Handler();
 80002c2:	f000 fa01 	bl	80006c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002c6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002ca:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002cc:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80002ce:	9500      	str	r5, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002d2:	f000 fc8f 	bl	8000bf4 <HAL_ADC_ConfigChannel>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC_Init+0x72>
  {
    Error_Handler();
 80002da:	f000 f9f5 	bl	80006c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_ADC_Init+0xa4>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e0:	4669      	mov	r1, sp
 80002e2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80002e4:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e6:	f000 fc85 	bl	8000bf4 <HAL_ADC_ConfigChannel>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC_Init+0x86>
  {
    Error_Handler();
 80002ee:	f000 f9eb 	bl	80006c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_ADC_Init+0xa8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002f4:	4669      	mov	r1, sp
 80002f6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002f8:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fa:	f000 fc7b 	bl	8000bf4 <HAL_ADC_ConfigChannel>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 8000302:	f000 f9e1 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000306:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8000308:	20000078 	.word	0x20000078
 800030c:	40012400 	.word	0x40012400
 8000310:	04000002 	.word	0x04000002
 8000314:	48040000 	.word	0x48040000

08000318 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000318:	b510      	push	{r4, lr}
 800031a:	0004      	movs	r4, r0
 800031c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	2214      	movs	r2, #20
 8000320:	2100      	movs	r1, #0
 8000322:	a801      	add	r0, sp, #4
 8000324:	f001 fd9c 	bl	8001e60 <memset>
  if(adcHandle->Instance==ADC1)
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <HAL_ADC_MspInit+0x48>)
 800032a:	6822      	ldr	r2, [r4, #0]
 800032c:	429a      	cmp	r2, r3
 800032e:	d115      	bne.n	800035c <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_ADC_MspInit+0x4c>)
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800033a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	430a      	orrs	r2, r1
 8000346:	62da      	str	r2, [r3, #44]	; 0x2c
 8000348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034a:	400b      	ands	r3, r1
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000350:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000354:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000358:	f000 fcf0 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800035c:	b006      	add	sp, #24
 800035e:	bd10      	pop	{r4, pc}
 8000360:	40012400 	.word	0x40012400
 8000364:	40021000 	.word	0x40021000

08000368 <LL_IOP_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_IOP_GRP1_EnableClock+0x18>)
{
 800036a:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 800036c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800036e:	4302      	orrs	r2, r0
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000374:	4018      	ands	r0, r3
 8000376:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000378:	9b01      	ldr	r3, [sp, #4]
}
 800037a:	b002      	add	sp, #8
 800037c:	4770      	bx	lr
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40021000 	.word	0x40021000

08000384 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000386:	b089      	sub	sp, #36	; 0x24

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000388:	2400      	movs	r4, #0
 800038a:	466b      	mov	r3, sp
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	0021      	movs	r1, r4
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800038e:	71dc      	strb	r4, [r3, #7]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000390:	2218      	movs	r2, #24
 8000392:	a802      	add	r0, sp, #8
 8000394:	f001 fd64 	bl	8001e60 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000398:	2002      	movs	r0, #2
 800039a:	f7ff ffe5 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 800039e:	2004      	movs	r0, #4
 80003a0:	f7ff ffe2 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80003a4:	25a0      	movs	r5, #160	; 0xa0
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff ffde 	bl	8000368 <LL_IOP_GRP1_EnableClock>
 80003ac:	2308      	movs	r3, #8
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80003ae:	21f0      	movs	r1, #240	; 0xf0
 80003b0:	2610      	movs	r6, #16
 80003b2:	05ed      	lsls	r5, r5, #23
 80003b4:	62ab      	str	r3, [r5, #40]	; 0x28
 80003b6:	4b50      	ldr	r3, [pc, #320]	; (80004f8 <MX_GPIO_Init+0x174>)
 80003b8:	4850      	ldr	r0, [pc, #320]	; (80004fc <MX_GPIO_Init+0x178>)
 80003ba:	691a      	ldr	r2, [r3, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003bc:	4f50      	ldr	r7, [pc, #320]	; (8000500 <MX_GPIO_Init+0x17c>)
 80003be:	438a      	bics	r2, r1
 80003c0:	4332      	orrs	r2, r6
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4002      	ands	r2, r0
 80003c8:	2080      	movs	r0, #128	; 0x80
 80003ca:	0080      	lsls	r0, r0, #2
 80003cc:	4302      	orrs	r2, r0
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	4684      	mov	ip, r0
 80003d2:	4a4c      	ldr	r2, [pc, #304]	; (8000504 <MX_GPIO_Init+0x180>)
 80003d4:	6958      	ldr	r0, [r3, #20]
 80003d6:	4010      	ands	r0, r2
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	0192      	lsls	r2, r2, #6
 80003dc:	4302      	orrs	r2, r0
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	438a      	bics	r2, r1
 80003e4:	4332      	orrs	r2, r6
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	4b47      	ldr	r3, [pc, #284]	; (8000508 <MX_GPIO_Init+0x184>)
 80003ec:	4e47      	ldr	r6, [pc, #284]	; (800050c <MX_GPIO_Init+0x188>)
 80003ee:	68d9      	ldr	r1, [r3, #12]
 80003f0:	02d2      	lsls	r2, r2, #11
 80003f2:	4031      	ands	r1, r6
 80003f4:	430a      	orrs	r2, r1
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	4a45      	ldr	r2, [pc, #276]	; (8000510 <MX_GPIO_Init+0x18c>)
 80003fc:	0549      	lsls	r1, r1, #21
 80003fe:	68d0      	ldr	r0, [r2, #12]
 8000400:	4038      	ands	r0, r7
 8000402:	4301      	orrs	r1, r0
 8000404:	2080      	movs	r0, #128	; 0x80
 8000406:	60d1      	str	r1, [r2, #12]
 8000408:	68d1      	ldr	r1, [r2, #12]
 800040a:	05c0      	lsls	r0, r0, #23
 800040c:	0089      	lsls	r1, r1, #2
 800040e:	0889      	lsrs	r1, r1, #2
 8000410:	4308      	orrs	r0, r1
 8000412:	60d0      	str	r0, [r2, #12]
 8000414:	200c      	movs	r0, #12
 8000416:	68d9      	ldr	r1, [r3, #12]
 8000418:	4381      	bics	r1, r0
 800041a:	3808      	subs	r0, #8
 800041c:	4301      	orrs	r1, r0
 800041e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000420:	6819      	ldr	r1, [r3, #0]
  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000422:	4668      	mov	r0, sp
 8000424:	4031      	ands	r1, r6
 8000426:	6019      	str	r1, [r3, #0]
 8000428:	6811      	ldr	r1, [r2, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800042a:	2601      	movs	r6, #1
 800042c:	4039      	ands	r1, r7
 800042e:	6011      	str	r1, [r2, #0]
 8000430:	6811      	ldr	r1, [r2, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000432:	2702      	movs	r7, #2
 8000434:	0089      	lsls	r1, r1, #2
 8000436:	0889      	lsrs	r1, r1, #2
 8000438:	6011      	str	r1, [r2, #0]
 800043a:	210c      	movs	r1, #12
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	438a      	bics	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8000442:	4662      	mov	r2, ip
 8000444:	9200      	str	r2, [sp, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000446:	466a      	mov	r2, sp
 8000448:	8096      	strh	r6, [r2, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800044a:	7197      	strb	r7, [r2, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800044c:	f001 fb0c 	bl	8001a68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
  EXTI_InitStruct.LineCommand = ENABLE;
 8000450:	466a      	mov	r2, sp
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000452:	2380      	movs	r3, #128	; 0x80
  EXTI_InitStruct.LineCommand = ENABLE;
 8000454:	8096      	strh	r6, [r2, #4]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000456:	01db      	lsls	r3, r3, #7
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000458:	4668      	mov	r0, sp
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800045a:	9300      	str	r3, [sp, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800045c:	7197      	strb	r7, [r2, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800045e:	f001 fb03 	bl	8001a68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
  EXTI_InitStruct.LineCommand = ENABLE;
 8000462:	466a      	mov	r2, sp
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000464:	2380      	movs	r3, #128	; 0x80
  EXTI_InitStruct.LineCommand = ENABLE;
 8000466:	8096      	strh	r6, [r2, #4]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000468:	021b      	lsls	r3, r3, #8
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 800046a:	4668      	mov	r0, sp
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800046c:	9300      	str	r3, [sp, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800046e:	7197      	strb	r7, [r2, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000470:	f001 fafa 	bl	8001a68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
  EXTI_InitStruct.LineCommand = ENABLE;
 8000474:	466a      	mov	r2, sp
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000476:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8000478:	8096      	strh	r6, [r2, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800047a:	7197      	strb	r7, [r2, #6]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800047c:	9700      	str	r7, [sp, #0]
  LL_EXTI_Init(&EXTI_InitStruct);
 800047e:	f001 faf3 	bl	8001a68 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = TIP_ACTIVE_Pin;
 8000482:	2004      	movs	r0, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(TIP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000484:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = TIP_ACTIVE_Pin;
 8000486:	9002      	str	r0, [sp, #8]
  LL_GPIO_Init(TIP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000488:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800048a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800048c:	9403      	str	r4, [sp, #12]
  LL_GPIO_Init(TIP_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800048e:	f001 fb3b 	bl	8001b08 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OC_TEST_Pin;
 8000492:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(OC_TEST_GPIO_Port, &GPIO_InitStruct);
 8000494:	a902      	add	r1, sp, #8
 8000496:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = OC_TEST_Pin;
 8000498:	9302      	str	r3, [sp, #8]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800049a:	3701      	adds	r7, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800049c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800049e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004a2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004a4:	360f      	adds	r6, #15
  LL_GPIO_Init(OC_TEST_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f001 fb2f 	bl	8001b08 <LL_GPIO_Init>
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	a902      	add	r1, sp, #8
 80004ac:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004ae:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004b0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b2:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f001 fb28 	bl	8001b08 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80004b8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	a902      	add	r1, sp, #8
 80004bc:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80004be:	9302      	str	r3, [sp, #8]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80004c0:	3670      	adds	r6, #112	; 0x70
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004c2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004c4:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f001 fb1f 	bl	8001b08 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	a902      	add	r1, sp, #8
 80004cc:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80004ce:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004d0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d2:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f001 fb18 	bl	8001b08 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	21c1      	movs	r1, #193	; 0xc1
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_GPIO_Init+0x190>)
 80004dc:	0089      	lsls	r1, r1, #2
 80004de:	585a      	ldr	r2, [r3, r1]
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <MX_GPIO_Init+0x194>)
 80004e2:	4002      	ands	r2, r0
 80004e4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e6:	2220      	movs	r2, #32
 80004e8:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ea:	585a      	ldr	r2, [r3, r1]
 80004ec:	0212      	lsls	r2, r2, #8
 80004ee:	0a12      	lsrs	r2, r2, #8
 80004f0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f2:	601e      	str	r6, [r3, #0]
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
  NVIC_EnableIRQ(EXTI0_1_IRQn);
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 80004f4:	b009      	add	sp, #36	; 0x24
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	40010000 	.word	0x40010000
 80004fc:	fffff0ff 	.word	0xfffff0ff
 8000500:	cfffffff 	.word	0xcfffffff
 8000504:	ffff0fff 	.word	0xffff0fff
 8000508:	50000400 	.word	0x50000400
 800050c:	fff3ffff 	.word	0xfff3ffff
 8000510:	50000800 	.word	0x50000800
 8000514:	e000e100 	.word	0xe000e100
 8000518:	ffff00ff 	.word	0xffff00ff

0800051c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800051c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_I2C1_Init+0x50>)
 8000520:	4c13      	ldr	r4, [pc, #76]	; (8000570 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x00707CBB;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000522:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000524:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000528:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 800052a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000530:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000532:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000534:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000536:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000538:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800053c:	f000 fd8c 	bl	8001058 <HAL_I2C_Init>
 8000540:	2800      	cmp	r0, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000544:	f000 f8c0 	bl	80006c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000548:	2100      	movs	r1, #0
 800054a:	0020      	movs	r0, r4
 800054c:	f000 fe6c 	bl	8001228 <HAL_I2CEx_ConfigAnalogFilter>
 8000550:	2800      	cmp	r0, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000554:	f000 f8b8 	bl	80006c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000558:	2100      	movs	r1, #0
 800055a:	0020      	movs	r0, r4
 800055c:	f000 fe8a 	bl	8001274 <HAL_I2CEx_ConfigDigitalFilter>
 8000560:	2800      	cmp	r0, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 f8b0 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40005400 	.word	0x40005400
 8000570:	200000d4 	.word	0x200000d4
 8000574:	00707cbb 	.word	0x00707cbb

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b510      	push	{r4, lr}
 800057a:	0004      	movs	r4, r0
 800057c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	2214      	movs	r2, #20
 8000580:	2100      	movs	r1, #0
 8000582:	a801      	add	r0, sp, #4
 8000584:	f001 fc6c 	bl	8001e60 <memset>
  if(i2cHandle->Instance==I2C1)
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <HAL_I2C_MspInit+0x54>)
 800058a:	6822      	ldr	r2, [r4, #0]
 800058c:	429a      	cmp	r2, r3
 800058e:	d11b      	bne.n	80005c8 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	2301      	movs	r3, #1
 8000592:	4c0f      	ldr	r4, [pc, #60]	; (80005d0 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	431a      	orrs	r2, r3
 800059c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800059e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	401a      	ands	r2, r3
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005a8:	22c0      	movs	r2, #192	; 0xc0
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ae:	2212      	movs	r2, #18
 80005b0:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b2:	3a0f      	subs	r2, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f000 fbbf 	bl	8000d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80005c2:	039b      	lsls	r3, r3, #14
 80005c4:	4313      	orrs	r3, r2
 80005c6:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005c8:	b006      	add	sp, #24
 80005ca:	bd10      	pop	{r4, pc}
 80005cc:	40005400 	.word	0x40005400
 80005d0:	40021000 	.word	0x40021000

080005d4 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005d4:	2301      	movs	r3, #1
 80005d6:	492a      	ldr	r1, [pc, #168]	; (8000680 <SystemClock_Config+0xac>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b510      	push	{r4, lr}
 80005da:	680a      	ldr	r2, [r1, #0]
 80005dc:	439a      	bics	r2, r3
 80005de:	431a      	orrs	r2, r3
 80005e0:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e2:	680a      	ldr	r2, [r1, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80005e4:	421a      	tst	r2, r3
 80005e6:	d0fc      	beq.n	80005e2 <SystemClock_Config+0xe>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005e8:	4826      	ldr	r0, [pc, #152]	; (8000684 <SystemClock_Config+0xb0>)
 80005ea:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xb4>)
 80005ec:	6801      	ldr	r1, [r0, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80005ee:	4c27      	ldr	r4, [pc, #156]	; (800068c <SystemClock_Config+0xb8>)
 80005f0:	4011      	ands	r1, r2
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	6002      	str	r2, [r0, #0]
 80005fa:	6822      	ldr	r2, [r4, #0]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000600:	2304      	movs	r3, #4
 8000602:	6822      	ldr	r2, [r4, #0]
 8000604:	421a      	tst	r2, r3
 8000606:	d0fc      	beq.n	8000602 <SystemClock_Config+0x2e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000608:	6862      	ldr	r2, [r4, #4]
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0xbc>)
 800060c:	401a      	ands	r2, r3
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	015b      	lsls	r3, r3, #5
 8000612:	4313      	orrs	r3, r2
 8000614:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000616:	68e2      	ldr	r2, [r4, #12]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SystemClock_Config+0xc0>)
 800061a:	401a      	ands	r2, r3
 800061c:	2388      	movs	r3, #136	; 0x88
 800061e:	03db      	lsls	r3, r3, #15
 8000620:	4313      	orrs	r3, r2
 8000622:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	6822      	ldr	r2, [r4, #0]
 8000628:	045b      	lsls	r3, r3, #17
 800062a:	4313      	orrs	r3, r2
 800062c:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	049b      	lsls	r3, r3, #18
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	421a      	tst	r2, r3
 8000636:	d0fc      	beq.n	8000632 <SystemClock_Config+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	68e3      	ldr	r3, [r4, #12]
 800063c:	4393      	bics	r3, r2
 800063e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000640:	68e3      	ldr	r3, [r4, #12]
 8000642:	4a15      	ldr	r2, [pc, #84]	; (8000698 <SystemClock_Config+0xc4>)
 8000644:	4013      	ands	r3, r2
 8000646:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000648:	68e3      	ldr	r3, [r4, #12]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <SystemClock_Config+0xc8>)
 800064c:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800064e:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000650:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000652:	68e3      	ldr	r3, [r4, #12]
 8000654:	4313      	orrs	r3, r2
 8000656:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000658:	3209      	adds	r2, #9
 800065a:	68e3      	ldr	r3, [r4, #12]
 800065c:	4013      	ands	r3, r2
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800065e:	2b0c      	cmp	r3, #12
 8000660:	d1fb      	bne.n	800065a <SystemClock_Config+0x86>
  {

  }
  LL_SetSystemCoreClock(32000000);
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <SystemClock_Config+0xcc>)
 8000664:	f001 faa2 	bl	8001bac <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f979 	bl	8000960 <HAL_InitTick>
 800066e:	2800      	cmp	r0, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000672:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	e7fe      	b.n	8000674 <SystemClock_Config+0xa0>
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000676:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <SystemClock_Config+0xd0>)
 800067a:	4013      	ands	r3, r2
 800067c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800067e:	bd10      	pop	{r4, pc}
 8000680:	40022000 	.word	0x40022000
 8000684:	40007000 	.word	0x40007000
 8000688:	ffffe7ff 	.word	0xffffe7ff
 800068c:	40021000 	.word	0x40021000
 8000690:	ffffe0ff 	.word	0xffffe0ff
 8000694:	ff02ffff 	.word	0xff02ffff
 8000698:	fffff8ff 	.word	0xfffff8ff
 800069c:	ffffc7ff 	.word	0xffffc7ff
 80006a0:	01e84800 	.word	0x01e84800
 80006a4:	ffffcfff 	.word	0xffffcfff

080006a8 <main>:
{
 80006a8:	b510      	push	{r4, lr}
  HAL_Init();
 80006aa:	f000 f97d 	bl	80009a8 <HAL_Init>
  SystemClock_Config();
 80006ae:	f7ff ff91 	bl	80005d4 <SystemClock_Config>
  MX_GPIO_Init();
 80006b2:	f7ff fe67 	bl	8000384 <MX_GPIO_Init>
  MX_ADC_Init();
 80006b6:	f7ff fdd9 	bl	800026c <MX_ADC_Init>
  MX_I2C1_Init();
 80006ba:	f7ff ff2f 	bl	800051c <MX_I2C1_Init>
  MX_TIM2_Init();
 80006be:	f000 f8a1 	bl	8000804 <MX_TIM2_Init>
  user_main();
 80006c2:	f001 fb6d 	bl	8001da0 <user_main>
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0x1e>

080006c8 <Error_Handler>:
 80006c8:	b672      	cpsid	i
  while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x2>

080006cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	2201      	movs	r2, #1
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_MspInit+0x18>)
 80006d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006da:	0552      	lsls	r2, r2, #21
 80006dc:	430a      	orrs	r2, r1
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	4770      	bx	lr
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler>

080006ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler>

080006ec <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f2:	f000 f96d 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f6:	bd10      	pop	{r4, pc}

080006f8 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80006f8:	2202      	movs	r2, #2
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <EXTI0_1_IRQHandler+0x10>)
 80006fc:	6959      	ldr	r1, [r3, #20]
void EXTI0_1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80006fe:	4211      	tst	r1, r2
 8000700:	d000      	beq.n	8000704 <EXTI0_1_IRQHandler+0xc>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000702:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000704:	4770      	bx	lr
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40010400 	.word	0x40010400

0800070c <EXTI4_15_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <EXTI4_15_IRQHandler+0x28>)
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	6959      	ldr	r1, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000714:	4211      	tst	r1, r2
 8000716:	d000      	beq.n	800071a <EXTI4_15_IRQHandler+0xe>
  WRITE_REG(EXTI->PR, ExtiLine);
 8000718:	615a      	str	r2, [r3, #20]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	6959      	ldr	r1, [r3, #20]
 800071e:	01d2      	lsls	r2, r2, #7
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
    /* USER CODE BEGIN LL_EXTI_LINE_9 */

    /* USER CODE END LL_EXTI_LINE_9 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8000720:	4211      	tst	r1, r2
 8000722:	d000      	beq.n	8000726 <EXTI4_15_IRQHandler+0x1a>
  WRITE_REG(EXTI->PR, ExtiLine);
 8000724:	615a      	str	r2, [r3, #20]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	6959      	ldr	r1, [r3, #20]
 800072a:	0212      	lsls	r2, r2, #8
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800072c:	4211      	tst	r1, r2
 800072e:	d000      	beq.n	8000732 <EXTI4_15_IRQHandler+0x26>
  WRITE_REG(EXTI->PR, ExtiLine);
 8000730:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000732:	4770      	bx	lr
 8000734:	40010400 	.word	0x40010400

08000738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000738:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <TIM2_IRQHandler+0xc>)
 800073c:	f001 f8e4 	bl	8001908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000124 	.word	0x20000124

08000748 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	490b      	ldr	r1, [pc, #44]	; (8000778 <_sbrk+0x30>)
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <_sbrk+0x34>)
{
 800074c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	490b      	ldr	r1, [pc, #44]	; (8000780 <_sbrk+0x38>)
{
 8000752:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000754:	6808      	ldr	r0, [r1, #0]
 8000756:	2800      	cmp	r0, #0
 8000758:	d101      	bne.n	800075e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <_sbrk+0x3c>)
 800075c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	6808      	ldr	r0, [r1, #0]
 8000760:	18c3      	adds	r3, r0, r3
 8000762:	4293      	cmp	r3, r2
 8000764:	d906      	bls.n	8000774 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000766:	f001 fb83 	bl	8001e70 <__errno>
 800076a:	230c      	movs	r3, #12
 800076c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800076e:	2001      	movs	r0, #1
 8000770:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000772:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000774:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000776:	e7fc      	b.n	8000772 <_sbrk+0x2a>
 8000778:	00000200 	.word	0x00000200
 800077c:	20000800 	.word	0x20000800
 8000780:	20000120 	.word	0x20000120
 8000784:	200002c8 	.word	0x200002c8

08000788 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	4770      	bx	lr
	...

0800078c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	6802      	ldr	r2, [r0, #0]
{
 8000790:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM2)
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	429a      	cmp	r2, r3
 8000796:	d10c      	bne.n	80007b2 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000798:	2301      	movs	r3, #1
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_TIM_Base_MspInit+0x28>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800079c:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	0011      	movs	r1, r2
 80007a8:	f000 fa78 	bl	8000c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f000 fa9f 	bl	8000cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007b2:	bd10      	pop	{r4, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007b8:	b510      	push	{r4, lr}
 80007ba:	0004      	movs	r4, r0
 80007bc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	2214      	movs	r2, #20
 80007c0:	2100      	movs	r1, #0
 80007c2:	a801      	add	r0, sp, #4
 80007c4:	f001 fb4c 	bl	8001e60 <memset>
  if(timHandle->Instance==TIM2)
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d113      	bne.n	80007fa <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2101      	movs	r1, #1
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	430a      	orrs	r2, r1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	400b      	ands	r3, r1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e8:	2320      	movs	r3, #32
 80007ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	3b1e      	subs	r3, #30
 80007ee:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80007f2:	3303      	adds	r3, #3
 80007f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f000 faa1 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007fa:	b006      	add	sp, #24
 80007fc:	bd10      	pop	{r4, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <MX_TIM2_Init>:
{
 8000804:	b510      	push	{r4, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000808:	2210      	movs	r2, #16
 800080a:	2100      	movs	r1, #0
 800080c:	a802      	add	r0, sp, #8
 800080e:	f001 fb27 	bl	8001e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	2208      	movs	r2, #8
 8000814:	2100      	movs	r1, #0
 8000816:	4668      	mov	r0, sp
 8000818:	f001 fb22 	bl	8001e60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081c:	2210      	movs	r2, #16
 800081e:	2100      	movs	r1, #0
 8000820:	a806      	add	r0, sp, #24
 8000822:	f001 fb1d 	bl	8001e60 <memset>
  htim2.Instance = TIM2;
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	4c2b      	ldr	r4, [pc, #172]	; (80008d8 <MX_TIM2_Init+0xd4>)
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 32;
 800082e:	2320      	movs	r3, #32
  htim2.Init.Period = 1000;
 8000830:	22fa      	movs	r2, #250	; 0xfa
  htim2.Init.Prescaler = 32;
 8000832:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	2300      	movs	r3, #0
  htim2.Init.Period = 1000;
 8000836:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000838:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 1000;
 800083c:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000842:	f000 fd9e 	bl	8001382 <HAL_TIM_Base_Init>
 8000846:	2800      	cmp	r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x4a>
    Error_Handler();
 800084a:	f7ff ff3d 	bl	80006c8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000850:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000852:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000854:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000858:	f000 ffac 	bl	80017b4 <HAL_TIM_ConfigClockSource>
 800085c:	2800      	cmp	r0, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x60>
    Error_Handler();
 8000860:	f7ff ff32 	bl	80006c8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000864:	0020      	movs	r0, r4
 8000866:	f000 fe94 	bl	8001592 <HAL_TIM_PWM_Init>
 800086a:	2800      	cmp	r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x6e>
    Error_Handler();
 800086e:	f7ff ff2b 	bl	80006c8 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000872:	0020      	movs	r0, r4
 8000874:	f000 fdcf 	bl	8001416 <HAL_TIM_OC_Init>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x7c>
    Error_Handler();
 800087c:	f7ff ff24 	bl	80006c8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000882:	4669      	mov	r1, sp
 8000884:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088a:	f001 f8c5 	bl	8001a18 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	2800      	cmp	r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x92>
    Error_Handler();
 8000892:	f7ff ff19 	bl	80006c8 <Error_Handler>
  sConfigOC.Pulse = 0;
 8000896:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089a:	0020      	movs	r0, r4
 800089c:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 80008a0:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	9208      	str	r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a4:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a6:	f000 fef5 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xae>
    Error_Handler();
 80008ae:	f7ff ff0b 	bl	80006c8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80008b2:	2310      	movs	r3, #16
 80008b4:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 500;
 80008b6:	33e5      	adds	r3, #229	; 0xe5
 80008b8:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ba:	2204      	movs	r2, #4
 80008bc:	0020      	movs	r0, r4
 80008be:	a906      	add	r1, sp, #24
  sConfigOC.Pulse = 500;
 80008c0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c2:	f000 fe8f 	bl	80015e4 <HAL_TIM_OC_ConfigChannel>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0xca>
    Error_Handler();
 80008ca:	f7ff fefd 	bl	80006c8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80008ce:	0020      	movs	r0, r4
 80008d0:	f7ff ff72 	bl	80007b8 <HAL_TIM_MspPostInit>
}
 80008d4:	b00a      	add	sp, #40	; 0x28
 80008d6:	bd10      	pop	{r4, pc}
 80008d8:	20000124 	.word	0x20000124

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <LoopForever+0x6>)
    LDR R1, [R0]
 80008e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <LoopForever+0xa>)
    CMP R1, R2
 80008e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008ea:	d105      	bne.n	80008f8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008ee:	4913      	ldr	r1, [pc, #76]	; (800093c <LoopForever+0x12>)
    STR R1, [R0]
 80008f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008f4:	4913      	ldr	r1, [pc, #76]	; (8000944 <LoopForever+0x1a>)
    STR R1, [R0]
 80008f6:	6001      	str	r1, [r0, #0]

080008f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <LoopForever+0x1e>)
  ldr r1, =_edata
 80008fa:	4914      	ldr	r1, [pc, #80]	; (800094c <LoopForever+0x22>)
  ldr r2, =_sidata
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <LoopForever+0x26>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000910:	4c11      	ldr	r4, [pc, #68]	; (8000958 <LoopForever+0x2e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800091e:	f7ff ff33 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000922:	f001 faab 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff febf 	bl	80006a8 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
   ldr   r0, =_estack
 800092c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000930:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000934:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000938:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800093c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000940:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000944:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000950:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 8000954:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000958:	200002c4 	.word	0x200002c4

0800095c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_COMP_IRQHandler>
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	20fa      	movs	r0, #250	; 0xfa
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_InitTick+0x3c>)
 8000968:	0080      	lsls	r0, r0, #2
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	f7ff fbf2 	bl	8000154 <__udivsi3>
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <HAL_InitTick+0x40>)
 8000972:	0001      	movs	r1, r0
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	f7ff fbed 	bl	8000154 <__udivsi3>
 800097a:	f000 f9c5 	bl	8000d08 <HAL_SYSTICK_Config>
 800097e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000980:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000982:	2c00      	cmp	r4, #0
 8000984:	d109      	bne.n	800099a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	2d03      	cmp	r5, #3
 8000988:	d807      	bhi.n	800099a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	3802      	subs	r0, #2
 800098c:	0022      	movs	r2, r4
 800098e:	0029      	movs	r1, r5
 8000990:	f000 f984 	bl	8000c9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	0020      	movs	r0, r4
 8000996:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_InitTick+0x44>)
 8000998:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	20000004 	.word	0x20000004
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_Init+0x24>)
{
 80009ac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ae:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b6:	f7ff ffd3 	bl	8000960 <HAL_InitTick>
 80009ba:	1e04      	subs	r4, r0, #0
 80009bc:	d103      	bne.n	80009c6 <HAL_Init+0x1e>
    HAL_MspInit();
 80009be:	f7ff fe85 	bl	80006cc <HAL_MspInit>
}
 80009c2:	0020      	movs	r0, r4
 80009c4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80009c6:	2401      	movs	r4, #1
 80009c8:	e7fb      	b.n	80009c2 <HAL_Init+0x1a>
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x10>)
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_IncTick+0x14>)
 80009d4:	6811      	ldr	r1, [r2, #0]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	185b      	adds	r3, r3, r1
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	4770      	bx	lr
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000164 	.word	0x20000164
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <HAL_GetTick+0x8>)
 80009ea:	6818      	ldr	r0, [r3, #0]
}
 80009ec:	4770      	bx	lr
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000164 	.word	0x20000164

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff6 	bl	80009e8 <HAL_GetTick>
 80009fc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fe:	1c63      	adds	r3, r4, #1
 8000a00:	d002      	beq.n	8000a08 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_Delay+0x20>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	1b40      	subs	r0, r0, r5
 8000a0e:	42a0      	cmp	r0, r4
 8000a10:	d3fa      	bcc.n	8000a08 <HAL_Delay+0x14>
  {
  }
}
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	20000004 	.word	0x20000004

08000a18 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <ADC_DelayMicroSecond+0x24>)
{
 8000a1a:	b513      	push	{r0, r1, r4, lr}
 8000a1c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <ADC_DelayMicroSecond+0x28>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	f7ff fb97 	bl	8000154 <__udivsi3>
 8000a26:	4344      	muls	r4, r0
 8000a28:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d100      	bne.n	8000a32 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8000a30:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8000a32:	9b01      	ldr	r3, [sp, #4]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	e7f7      	b.n	8000a2a <ADC_DelayMicroSecond+0x12>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	000f4240 	.word	0x000f4240

08000a44 <HAL_ADC_Init>:
{
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d018      	beq.n	8000a80 <HAL_ADC_Init+0x3c>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d106      	bne.n	8000a62 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000a54:	0022      	movs	r2, r4
 8000a56:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000a58:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8000a5a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000a5c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000a5e:	f7ff fc5b 	bl	8000318 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a64:	06db      	lsls	r3, r3, #27
 8000a66:	d403      	bmi.n	8000a70 <HAL_ADC_Init+0x2c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a6c:	0752      	lsls	r2, r2, #29
 8000a6e:	d508      	bpl.n	8000a82 <HAL_ADC_Init+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a70:	2310      	movs	r3, #16
 8000a72:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000a74:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	3450      	adds	r4, #80	; 0x50
 8000a7e:	7023      	strb	r3, [r4, #0]
}
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8000a82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000a84:	4a55      	ldr	r2, [pc, #340]	; (8000bdc <HAL_ADC_Init+0x198>)
 8000a86:	4011      	ands	r1, r2
 8000a88:	3206      	adds	r2, #6
 8000a8a:	32ff      	adds	r2, #255	; 0xff
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a90:	2203      	movs	r2, #3
 8000a92:	6899      	ldr	r1, [r3, #8]
 8000a94:	4011      	ands	r1, r2
 8000a96:	4a52      	ldr	r2, [pc, #328]	; (8000be0 <HAL_ADC_Init+0x19c>)
 8000a98:	2901      	cmp	r1, #1
 8000a9a:	d102      	bne.n	8000aa2 <HAL_ADC_Init+0x5e>
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	4208      	tst	r0, r1
 8000aa0:	d119      	bne.n	8000ad6 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000aa2:	2580      	movs	r5, #128	; 0x80
 8000aa4:	6861      	ldr	r1, [r4, #4]
 8000aa6:	05ed      	lsls	r5, r5, #23
 8000aa8:	0048      	lsls	r0, r1, #1
 8000aaa:	0840      	lsrs	r0, r0, #1
 8000aac:	42a8      	cmp	r0, r5
 8000aae:	d003      	beq.n	8000ab8 <HAL_ADC_Init+0x74>
 8000ab0:	2080      	movs	r0, #128	; 0x80
 8000ab2:	0600      	lsls	r0, r0, #24
 8000ab4:	4281      	cmp	r1, r0
 8000ab6:	d176      	bne.n	8000ba6 <HAL_ADC_Init+0x162>
 8000ab8:	6918      	ldr	r0, [r3, #16]
 8000aba:	0080      	lsls	r0, r0, #2
 8000abc:	0880      	lsrs	r0, r0, #2
 8000abe:	6118      	str	r0, [r3, #16]
 8000ac0:	6918      	ldr	r0, [r3, #16]
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000ac6:	2018      	movs	r0, #24
 8000ac8:	68d9      	ldr	r1, [r3, #12]
 8000aca:	4381      	bics	r1, r0
 8000acc:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000ace:	68d9      	ldr	r1, [r3, #12]
 8000ad0:	68a0      	ldr	r0, [r4, #8]
 8000ad2:	4301      	orrs	r1, r0
 8000ad4:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ad6:	6811      	ldr	r1, [r2, #0]
 8000ad8:	4842      	ldr	r0, [pc, #264]	; (8000be4 <HAL_ADC_Init+0x1a0>)
 8000ada:	4001      	ands	r1, r0
 8000adc:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ae0:	6810      	ldr	r0, [r2, #0]
 8000ae2:	0649      	lsls	r1, r1, #25
 8000ae4:	4301      	orrs	r1, r0
 8000ae6:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	6899      	ldr	r1, [r3, #8]
 8000aec:	0552      	lsls	r2, r2, #21
 8000aee:	4211      	tst	r1, r2
 8000af0:	d102      	bne.n	8000af8 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000af2:	6899      	ldr	r1, [r3, #8]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000af8:	68da      	ldr	r2, [r3, #12]
 8000afa:	493b      	ldr	r1, [pc, #236]	; (8000be8 <HAL_ADC_Init+0x1a4>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000afc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000afe:	400a      	ands	r2, r1
 8000b00:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b02:	1c62      	adds	r2, r4, #1
 8000b04:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b06:	68e2      	ldr	r2, [r4, #12]
 8000b08:	68d8      	ldr	r0, [r3, #12]
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000b0e:	69a0      	ldr	r0, [r4, #24]
 8000b10:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b12:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000b14:	69e0      	ldr	r0, [r4, #28]
 8000b16:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b18:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b1a:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b1c:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000b1e:	0020      	movs	r0, r4
 8000b20:	302c      	adds	r0, #44	; 0x2c
 8000b22:	7800      	ldrb	r0, [r0, #0]
 8000b24:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b26:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000b28:	6920      	ldr	r0, [r4, #16]
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	4245      	negs	r5, r0
 8000b2e:	4168      	adcs	r0, r5
 8000b30:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b32:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b34:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b36:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b3a:	30ff      	adds	r0, #255	; 0xff
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	d004      	beq.n	8000b4a <HAL_ADC_Init+0x106>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000b40:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000b42:	68d8      	ldr	r0, [r3, #12]
 8000b44:	432a      	orrs	r2, r5
 8000b46:	4302      	orrs	r2, r0
 8000b48:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b4a:	1ca2      	adds	r2, r4, #2
 8000b4c:	7fd2      	ldrb	r2, [r2, #31]
 8000b4e:	2a01      	cmp	r2, #1
 8000b50:	d106      	bne.n	8000b60 <HAL_ADC_Init+0x11c>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d133      	bne.n	8000bbe <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b62:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b64:	2901      	cmp	r1, #1
 8000b66:	d132      	bne.n	8000bce <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b68:	4820      	ldr	r0, [pc, #128]	; (8000bec <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b6a:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000b6c:	4002      	ands	r2, r0
 8000b6e:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b72:	6918      	ldr	r0, [r3, #16]
 8000b74:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000b76:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000b78:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000b7a:	4302      	orrs	r2, r0
 8000b7c:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	4311      	orrs	r1, r2
 8000b82:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b84:	2107      	movs	r1, #7
 8000b86:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000b88:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000b92:	430a      	orrs	r2, r1
 8000b94:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000b96:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000b98:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000b9a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b9c:	439a      	bics	r2, r3
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000ba4:	e76c      	b.n	8000a80 <HAL_ADC_Init+0x3c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000ba6:	6918      	ldr	r0, [r3, #16]
 8000ba8:	4d11      	ldr	r5, [pc, #68]	; (8000bf0 <HAL_ADC_Init+0x1ac>)
 8000baa:	0080      	lsls	r0, r0, #2
 8000bac:	0880      	lsrs	r0, r0, #2
 8000bae:	6118      	str	r0, [r3, #16]
 8000bb0:	6810      	ldr	r0, [r2, #0]
 8000bb2:	4028      	ands	r0, r5
 8000bb4:	6010      	str	r0, [r2, #0]
 8000bb6:	6810      	ldr	r0, [r2, #0]
 8000bb8:	4301      	orrs	r1, r0
 8000bba:	6011      	str	r1, [r2, #0]
 8000bbc:	e783      	b.n	8000ac6 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bc2:	4301      	orrs	r1, r0
 8000bc4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	65a2      	str	r2, [r4, #88]	; 0x58
 8000bcc:	e7c8      	b.n	8000b60 <HAL_ADC_Init+0x11c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000bce:	2101      	movs	r1, #1
 8000bd0:	420a      	tst	r2, r1
 8000bd2:	d0d7      	beq.n	8000b84 <HAL_ADC_Init+0x140>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	e7d3      	b.n	8000b84 <HAL_ADC_Init+0x140>
 8000bdc:	fffffefd 	.word	0xfffffefd
 8000be0:	40012708 	.word	0x40012708
 8000be4:	fdffffff 	.word	0xfdffffff
 8000be8:	fffe0219 	.word	0xfffe0219
 8000bec:	fffffc03 	.word	0xfffffc03
 8000bf0:	ffc3ffff 	.word	0xffc3ffff

08000bf4 <HAL_ADC_ConfigChannel>:
{
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8000bf6:	0004      	movs	r4, r0
 8000bf8:	3450      	adds	r4, #80	; 0x50
 8000bfa:	7822      	ldrb	r2, [r4, #0]
{
 8000bfc:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	2a01      	cmp	r2, #1
 8000c02:	d00b      	beq.n	8000c1c <HAL_ADC_ConfigChannel+0x28>
 8000c04:	3801      	subs	r0, #1
 8000c06:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	6895      	ldr	r5, [r2, #8]
 8000c0c:	076d      	lsls	r5, r5, #29
 8000c0e:	d506      	bpl.n	8000c1e <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c10:	2220      	movs	r2, #32
 8000c12:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000c14:	430a      	orrs	r2, r1
 8000c16:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	7023      	strb	r3, [r4, #0]
}
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	2680      	movs	r6, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c22:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8000c24:	4f19      	ldr	r7, [pc, #100]	; (8000c8c <HAL_ADC_ConfigChannel+0x98>)
 8000c26:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c28:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c2a:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c2c:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c2e:	402b      	ands	r3, r5
 8000c30:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8000c32:	42b9      	cmp	r1, r7
 8000c34:	d018      	beq.n	8000c68 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000c38:	4301      	orrs	r1, r0
 8000c3a:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_ADC_ConfigChannel+0x9c>)
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000c48:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000c4e:	f7ff fee3 	bl	8000a18 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000c52:	4235      	tst	r5, r6
 8000c54:	d005      	beq.n	8000c62 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_ADC_ConfigChannel+0x9c>)
 8000c5a:	03db      	lsls	r3, r3, #15
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000c60:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000c62:	2000      	movs	r0, #0
 8000c64:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8000c66:	e7d9      	b.n	8000c1c <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000c68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000c6a:	4381      	bics	r1, r0
 8000c6c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_ADC_ConfigChannel+0x9c>)
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <HAL_ADC_ConfigChannel+0xa0>)
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	400b      	ands	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000c7c:	4235      	tst	r5, r6
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_ADC_ConfigChannel+0x9c>)
 8000c82:	4905      	ldr	r1, [pc, #20]	; (8000c98 <HAL_ADC_ConfigChannel+0xa4>)
 8000c84:	6813      	ldr	r3, [r2, #0]
 8000c86:	400b      	ands	r3, r1
 8000c88:	e7ea      	b.n	8000c60 <HAL_ADC_ConfigChannel+0x6c>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	00001001 	.word	0x00001001
 8000c90:	40012708 	.word	0x40012708
 8000c94:	ff7fffff 	.word	0xff7fffff
 8000c98:	ffbfffff 	.word	0xffbfffff

08000c9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9c:	b530      	push	{r4, r5, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9e:	25ff      	movs	r5, #255	; 0xff
 8000ca0:	2403      	movs	r4, #3
 8000ca2:	002a      	movs	r2, r5
 8000ca4:	4004      	ands	r4, r0
 8000ca6:	00e4      	lsls	r4, r4, #3
 8000ca8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	0189      	lsls	r1, r1, #6
 8000cac:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cae:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	db0a      	blt.n	8000cce <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	24c0      	movs	r4, #192	; 0xc0
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_NVIC_SetPriority+0x4c>)
 8000cbc:	0880      	lsrs	r0, r0, #2
 8000cbe:	0080      	lsls	r0, r0, #2
 8000cc0:	18c0      	adds	r0, r0, r3
 8000cc2:	00a4      	lsls	r4, r4, #2
 8000cc4:	5903      	ldr	r3, [r0, r4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ccc:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cce:	200f      	movs	r0, #15
 8000cd0:	4003      	ands	r3, r0
 8000cd2:	3b08      	subs	r3, #8
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_NVIC_SetPriority+0x50>)
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	181b      	adds	r3, r3, r0
 8000cdc:	69d8      	ldr	r0, [r3, #28]
 8000cde:	4002      	ands	r2, r0
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	61da      	str	r2, [r3, #28]
 8000ce4:	e7f2      	b.n	8000ccc <HAL_NVIC_SetPriority+0x30>
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	db05      	blt.n	8000d00 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf4:	231f      	movs	r3, #31
 8000cf6:	4018      	ands	r0, r3
 8000cf8:	3b1e      	subs	r3, #30
 8000cfa:	4083      	lsls	r3, r0
 8000cfc:	4a01      	ldr	r2, [pc, #4]	; (8000d04 <HAL_NVIC_EnableIRQ+0x14>)
 8000cfe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d00:	4770      	bx	lr
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	1e43      	subs	r3, r0, #1
 8000d0c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d20d      	bcs.n	8000d30 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	6a03      	ldr	r3, [r0, #32]
 8000d1e:	0609      	lsls	r1, r1, #24
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d30:	4770      	bx	lr
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	e000e010 	.word	0xe000e010
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000d3c:	2300      	movs	r3, #0
{
 8000d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d40:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d42:	680a      	ldr	r2, [r1, #0]
 8000d44:	0014      	movs	r4, r2
 8000d46:	40dc      	lsrs	r4, r3
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x12>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000d4a:	b005      	add	sp, #20
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d4e:	2501      	movs	r5, #1
 8000d50:	0014      	movs	r4, r2
 8000d52:	409d      	lsls	r5, r3
 8000d54:	402c      	ands	r4, r5
 8000d56:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8000d58:	422a      	tst	r2, r5
 8000d5a:	d100      	bne.n	8000d5e <HAL_GPIO_Init+0x22>
 8000d5c:	e090      	b.n	8000e80 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d5e:	684a      	ldr	r2, [r1, #4]
 8000d60:	005f      	lsls	r7, r3, #1
 8000d62:	4694      	mov	ip, r2
 8000d64:	2203      	movs	r2, #3
 8000d66:	4664      	mov	r4, ip
 8000d68:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d6a:	2403      	movs	r4, #3
 8000d6c:	40bc      	lsls	r4, r7
 8000d6e:	43e4      	mvns	r4, r4
 8000d70:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d72:	1e54      	subs	r4, r2, #1
 8000d74:	2c01      	cmp	r4, #1
 8000d76:	d82e      	bhi.n	8000dd6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000d78:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d7a:	9c01      	ldr	r4, [sp, #4]
 8000d7c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7e:	68cc      	ldr	r4, [r1, #12]
 8000d80:	40bc      	lsls	r4, r7
 8000d82:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d84:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d86:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d88:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	43ac      	bics	r4, r5
 8000d8c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8e:	4664      	mov	r4, ip
 8000d90:	0924      	lsrs	r4, r4, #4
 8000d92:	4034      	ands	r4, r6
 8000d94:	409c      	lsls	r4, r3
 8000d96:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d98:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d9a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d9c:	9c01      	ldr	r4, [sp, #4]
 8000d9e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	688c      	ldr	r4, [r1, #8]
 8000da2:	40bc      	lsls	r4, r7
 8000da4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000da6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	2a02      	cmp	r2, #2
 8000daa:	d116      	bne.n	8000dda <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dac:	2507      	movs	r5, #7
 8000dae:	260f      	movs	r6, #15
 8000db0:	401d      	ands	r5, r3
 8000db2:	00ad      	lsls	r5, r5, #2
 8000db4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000db6:	08dc      	lsrs	r4, r3, #3
 8000db8:	00a4      	lsls	r4, r4, #2
 8000dba:	1904      	adds	r4, r0, r4
 8000dbc:	9402      	str	r4, [sp, #8]
 8000dbe:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc0:	9603      	str	r6, [sp, #12]
 8000dc2:	0026      	movs	r6, r4
 8000dc4:	9c03      	ldr	r4, [sp, #12]
 8000dc6:	43a6      	bics	r6, r4
 8000dc8:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dca:	690e      	ldr	r6, [r1, #16]
 8000dcc:	40ae      	lsls	r6, r5
 8000dce:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000dd0:	9c02      	ldr	r4, [sp, #8]
 8000dd2:	6226      	str	r6, [r4, #32]
 8000dd4:	e001      	b.n	8000dda <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	2a03      	cmp	r2, #3
 8000dd8:	d1df      	bne.n	8000d9a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dda:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000ddc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dde:	9d01      	ldr	r5, [sp, #4]
 8000de0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8000de6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de8:	4662      	mov	r2, ip
 8000dea:	02a4      	lsls	r4, r4, #10
 8000dec:	4222      	tst	r2, r4
 8000dee:	d047      	beq.n	8000e80 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df0:	2501      	movs	r5, #1
 8000df2:	4c24      	ldr	r4, [pc, #144]	; (8000e84 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000df4:	27a0      	movs	r7, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000df8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <HAL_GPIO_Init+0x14c>)
 8000e00:	089c      	lsrs	r4, r3, #2
 8000e02:	00a4      	lsls	r4, r4, #2
 8000e04:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e06:	220f      	movs	r2, #15
 8000e08:	3502      	adds	r5, #2
 8000e0a:	401d      	ands	r5, r3
 8000e0c:	00ad      	lsls	r5, r5, #2
 8000e0e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e10:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e12:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e14:	2200      	movs	r2, #0
 8000e16:	42b8      	cmp	r0, r7
 8000e18:	d008      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
 8000e1a:	4f1c      	ldr	r7, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x150>)
 8000e1c:	3201      	adds	r2, #1
 8000e1e:	42b8      	cmp	r0, r7
 8000e20:	d004      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
 8000e22:	4f1b      	ldr	r7, [pc, #108]	; (8000e90 <HAL_GPIO_Init+0x154>)
 8000e24:	3201      	adds	r2, #1
 8000e26:	42b8      	cmp	r0, r7
 8000e28:	d000      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
 8000e2a:	3204      	adds	r2, #4
 8000e2c:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e2e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e30:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e32:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000e36:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000e38:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000e3a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000e3e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e40:	03ff      	lsls	r7, r7, #15
 8000e42:	d401      	bmi.n	8000e48 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8000e44:	0035      	movs	r5, r6
 8000e46:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e48:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000e4a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000e4c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000e4e:	9d00      	ldr	r5, [sp, #0]
 8000e50:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e52:	03bf      	lsls	r7, r7, #14
 8000e54:	d401      	bmi.n	8000e5a <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8000e56:	0035      	movs	r5, r6
 8000e58:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000e5c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000e5e:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000e60:	9d00      	ldr	r5, [sp, #0]
 8000e62:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e64:	02ff      	lsls	r7, r7, #11
 8000e66:	d401      	bmi.n	8000e6c <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8000e68:	0035      	movs	r5, r6
 8000e6a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e6c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000e6e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000e70:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000e72:	9e00      	ldr	r6, [sp, #0]
 8000e74:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e76:	02bf      	lsls	r7, r7, #10
 8000e78:	d401      	bmi.n	8000e7e <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	4025      	ands	r5, r4
 8000e7c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000e7e:	60d6      	str	r6, [r2, #12]
    position++;
 8000e80:	3301      	adds	r3, #1
 8000e82:	e75e      	b.n	8000d42 <HAL_GPIO_Init+0x6>
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	50000400 	.word	0x50000400
 8000e90:	50000800 	.word	0x50000800
 8000e94:	40010400 	.word	0x40010400

08000e98 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e98:	6803      	ldr	r3, [r0, #0]
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	0792      	lsls	r2, r2, #30
 8000e9e:	d501      	bpl.n	8000ea4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6999      	ldr	r1, [r3, #24]
 8000ea8:	4211      	tst	r1, r2
 8000eaa:	d102      	bne.n	8000eb2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000eac:	6999      	ldr	r1, [r3, #24]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	619a      	str	r2, [r3, #24]
  }
}
 8000eb2:	4770      	bx	lr

08000eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8000eb8:	0412      	lsls	r2, r2, #16
 8000eba:	6800      	ldr	r0, [r0, #0]
 8000ebc:	4322      	orrs	r2, r4
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <I2C_TransferConfig+0x24>)
 8000ec2:	6845      	ldr	r5, [r0, #4]
 8000ec4:	0d64      	lsrs	r4, r4, #21
 8000ec6:	0589      	lsls	r1, r1, #22
 8000ec8:	0d89      	lsrs	r1, r1, #22
 8000eca:	4323      	orrs	r3, r4
 8000ecc:	439d      	bics	r5, r3
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	432a      	orrs	r2, r5
 8000ed2:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8000ed4:	bd30      	pop	{r4, r5, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	03ff63ff 	.word	0x03ff63ff

08000edc <I2C_IsAcknowledgeFailed>:
{
 8000edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ede:	6803      	ldr	r3, [r0, #0]
{
 8000ee0:	9201      	str	r2, [sp, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ee2:	699a      	ldr	r2, [r3, #24]
{
 8000ee4:	0004      	movs	r4, r0
 8000ee6:	000e      	movs	r6, r1
  return HAL_OK;
 8000ee8:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000eea:	06d2      	lsls	r2, r2, #27
 8000eec:	d536      	bpl.n	8000f5c <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	0192      	lsls	r2, r2, #6
 8000ef2:	d404      	bmi.n	8000efe <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	01d2      	lsls	r2, r2, #7
 8000efa:	430a      	orrs	r2, r1
 8000efc:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000efe:	2720      	movs	r7, #32
 8000f00:	6825      	ldr	r5, [r4, #0]
 8000f02:	69ab      	ldr	r3, [r5, #24]
 8000f04:	423b      	tst	r3, r7
 8000f06:	d011      	beq.n	8000f2c <I2C_IsAcknowledgeFailed+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f08:	2310      	movs	r3, #16
    I2C_Flush_TXDR(hi2c);
 8000f0a:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f0c:	61eb      	str	r3, [r5, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f0e:	61ef      	str	r7, [r5, #28]
    I2C_Flush_TXDR(hi2c);
 8000f10:	f7ff ffc2 	bl	8000e98 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000f14:	686b      	ldr	r3, [r5, #4]
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <I2C_IsAcknowledgeFailed+0x84>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f20:	4313      	orrs	r3, r2
 8000f22:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000f24:	0023      	movs	r3, r4
 8000f26:	3341      	adds	r3, #65	; 0x41
 8000f28:	701f      	strb	r7, [r3, #0]
 8000f2a:	e010      	b.n	8000f4e <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8000f2c:	1c73      	adds	r3, r6, #1
 8000f2e:	d0e8      	beq.n	8000f02 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f30:	f7ff fd5a 	bl	80009e8 <HAL_GetTick>
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	1ac0      	subs	r0, r0, r3
 8000f38:	4286      	cmp	r6, r0
 8000f3a:	d301      	bcc.n	8000f40 <I2C_IsAcknowledgeFailed+0x64>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d1df      	bne.n	8000f00 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f40:	2220      	movs	r2, #32
 8000f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f48:	0023      	movs	r3, r4
 8000f4a:	3341      	adds	r3, #65	; 0x41
 8000f4c:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4e:	0022      	movs	r2, r4
 8000f50:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f54:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000f56:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f58:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8000f5a:	7023      	strb	r3, [r4, #0]
}
 8000f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	fe00e800 	.word	0xfe00e800

08000f64 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	0004      	movs	r4, r0
 8000f68:	000d      	movs	r5, r1
 8000f6a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f6c:	2702      	movs	r7, #2
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	423b      	tst	r3, r7
 8000f74:	d001      	beq.n	8000f7a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f76:	2000      	movs	r0, #0
}
 8000f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f7a:	0032      	movs	r2, r6
 8000f7c:	0029      	movs	r1, r5
 8000f7e:	0020      	movs	r0, r4
 8000f80:	f7ff ffac 	bl	8000edc <I2C_IsAcknowledgeFailed>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d115      	bne.n	8000fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000f88:	1c6b      	adds	r3, r5, #1
 8000f8a:	d0f0      	beq.n	8000f6e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f8c:	f7ff fd2c 	bl	80009e8 <HAL_GetTick>
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	42a8      	cmp	r0, r5
 8000f94:	d801      	bhi.n	8000f9a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d1e9      	bne.n	8000f6e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000fa2:	0023      	movs	r3, r4
 8000fa4:	3341      	adds	r3, #65	; 0x41
 8000fa6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa8:	0022      	movs	r2, r4
 8000faa:	2300      	movs	r3, #0
 8000fac:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8000fae:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb0:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000fb2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	e7df      	b.n	8000f78 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000fb8 <I2C_WaitOnFlagUntilTimeout>:
{
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	0004      	movs	r4, r0
 8000fbc:	000e      	movs	r6, r1
 8000fbe:	0017      	movs	r7, r2
 8000fc0:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	6993      	ldr	r3, [r2, #24]
 8000fc6:	4033      	ands	r3, r6
 8000fc8:	1b9b      	subs	r3, r3, r6
 8000fca:	4259      	negs	r1, r3
 8000fcc:	414b      	adcs	r3, r1
 8000fce:	42bb      	cmp	r3, r7
 8000fd0:	d001      	beq.n	8000fd6 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	e017      	b.n	8001006 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000fd6:	1c6b      	adds	r3, r5, #1
 8000fd8:	d0f4      	beq.n	8000fc4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fda:	f7ff fd05 	bl	80009e8 <HAL_GetTick>
 8000fde:	9b06      	ldr	r3, [sp, #24]
 8000fe0:	1ac0      	subs	r0, r0, r3
 8000fe2:	42a8      	cmp	r0, r5
 8000fe4:	d801      	bhi.n	8000fea <I2C_WaitOnFlagUntilTimeout+0x32>
 8000fe6:	2d00      	cmp	r5, #0
 8000fe8:	d1eb      	bne.n	8000fc2 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fea:	2220      	movs	r2, #32
 8000fec:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000fee:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	0023      	movs	r3, r4
 8000ff6:	3341      	adds	r3, #65	; 0x41
 8000ff8:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ffa:	0022      	movs	r2, r4
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001000:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001002:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001004:	7023      	strb	r3, [r4, #0]
}
 8001006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001008 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	0004      	movs	r4, r0
 800100c:	000d      	movs	r5, r1
 800100e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001010:	2720      	movs	r7, #32
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	423b      	tst	r3, r7
 8001018:	d001      	beq.n	800101e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800101a:	2000      	movs	r0, #0
}
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800101e:	0032      	movs	r2, r6
 8001020:	0029      	movs	r1, r5
 8001022:	0020      	movs	r0, r4
 8001024:	f7ff ff5a 	bl	8000edc <I2C_IsAcknowledgeFailed>
 8001028:	2800      	cmp	r0, #0
 800102a:	d113      	bne.n	8001054 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800102c:	f7ff fcdc 	bl	80009e8 <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	42a8      	cmp	r0, r5
 8001034:	d801      	bhi.n	800103a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001036:	2d00      	cmp	r5, #0
 8001038:	d1eb      	bne.n	8001012 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800103a:	2220      	movs	r2, #32
 800103c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800103e:	4313      	orrs	r3, r2
 8001040:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001042:	0023      	movs	r3, r4
 8001044:	3341      	adds	r3, #65	; 0x41
 8001046:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001048:	0022      	movs	r2, r4
 800104a:	2300      	movs	r3, #0
 800104c:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800104e:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001050:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001052:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	e7e1      	b.n	800101c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08001058 <HAL_I2C_Init>:
{
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800105e:	2c00      	cmp	r4, #0
 8001060:	d03f      	beq.n	80010e2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001062:	0025      	movs	r5, r4
 8001064:	3541      	adds	r5, #65	; 0x41
 8001066:	782b      	ldrb	r3, [r5, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d105      	bne.n	800107a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800106e:	0023      	movs	r3, r4
 8001070:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001072:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001074:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001076:	f7ff fa7f 	bl	8000578 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800107a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800107c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800107e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001080:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001082:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001084:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001086:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001088:	438a      	bics	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800108c:	491a      	ldr	r1, [pc, #104]	; (80010f8 <HAL_I2C_Init+0xa0>)
 800108e:	6862      	ldr	r2, [r4, #4]
 8001090:	400a      	ands	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4919      	ldr	r1, [pc, #100]	; (80010fc <HAL_I2C_Init+0xa4>)
 8001098:	400a      	ands	r2, r1
 800109a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800109c:	2801      	cmp	r0, #1
 800109e:	d121      	bne.n	80010e4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	0212      	lsls	r2, r2, #8
 80010a4:	4332      	orrs	r2, r6
 80010a6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010a8:	6858      	ldr	r0, [r3, #4]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_I2C_Init+0xa8>)
 80010ac:	4302      	orrs	r2, r0
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010b0:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010b4:	400a      	ands	r2, r1
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b8:	6961      	ldr	r1, [r4, #20]
 80010ba:	6922      	ldr	r2, [r4, #16]
 80010bc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010be:	69a1      	ldr	r1, [r4, #24]
 80010c0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010c2:	430a      	orrs	r2, r1
 80010c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c6:	6a21      	ldr	r1, [r4, #32]
 80010c8:	69e2      	ldr	r2, [r4, #28]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80010ce:	2201      	movs	r2, #1
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80010d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010da:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010de:	3442      	adds	r4, #66	; 0x42
 80010e0:	7020      	strb	r0, [r4, #0]
}
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010e4:	2284      	movs	r2, #132	; 0x84
 80010e6:	0212      	lsls	r2, r2, #8
 80010e8:	4332      	orrs	r2, r6
 80010ea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d1db      	bne.n	80010a8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	e7d7      	b.n	80010a8 <HAL_I2C_Init+0x50>
 80010f8:	f0ffffff 	.word	0xf0ffffff
 80010fc:	ffff7fff 	.word	0xffff7fff
 8001100:	02008000 	.word	0x02008000

08001104 <HAL_I2C_Master_Transmit>:
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800110a:	0003      	movs	r3, r0
 800110c:	3341      	adds	r3, #65	; 0x41
{
 800110e:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	781b      	ldrb	r3, [r3, #0]
{
 8001114:	0004      	movs	r4, r0
 8001116:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001118:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800111a:	2b20      	cmp	r3, #32
 800111c:	d114      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800111e:	0023      	movs	r3, r4
 8001120:	3340      	adds	r3, #64	; 0x40
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	2a01      	cmp	r2, #1
 8001126:	d00f      	beq.n	8001148 <HAL_I2C_Master_Transmit+0x44>
 8001128:	2601      	movs	r6, #1
 800112a:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800112c:	f7ff fc5c 	bl	80009e8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001130:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001132:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001134:	9000      	str	r0, [sp, #0]
 8001136:	2319      	movs	r3, #25
 8001138:	0032      	movs	r2, r6
 800113a:	0020      	movs	r0, r4
 800113c:	0209      	lsls	r1, r1, #8
 800113e:	f7ff ff3b 	bl	8000fb8 <I2C_WaitOnFlagUntilTimeout>
 8001142:	2800      	cmp	r0, #0
 8001144:	d002      	beq.n	800114c <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
}
 8001148:	b007      	add	sp, #28
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800114c:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800114e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001150:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001152:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001154:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001156:	3b11      	subs	r3, #17
 8001158:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800115a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800115c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800115e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001160:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8001162:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001164:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001166:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_I2C_Master_Transmit+0x11c>)
 800116a:	2aff      	cmp	r2, #255	; 0xff
 800116c:	d920      	bls.n	80011b0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001178:	0039      	movs	r1, r7
 800117a:	0020      	movs	r0, r4
 800117c:	f7ff fe9a 	bl	8000eb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001182:	002a      	movs	r2, r5
 8001184:	0020      	movs	r0, r4
 8001186:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8001188:	2b00      	cmp	r3, #0
 800118a:	d119      	bne.n	80011c0 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118c:	f7ff ff3c 	bl	8001008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001190:	2800      	cmp	r0, #0
 8001192:	d1d8      	bne.n	8001146 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001194:	2120      	movs	r1, #32
 8001196:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001198:	4d22      	ldr	r5, [pc, #136]	; (8001224 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800119a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	402a      	ands	r2, r5
 80011a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80011a2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80011a4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	3341      	adds	r3, #65	; 0x41
 80011a8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011aa:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80011ac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80011ae:	e7cb      	b.n	8001148 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80011b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80011b2:	b292      	uxth	r2, r2
 80011b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	049b      	lsls	r3, r3, #18
 80011be:	e7db      	b.n	8001178 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c0:	f7ff fed0 	bl	8000f64 <I2C_WaitOnTXISFlagUntilTimeout>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1be      	bne.n	8001146 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80011ce:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011d0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80011d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80011d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011de:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011e2:	b292      	uxth	r2, r2
 80011e4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ca      	beq.n	8001180 <HAL_I2C_Master_Transmit+0x7c>
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	d1c8      	bne.n	8001180 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	0020      	movs	r0, r4
 80011f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80011f4:	9500      	str	r5, [sp, #0]
 80011f6:	f7ff fedf 	bl	8000fb8 <I2C_WaitOnFlagUntilTimeout>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d1a3      	bne.n	8001146 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d906      	bls.n	8001212 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	22ff      	movs	r2, #255	; 0xff
 800120c:	9000      	str	r0, [sp, #0]
 800120e:	045b      	lsls	r3, r3, #17
 8001210:	e7b2      	b.n	8001178 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8001212:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001214:	b292      	uxth	r2, r2
 8001216:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	9000      	str	r0, [sp, #0]
 800121c:	e7cd      	b.n	80011ba <HAL_I2C_Master_Transmit+0xb6>
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	80002000 	.word	0x80002000
 8001224:	fe00e800 	.word	0xfe00e800

08001228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122a:	0004      	movs	r4, r0
 800122c:	3441      	adds	r4, #65	; 0x41
 800122e:	7822      	ldrb	r2, [r4, #0]
{
 8001230:	0003      	movs	r3, r0
 8001232:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001234:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001236:	b2d6      	uxtb	r6, r2
 8001238:	2a20      	cmp	r2, #32
 800123a:	d118      	bne.n	800126e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800123c:	001d      	movs	r5, r3
 800123e:	3540      	adds	r5, #64	; 0x40
 8001240:	782a      	ldrb	r2, [r5, #0]
 8001242:	2a01      	cmp	r2, #1
 8001244:	d013      	beq.n	800126e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3a23      	subs	r2, #35	; 0x23
 800124e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001252:	4391      	bics	r1, r2
 8001254:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800125a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800125c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	4339      	orrs	r1, r7
 8001262:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800126a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800126c:	7028      	strb	r0, [r5, #0]
  }
}
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001270:	ffffefff 	.word	0xffffefff

08001274 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001274:	0002      	movs	r2, r0
{
 8001276:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001278:	3241      	adds	r2, #65	; 0x41
 800127a:	7814      	ldrb	r4, [r2, #0]
{
 800127c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800127e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001280:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001282:	2c20      	cmp	r4, #32
 8001284:	d117      	bne.n	80012b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001286:	001c      	movs	r4, r3
 8001288:	3440      	adds	r4, #64	; 0x40
 800128a:	7826      	ldrb	r6, [r4, #0]
 800128c:	2e01      	cmp	r6, #1
 800128e:	d012      	beq.n	80012b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001290:	3022      	adds	r0, #34	; 0x22
 8001292:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3823      	subs	r0, #35	; 0x23
 8001298:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800129a:	4f07      	ldr	r7, [pc, #28]	; (80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800129c:	4386      	bics	r6, r0
 800129e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80012a0:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80012a2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80012a4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80012a6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80012a8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	4308      	orrs	r0, r1
 80012ae:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80012b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80012b4:	7020      	strb	r0, [r4, #0]
  }
}
 80012b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b8:	fffff0ff 	.word	0xfffff0ff

080012bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012bc:	2280      	movs	r2, #128	; 0x80
{
 80012be:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80012c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c2:	05d2      	lsls	r2, r2, #23
 80012c4:	4290      	cmp	r0, r2
 80012c6:	d002      	beq.n	80012ce <TIM_Base_SetConfig+0x12>
 80012c8:	4c0d      	ldr	r4, [pc, #52]	; (8001300 <TIM_Base_SetConfig+0x44>)
 80012ca:	42a0      	cmp	r0, r4
 80012cc:	d10c      	bne.n	80012e8 <TIM_Base_SetConfig+0x2c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012ce:	2470      	movs	r4, #112	; 0x70
 80012d0:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80012d2:	684c      	ldr	r4, [r1, #4]
 80012d4:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012d6:	4290      	cmp	r0, r2
 80012d8:	d002      	beq.n	80012e0 <TIM_Base_SetConfig+0x24>
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <TIM_Base_SetConfig+0x44>)
 80012dc:	4290      	cmp	r0, r2
 80012de:	d103      	bne.n	80012e8 <TIM_Base_SetConfig+0x2c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <TIM_Base_SetConfig+0x48>)
 80012e2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012e4:	68ca      	ldr	r2, [r1, #12]
 80012e6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	4393      	bics	r3, r2
 80012ec:	690a      	ldr	r2, [r1, #16]
 80012ee:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80012f0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012f2:	688b      	ldr	r3, [r1, #8]
 80012f4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012f6:	680b      	ldr	r3, [r1, #0]
 80012f8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80012fa:	2301      	movs	r3, #1
 80012fc:	6143      	str	r3, [r0, #20]
}
 80012fe:	bd10      	pop	{r4, pc}
 8001300:	40010800 	.word	0x40010800
 8001304:	fffffcff 	.word	0xfffffcff

08001308 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001308:	2201      	movs	r2, #1
{
 800130a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800130c:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800130e:	6a03      	ldr	r3, [r0, #32]
 8001310:	4393      	bics	r3, r2
 8001312:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001314:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001316:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001318:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800131a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800131c:	680d      	ldr	r5, [r1, #0]
 800131e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001320:	2502      	movs	r5, #2
 8001322:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001324:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001326:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001328:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800132a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 800132c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 800132e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001330:	6203      	str	r3, [r0, #32]
}
 8001332:	bd30      	pop	{r4, r5, pc}

08001334 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001334:	2210      	movs	r2, #16
 8001336:	6a03      	ldr	r3, [r0, #32]
{
 8001338:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800133a:	4393      	bics	r3, r2
 800133c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800133e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <TIM_OC2_SetConfig+0x30>)
  tmpcr2 =  TIMx->CR2;
 8001342:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001344:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001346:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001348:	680a      	ldr	r2, [r1, #0]
 800134a:	0212      	lsls	r2, r2, #8
 800134c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800134e:	2320      	movs	r3, #32
 8001350:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001352:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001354:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001356:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001358:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800135a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800135c:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 800135e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001360:	6203      	str	r3, [r0, #32]
}
 8001362:	bd30      	pop	{r4, r5, pc}
 8001364:	ffff8cff 	.word	0xffff8cff

08001368 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001368:	231f      	movs	r3, #31
{
 800136a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800136c:	2401      	movs	r4, #1
 800136e:	4019      	ands	r1, r3
 8001370:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001372:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8001374:	6a03      	ldr	r3, [r0, #32]
 8001376:	43a3      	bics	r3, r4
 8001378:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800137a:	6a03      	ldr	r3, [r0, #32]
 800137c:	431a      	orrs	r2, r3
 800137e:	6202      	str	r2, [r0, #32]
}
 8001380:	bd10      	pop	{r4, pc}

08001382 <HAL_TIM_Base_Init>:
{
 8001382:	b570      	push	{r4, r5, r6, lr}
 8001384:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001386:	2001      	movs	r0, #1
  if (htim == NULL)
 8001388:	2c00      	cmp	r4, #0
 800138a:	d01d      	beq.n	80013c8 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800138c:	0025      	movs	r5, r4
 800138e:	3539      	adds	r5, #57	; 0x39
 8001390:	782b      	ldrb	r3, [r5, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001398:	0023      	movs	r3, r4
 800139a:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800139c:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800139e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80013a0:	f7ff f9f4 	bl	800078c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013a4:	2302      	movs	r3, #2
 80013a6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	1d21      	adds	r1, r4, #4
 80013ac:	f7ff ff86 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013b0:	0022      	movs	r2, r4
 80013b2:	2301      	movs	r3, #1
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013b6:	323e      	adds	r2, #62	; 0x3e
 80013b8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ba:	343d      	adds	r4, #61	; 0x3d
 80013bc:	3a04      	subs	r2, #4
 80013be:	7013      	strb	r3, [r2, #0]
 80013c0:	7053      	strb	r3, [r2, #1]
 80013c2:	7093      	strb	r3, [r2, #2]
 80013c4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80013c6:	702b      	strb	r3, [r5, #0]
}
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080013cc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80013cc:	0002      	movs	r2, r0
{
 80013ce:	0003      	movs	r3, r0
    return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80013d2:	3239      	adds	r2, #57	; 0x39
 80013d4:	7811      	ldrb	r1, [r2, #0]
 80013d6:	4281      	cmp	r1, r0
 80013d8:	d113      	bne.n	8001402 <HAL_TIM_Base_Start+0x36>
  htim->State = HAL_TIM_STATE_BUSY;
 80013da:	2102      	movs	r1, #2
 80013dc:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	05d2      	lsls	r2, r2, #23
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d002      	beq.n	80013ee <HAL_TIM_Base_Start+0x22>
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_TIM_Base_Start+0x44>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10a      	bne.n	8001404 <HAL_TIM_Base_Start+0x38>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ee:	2107      	movs	r1, #7
 80013f0:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80013f2:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013f4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013f6:	2a06      	cmp	r2, #6
 80013f8:	d003      	beq.n	8001402 <HAL_TIM_Base_Start+0x36>
      __HAL_TIM_ENABLE(htim);
 80013fa:	2201      	movs	r2, #1
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4302      	orrs	r2, r0
 8001408:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
 800140c:	e7f9      	b.n	8001402 <HAL_TIM_Base_Start+0x36>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40010800 	.word	0x40010800

08001414 <HAL_TIM_OC_MspInit>:
 8001414:	4770      	bx	lr

08001416 <HAL_TIM_OC_Init>:
{
 8001416:	b570      	push	{r4, r5, r6, lr}
 8001418:	0004      	movs	r4, r0
    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
  if (htim == NULL)
 800141c:	2c00      	cmp	r4, #0
 800141e:	d01d      	beq.n	800145c <HAL_TIM_OC_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001420:	0025      	movs	r5, r4
 8001422:	3539      	adds	r5, #57	; 0x39
 8001424:	782b      	ldrb	r3, [r5, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800142c:	0023      	movs	r3, r4
 800142e:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001430:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8001432:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_MspInit(htim);
 8001434:	f7ff ffee 	bl	8001414 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001438:	2302      	movs	r3, #2
 800143a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	1d21      	adds	r1, r4, #4
 8001440:	f7ff ff3c 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001444:	0022      	movs	r2, r4
 8001446:	2301      	movs	r3, #1
  return HAL_OK;
 8001448:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800144a:	323e      	adds	r2, #62	; 0x3e
 800144c:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144e:	343d      	adds	r4, #61	; 0x3d
 8001450:	3a04      	subs	r2, #4
 8001452:	7013      	strb	r3, [r2, #0]
 8001454:	7053      	strb	r3, [r2, #1]
 8001456:	7093      	strb	r3, [r2, #2]
 8001458:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800145a:	702b      	strb	r3, [r5, #0]
}
 800145c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001460 <HAL_TIM_OC_Start>:
{
 8001460:	0003      	movs	r3, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001462:	0002      	movs	r2, r0
{
 8001464:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001466:	2900      	cmp	r1, #0
 8001468:	d105      	bne.n	8001476 <HAL_TIM_OC_Start+0x16>
 800146a:	323a      	adds	r2, #58	; 0x3a
    return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800146e:	7814      	ldrb	r4, [r2, #0]
 8001470:	4284      	cmp	r4, r0
 8001472:	d00a      	beq.n	800148a <HAL_TIM_OC_Start+0x2a>
}
 8001474:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001476:	2904      	cmp	r1, #4
 8001478:	d101      	bne.n	800147e <HAL_TIM_OC_Start+0x1e>
 800147a:	323b      	adds	r2, #59	; 0x3b
 800147c:	e7f6      	b.n	800146c <HAL_TIM_OC_Start+0xc>
 800147e:	2908      	cmp	r1, #8
 8001480:	d101      	bne.n	8001486 <HAL_TIM_OC_Start+0x26>
 8001482:	323c      	adds	r2, #60	; 0x3c
 8001484:	e7f2      	b.n	800146c <HAL_TIM_OC_Start+0xc>
 8001486:	323d      	adds	r2, #61	; 0x3d
 8001488:	e7f0      	b.n	800146c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800148a:	2002      	movs	r0, #2
 800148c:	7010      	strb	r0, [r2, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800148e:	681c      	ldr	r4, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	0020      	movs	r0, r4
 8001494:	f7ff ff68 	bl	8001368 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	429c      	cmp	r4, r3
 800149e:	d002      	beq.n	80014a6 <HAL_TIM_OC_Start+0x46>
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_TIM_OC_Start+0x68>)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d10a      	bne.n	80014bc <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a6:	2207      	movs	r2, #7
 80014a8:	68a3      	ldr	r3, [r4, #8]
  return HAL_OK;
 80014aa:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014ac:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d0e0      	beq.n	8001474 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 80014b2:	2301      	movs	r3, #1
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	e7db      	b.n	8001474 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 80014bc:	2301      	movs	r3, #1
 80014be:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80014c0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	e7d5      	b.n	8001474 <HAL_TIM_OC_Start+0x14>
 80014c8:	40010800 	.word	0x40010800

080014cc <HAL_TIM_OC_Start_IT>:
{
 80014cc:	0003      	movs	r3, r0
 80014ce:	b570      	push	{r4, r5, r6, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d106      	bne.n	80014e2 <HAL_TIM_OC_Start_IT+0x16>
 80014d4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014d8:	343a      	adds	r4, #58	; 0x3a
 80014da:	7822      	ldrb	r2, [r4, #0]
 80014dc:	4282      	cmp	r2, r0
 80014de:	d049      	beq.n	8001574 <HAL_TIM_OC_Start_IT+0xa8>
}
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014e2:	0002      	movs	r2, r0
 80014e4:	2904      	cmp	r1, #4
 80014e6:	d10c      	bne.n	8001502 <HAL_TIM_OC_Start_IT+0x36>
    return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014ea:	323b      	adds	r2, #59	; 0x3b
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4282      	cmp	r2, r0
 80014f0:	d1f6      	bne.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80014f2:	001a      	movs	r2, r3
 80014f4:	2002      	movs	r0, #2
 80014f6:	323b      	adds	r2, #59	; 0x3b
 80014f8:	7010      	strb	r0, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	68c4      	ldr	r4, [r0, #12]
 8001500:	e03c      	b.n	800157c <HAL_TIM_OC_Start_IT+0xb0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001502:	2908      	cmp	r1, #8
 8001504:	d123      	bne.n	800154e <HAL_TIM_OC_Start_IT+0x82>
    return HAL_ERROR;
 8001506:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001508:	323c      	adds	r2, #60	; 0x3c
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4282      	cmp	r2, r0
 800150e:	d1e7      	bne.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001510:	001a      	movs	r2, r3
 8001512:	2002      	movs	r0, #2
 8001514:	323c      	adds	r2, #60	; 0x3c
 8001516:	7010      	strb	r0, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	68c2      	ldr	r2, [r0, #12]
 800151c:	430a      	orrs	r2, r1
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800151e:	681c      	ldr	r4, [r3, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001520:	60c2      	str	r2, [r0, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001522:	2201      	movs	r2, #1
 8001524:	0020      	movs	r0, r4
 8001526:	f7ff ff1f 	bl	8001368 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	429c      	cmp	r4, r3
 8001530:	d002      	beq.n	8001538 <HAL_TIM_OC_Start_IT+0x6c>
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_TIM_OC_Start_IT+0xc0>)
 8001534:	429c      	cmp	r4, r3
 8001536:	d123      	bne.n	8001580 <HAL_TIM_OC_Start_IT+0xb4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001538:	2207      	movs	r2, #7
 800153a:	68a3      	ldr	r3, [r4, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800153c:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800153e:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001540:	2b06      	cmp	r3, #6
 8001542:	d0cd      	beq.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
        __HAL_TIM_ENABLE(htim);
 8001544:	2301      	movs	r3, #1
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	6023      	str	r3, [r4, #0]
 800154c:	e7c8      	b.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
    return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001550:	323d      	adds	r2, #61	; 0x3d
 8001552:	7814      	ldrb	r4, [r2, #0]
 8001554:	b2e5      	uxtb	r5, r4
 8001556:	4284      	cmp	r4, r0
 8001558:	d1c2      	bne.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800155a:	2904      	cmp	r1, #4
 800155c:	d0c9      	beq.n	80014f2 <HAL_TIM_OC_Start_IT+0x26>
 800155e:	2908      	cmp	r1, #8
 8001560:	d0d6      	beq.n	8001510 <HAL_TIM_OC_Start_IT+0x44>
 8001562:	2002      	movs	r0, #2
 8001564:	7010      	strb	r0, [r2, #0]
  switch (Channel)
 8001566:	0028      	movs	r0, r5
 8001568:	290c      	cmp	r1, #12
 800156a:	d1b9      	bne.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	2210      	movs	r2, #16
 8001570:	68c4      	ldr	r4, [r0, #12]
 8001572:	e003      	b.n	800157c <HAL_TIM_OC_Start_IT+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001574:	2202      	movs	r2, #2
 8001576:	7022      	strb	r2, [r4, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	68c4      	ldr	r4, [r0, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800157c:	4322      	orrs	r2, r4
 800157e:	e7ce      	b.n	800151e <HAL_TIM_OC_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 8001580:	2301      	movs	r3, #1
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	2000      	movs	r0, #0
 8001586:	4313      	orrs	r3, r2
 8001588:	6023      	str	r3, [r4, #0]
 800158a:	e7a9      	b.n	80014e0 <HAL_TIM_OC_Start_IT+0x14>
 800158c:	40010800 	.word	0x40010800

08001590 <HAL_TIM_PWM_MspInit>:
 8001590:	4770      	bx	lr

08001592 <HAL_TIM_PWM_Init>:
{
 8001592:	b570      	push	{r4, r5, r6, lr}
 8001594:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
  if (htim == NULL)
 8001598:	2c00      	cmp	r4, #0
 800159a:	d01d      	beq.n	80015d8 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800159c:	0025      	movs	r5, r4
 800159e:	3539      	adds	r5, #57	; 0x39
 80015a0:	782b      	ldrb	r3, [r5, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80015a8:	0023      	movs	r3, r4
 80015aa:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80015ac:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80015ae:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80015b0:	f7ff ffee 	bl	8001590 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80015b4:	2302      	movs	r3, #2
 80015b6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	1d21      	adds	r1, r4, #4
 80015bc:	f7ff fe7e 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c0:	0022      	movs	r2, r4
 80015c2:	2301      	movs	r3, #1
  return HAL_OK;
 80015c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c6:	323e      	adds	r2, #62	; 0x3e
 80015c8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ca:	343d      	adds	r4, #61	; 0x3d
 80015cc:	3a04      	subs	r2, #4
 80015ce:	7013      	strb	r3, [r2, #0]
 80015d0:	7053      	strb	r3, [r2, #1]
 80015d2:	7093      	strb	r3, [r2, #2]
 80015d4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80015d6:	702b      	strb	r3, [r5, #0]
}
 80015d8:	bd70      	pop	{r4, r5, r6, pc}

080015da <HAL_TIM_PWM_Start>:
 80015da:	b510      	push	{r4, lr}
 80015dc:	f7ff ff40 	bl	8001460 <HAL_TIM_OC_Start>
 80015e0:	bd10      	pop	{r4, pc}
	...

080015e4 <HAL_TIM_OC_ConfigChannel>:
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80015e6:	0004      	movs	r4, r0
 80015e8:	3438      	adds	r4, #56	; 0x38
{
 80015ea:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80015ec:	7822      	ldrb	r2, [r4, #0]
{
 80015ee:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80015f0:	2002      	movs	r0, #2
 80015f2:	2a01      	cmp	r2, #1
 80015f4:	d009      	beq.n	800160a <HAL_TIM_OC_ConfigChannel+0x26>
  switch (Channel)
 80015f6:	2d08      	cmp	r5, #8
 80015f8:	d02a      	beq.n	8001650 <HAL_TIM_OC_ConfigChannel+0x6c>
 80015fa:	d807      	bhi.n	800160c <HAL_TIM_OC_ConfigChannel+0x28>
 80015fc:	2d00      	cmp	r5, #0
 80015fe:	d01e      	beq.n	800163e <HAL_TIM_OC_ConfigChannel+0x5a>
 8001600:	2d04      	cmp	r5, #4
 8001602:	d021      	beq.n	8001648 <HAL_TIM_OC_ConfigChannel+0x64>
 8001604:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001606:	2300      	movs	r3, #0
 8001608:	7023      	strb	r3, [r4, #0]
}
 800160a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800160c:	2d0c      	cmp	r5, #12
 800160e:	d1f9      	bne.n	8001604 <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001610:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001612:	481b      	ldr	r0, [pc, #108]	; (8001680 <HAL_TIM_OC_ConfigChannel+0x9c>)
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	4002      	ands	r2, r0
 8001618:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800161a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800161c:	4819      	ldr	r0, [pc, #100]	; (8001684 <HAL_TIM_OC_ConfigChannel+0xa0>)
  tmpcr2 =  TIMx->CR2;
 800161e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001620:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001622:	4002      	ands	r2, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001624:	6808      	ldr	r0, [r1, #0]
 8001626:	0200      	lsls	r0, r0, #8
 8001628:	4310      	orrs	r0, r2
  tmpccer &= ~TIM_CCER_CC4P;
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_TIM_OC_ConfigChannel+0xa4>)
 800162c:	4015      	ands	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800162e:	688a      	ldr	r2, [r1, #8]
  TIMx->CCR4 = OC_Config->Pulse;
 8001630:	6849      	ldr	r1, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001632:	0312      	lsls	r2, r2, #12
  TIMx->CR2 = tmpcr2;
 8001634:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001636:	432a      	orrs	r2, r5
  TIMx->CCMR2 = tmpccmrx;
 8001638:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800163a:	6419      	str	r1, [r3, #64]	; 0x40
 800163c:	e01d      	b.n	800167a <HAL_TIM_OC_ConfigChannel+0x96>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	f7ff fe62 	bl	8001308 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001644:	2000      	movs	r0, #0
}
 8001646:	e7de      	b.n	8001606 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	f7ff fe73 	bl	8001334 <TIM_OC2_SetConfig>
      break;
 800164e:	e7f9      	b.n	8001644 <HAL_TIM_OC_ConfigChannel+0x60>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001650:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <HAL_TIM_OC_ConfigChannel+0xa8>)
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	4002      	ands	r2, r0
 8001658:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800165a:	2273      	movs	r2, #115	; 0x73
  tmpccer = TIMx->CCER;
 800165c:	6a1d      	ldr	r5, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800165e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001660:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001662:	4390      	bics	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 8001664:	680a      	ldr	r2, [r1, #0]
 8001666:	4310      	orrs	r0, r2
  tmpccer &= ~TIM_CCER_CC3P;
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_TIM_OC_ConfigChannel+0xac>)
 800166a:	4015      	ands	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800166c:	688a      	ldr	r2, [r1, #8]
  TIMx->CCR3 = OC_Config->Pulse;
 800166e:	6849      	ldr	r1, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001670:	0212      	lsls	r2, r2, #8
  TIMx->CR2 = tmpcr2;
 8001672:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001674:	432a      	orrs	r2, r5
  TIMx->CCMR2 = tmpccmrx;
 8001676:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001678:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800167a:	621a      	str	r2, [r3, #32]
 800167c:	e7e2      	b.n	8001644 <HAL_TIM_OC_ConfigChannel+0x60>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	ffffefff 	.word	0xffffefff
 8001684:	ffff8cff 	.word	0xffff8cff
 8001688:	ffffdfff 	.word	0xffffdfff
 800168c:	fffffeff 	.word	0xfffffeff
 8001690:	fffffdff 	.word	0xfffffdff

08001694 <HAL_TIM_PWM_ConfigChannel>:
{
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001696:	0005      	movs	r5, r0
 8001698:	3538      	adds	r5, #56	; 0x38
{
 800169a:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800169c:	782a      	ldrb	r2, [r5, #0]
{
 800169e:	0003      	movs	r3, r0
 80016a0:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80016a2:	2002      	movs	r0, #2
 80016a4:	2a01      	cmp	r2, #1
 80016a6:	d00a      	beq.n	80016be <HAL_TIM_PWM_ConfigChannel+0x2a>
 80016a8:	3801      	subs	r0, #1
 80016aa:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 80016ac:	2e08      	cmp	r6, #8
 80016ae:	d052      	beq.n	8001756 <HAL_TIM_PWM_ConfigChannel+0xc2>
 80016b0:	d806      	bhi.n	80016c0 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d02a      	beq.n	800170c <HAL_TIM_PWM_ConfigChannel+0x78>
 80016b6:	2e04      	cmp	r6, #4
 80016b8:	d03a      	beq.n	8001730 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 80016ba:	2300      	movs	r3, #0
 80016bc:	702b      	strb	r3, [r5, #0]
}
 80016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80016c0:	2e0c      	cmp	r6, #12
 80016c2:	d1fa      	bne.n	80016ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80016c4:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016c6:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_TIM_PWM_ConfigChannel+0x108>)
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	400a      	ands	r2, r1
 80016cc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80016ce:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016d0:	4933      	ldr	r1, [pc, #204]	; (80017a0 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpcr2 =  TIMx->CR2;
 80016d2:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80016d4:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016d6:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	0209      	lsls	r1, r1, #8
 80016dc:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 80016de:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <HAL_TIM_PWM_ConfigChannel+0x110>)
 80016e0:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016e2:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80016e4:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016e6:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 80016e8:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80016ea:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016ec:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 80016ee:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80016f0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	69d9      	ldr	r1, [r3, #28]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	430a      	orrs	r2, r1
 80016fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	492a      	ldr	r1, [pc, #168]	; (80017a8 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8001700:	400a      	ands	r2, r1
 8001702:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001704:	68e2      	ldr	r2, [r4, #12]
 8001706:	69d9      	ldr	r1, [r3, #28]
 8001708:	0212      	lsls	r2, r2, #8
 800170a:	e043      	b.n	8001794 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800170c:	681f      	ldr	r7, [r3, #0]
 800170e:	0038      	movs	r0, r7
 8001710:	f7ff fdfa 	bl	8001308 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001714:	2308      	movs	r3, #8
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800171a:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800171c:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4393      	bics	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	68e2      	ldr	r2, [r4, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	2000      	movs	r0, #0
      break;
 800172e:	e7c4      	b.n	80016ba <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001730:	681e      	ldr	r6, [r3, #0]
 8001732:	0030      	movs	r0, r6
 8001734:	f7ff fdfe 	bl	8001334 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	69b2      	ldr	r2, [r6, #24]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4313      	orrs	r3, r2
 8001740:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001742:	69b3      	ldr	r3, [r6, #24]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8001746:	4013      	ands	r3, r2
 8001748:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800174a:	68e3      	ldr	r3, [r4, #12]
 800174c:	69b2      	ldr	r2, [r6, #24]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4313      	orrs	r3, r2
 8001752:	61b3      	str	r3, [r6, #24]
      break;
 8001754:	e7ea      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x98>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001756:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001758:	4914      	ldr	r1, [pc, #80]	; (80017ac <HAL_TIM_PWM_ConfigChannel+0x118>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	400a      	ands	r2, r1
 800175e:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001760:	2273      	movs	r2, #115	; 0x73
  tmpccer = TIMx->CCER;
 8001762:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001764:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001766:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001768:	4391      	bics	r1, r2
  tmpccmrx |= OC_Config->OCMode;
 800176a:	6822      	ldr	r2, [r4, #0]
 800176c:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC3P;
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 8001770:	4017      	ands	r7, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001772:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8001774:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001776:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001778:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800177a:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 800177c:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800177e:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001780:	433a      	orrs	r2, r7
  TIMx->CCER = tmpccer;
 8001782:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	4316      	orrs	r6, r2
 8001788:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	438a      	bics	r2, r1
 800178e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001794:	430a      	orrs	r2, r1
 8001796:	61da      	str	r2, [r3, #28]
 8001798:	e7c8      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x98>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	ffffefff 	.word	0xffffefff
 80017a0:	ffff8cff 	.word	0xffff8cff
 80017a4:	ffffdfff 	.word	0xffffdfff
 80017a8:	fffffbff 	.word	0xfffffbff
 80017ac:	fffffeff 	.word	0xfffffeff
 80017b0:	fffffdff 	.word	0xfffffdff

080017b4 <HAL_TIM_ConfigClockSource>:
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80017b6:	0005      	movs	r5, r0
 80017b8:	2202      	movs	r2, #2
 80017ba:	3538      	adds	r5, #56	; 0x38
 80017bc:	782c      	ldrb	r4, [r5, #0]
{
 80017be:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80017c0:	0010      	movs	r0, r2
 80017c2:	2c01      	cmp	r4, #1
 80017c4:	d01d      	beq.n	8001802 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80017c6:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80017c8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80017ca:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 80017cc:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80017ce:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80017d0:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d2:	4848      	ldr	r0, [pc, #288]	; (80018f4 <HAL_TIM_ConfigClockSource+0x140>)
  tmpsmcr = htim->Instance->SMCR;
 80017d4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d6:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80017d8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80017da:	680a      	ldr	r2, [r1, #0]
 80017dc:	2a60      	cmp	r2, #96	; 0x60
 80017de:	d05c      	beq.n	800189a <HAL_TIM_ConfigClockSource+0xe6>
 80017e0:	d82f      	bhi.n	8001842 <HAL_TIM_ConfigClockSource+0x8e>
 80017e2:	2a40      	cmp	r2, #64	; 0x40
 80017e4:	d100      	bne.n	80017e8 <HAL_TIM_ConfigClockSource+0x34>
 80017e6:	e06f      	b.n	80018c8 <HAL_TIM_ConfigClockSource+0x114>
 80017e8:	d814      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x60>
 80017ea:	2a20      	cmp	r2, #32
 80017ec:	d00c      	beq.n	8001808 <HAL_TIM_ConfigClockSource+0x54>
 80017ee:	d809      	bhi.n	8001804 <HAL_TIM_ConfigClockSource+0x50>
 80017f0:	2110      	movs	r1, #16
 80017f2:	0010      	movs	r0, r2
 80017f4:	4388      	bics	r0, r1
 80017f6:	d007      	beq.n	8001808 <HAL_TIM_ConfigClockSource+0x54>
 80017f8:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 80017fa:	2301      	movs	r3, #1
 80017fc:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80017fe:	2300      	movs	r3, #0
 8001800:	702b      	strb	r3, [r5, #0]
}
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001804:	2a30      	cmp	r2, #48	; 0x30
 8001806:	d1f7      	bne.n	80017f8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001808:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800180a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800180c:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800180e:	430a      	orrs	r2, r1
 8001810:	2107      	movs	r1, #7
 8001812:	e02f      	b.n	8001874 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8001814:	2a50      	cmp	r2, #80	; 0x50
 8001816:	d1ef      	bne.n	80017f8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001818:	6848      	ldr	r0, [r1, #4]
 800181a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800181c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800181e:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001820:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001822:	43a7      	bics	r7, r4
 8001824:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001826:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001828:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800182a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800182c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800182e:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 8001830:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001832:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001834:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001836:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 8001838:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800183a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800183c:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800183e:	3a19      	subs	r2, #25
 8001840:	e018      	b.n	8001874 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8001842:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8001846:	017f      	lsls	r7, r7, #5
 8001848:	42ba      	cmp	r2, r7
 800184a:	d0d6      	beq.n	80017fa <HAL_TIM_ConfigClockSource+0x46>
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	0180      	lsls	r0, r0, #6
 8001850:	4282      	cmp	r2, r0
 8001852:	d013      	beq.n	800187c <HAL_TIM_ConfigClockSource+0xc8>
 8001854:	0020      	movs	r0, r4
 8001856:	2a70      	cmp	r2, #112	; 0x70
 8001858:	d1cf      	bne.n	80017fa <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800185a:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800185c:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800185e:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001860:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001862:	688a      	ldr	r2, [r1, #8]
 8001864:	68c9      	ldr	r1, [r1, #12]
 8001866:	4322      	orrs	r2, r4
 8001868:	0209      	lsls	r1, r1, #8
 800186a:	430a      	orrs	r2, r1
 800186c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800186e:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001870:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001872:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001874:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001878:	609a      	str	r2, [r3, #8]
}
 800187a:	e7be      	b.n	80017fa <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800187c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001880:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001882:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001884:	688a      	ldr	r2, [r1, #8]
 8001886:	68c9      	ldr	r1, [r1, #12]
 8001888:	4322      	orrs	r2, r4
 800188a:	0209      	lsls	r1, r1, #8
 800188c:	430a      	orrs	r2, r1
 800188e:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8001890:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	01d2      	lsls	r2, r2, #7
 8001898:	e7ec      	b.n	8001874 <HAL_TIM_ConfigClockSource+0xc0>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800189a:	2410      	movs	r4, #16
 800189c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800189e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018a0:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018a2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018a4:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018a6:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018a8:	4f14      	ldr	r7, [pc, #80]	; (80018fc <HAL_TIM_ConfigClockSource+0x148>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018aa:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018ac:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018ae:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018b0:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80018b2:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80018b4:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018b6:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80018b8:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80018ba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80018bc:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018be:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80018c0:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018c2:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018c4:	3a09      	subs	r2, #9
 80018c6:	e7d5      	b.n	8001874 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018c8:	6848      	ldr	r0, [r1, #4]
 80018ca:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80018cc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ce:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018d0:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018d2:	43a7      	bics	r7, r4
 80018d4:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018d6:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80018d8:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018da:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018dc:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018de:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 80018e0:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018e2:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018e4:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80018e6:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 80018e8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80018ea:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018ec:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018ee:	3a29      	subs	r2, #41	; 0x29
 80018f0:	e7c0      	b.n	8001874 <HAL_TIM_ConfigClockSource+0xc0>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	ffff0088 	.word	0xffff0088
 80018f8:	ffff00ff 	.word	0xffff00ff
 80018fc:	ffff0fff 	.word	0xffff0fff

08001900 <HAL_TIM_PeriodElapsedCallback>:
 8001900:	4770      	bx	lr

08001902 <HAL_TIM_IC_CaptureCallback>:
 8001902:	4770      	bx	lr

08001904 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001904:	4770      	bx	lr

08001906 <HAL_TIM_TriggerCallback>:
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001908:	2202      	movs	r2, #2
 800190a:	6803      	ldr	r3, [r0, #0]
{
 800190c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800190e:	6919      	ldr	r1, [r3, #16]
{
 8001910:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001912:	4211      	tst	r1, r2
 8001914:	d00d      	beq.n	8001932 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001916:	68d9      	ldr	r1, [r3, #12]
 8001918:	4211      	tst	r1, r2
 800191a:	d00a      	beq.n	8001932 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800191c:	3a05      	subs	r2, #5
 800191e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001920:	3204      	adds	r2, #4
 8001922:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	079b      	lsls	r3, r3, #30
 8001928:	d05e      	beq.n	80019e8 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 800192a:	f7ff ffea 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	2300      	movs	r3, #0
 8001930:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001932:	2204      	movs	r2, #4
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	6919      	ldr	r1, [r3, #16]
 8001938:	4211      	tst	r1, r2
 800193a:	d010      	beq.n	800195e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	4211      	tst	r1, r2
 8001940:	d00d      	beq.n	800195e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001942:	3a09      	subs	r2, #9
 8001944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001946:	3207      	adds	r2, #7
 8001948:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001950:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001952:	421a      	tst	r2, r3
 8001954:	d04e      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	f7ff ffd4 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195a:	2300      	movs	r3, #0
 800195c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800195e:	2208      	movs	r2, #8
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	6919      	ldr	r1, [r3, #16]
 8001964:	4211      	tst	r1, r2
 8001966:	d00e      	beq.n	8001986 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001968:	68d9      	ldr	r1, [r3, #12]
 800196a:	4211      	tst	r1, r2
 800196c:	d00b      	beq.n	8001986 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800196e:	3a11      	subs	r2, #17
 8001970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001972:	320d      	adds	r2, #13
 8001974:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001976:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001978:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800197a:	079b      	lsls	r3, r3, #30
 800197c:	d040      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800197e:	f7ff ffc0 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	2300      	movs	r3, #0
 8001984:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001986:	2210      	movs	r2, #16
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	4211      	tst	r1, r2
 800198e:	d010      	beq.n	80019b2 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001990:	68d9      	ldr	r1, [r3, #12]
 8001992:	4211      	tst	r1, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001996:	3a21      	subs	r2, #33	; 0x21
 8001998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199a:	3219      	adds	r2, #25
 800199c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80019a4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a6:	421a      	tst	r2, r3
 80019a8:	d030      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	f7ff ffaa 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ae:	2300      	movs	r3, #0
 80019b0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019b2:	2201      	movs	r2, #1
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	6919      	ldr	r1, [r3, #16]
 80019b8:	4211      	tst	r1, r2
 80019ba:	d007      	beq.n	80019cc <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019bc:	68d9      	ldr	r1, [r3, #12]
 80019be:	4211      	tst	r1, r2
 80019c0:	d004      	beq.n	80019cc <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c2:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c8:	f7ff ff9a 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	4211      	tst	r1, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019d6:	68d9      	ldr	r1, [r3, #12]
 80019d8:	4211      	tst	r1, r2
 80019da:	d004      	beq.n	80019e6 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019dc:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 80019de:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019e2:	f7ff ff90 	bl	8001906 <HAL_TIM_TriggerCallback>
}
 80019e6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e8:	f000 fa08 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ec:	0020      	movs	r0, r4
 80019ee:	f7ff ff89 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
 80019f2:	e79c      	b.n	800192e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f4:	f000 fa02 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f8:	0020      	movs	r0, r4
 80019fa:	f7ff ff83 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
 80019fe:	e7ac      	b.n	800195a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a00:	f000 f9fc 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	0020      	movs	r0, r4
 8001a06:	f7ff ff7d 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a0a:	e7ba      	b.n	8001982 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0c:	f000 f9f6 	bl	8001dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	0020      	movs	r0, r4
 8001a12:	f7ff ff77 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a16:	e7ca      	b.n	80019ae <HAL_TIM_IRQHandler+0xa6>

08001a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a18:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a1a:	0004      	movs	r4, r0
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	3438      	adds	r4, #56	; 0x38
 8001a20:	7825      	ldrb	r5, [r4, #0]
{
 8001a22:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001a24:	0010      	movs	r0, r2
 8001a26:	2d01      	cmp	r5, #1
 8001a28:	d01a      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a2c:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2e:	3539      	adds	r5, #57	; 0x39
 8001a30:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001a36:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a38:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a3a:	680e      	ldr	r6, [r1, #0]
 8001a3c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a3e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a40:	2080      	movs	r0, #128	; 0x80
 8001a42:	05c0      	lsls	r0, r0, #23
 8001a44:	4283      	cmp	r3, r0
 8001a46:	d002      	beq.n	8001a4e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8001a4a:	4283      	cmp	r3, r0
 8001a4c:	d104      	bne.n	8001a58 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a4e:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a50:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a52:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a54:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001a5a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a5c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001a5e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40010800 	.word	0x40010800

08001a68 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001a68:	0002      	movs	r2, r0
 8001a6a:	b510      	push	{r4, lr}
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001a6c:	7900      	ldrb	r0, [r0, #4]
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001a6e:	6813      	ldr	r3, [r2, #0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d03c      	beq.n	8001aee <LL_EXTI_Init+0x86>
  ErrorStatus status = SUCCESS;
 8001a74:	2000      	movs	r0, #0
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001a76:	4283      	cmp	r3, r0
 8001a78:	d01d      	beq.n	8001ab6 <LL_EXTI_Init+0x4e>
    {
      switch (EXTI_InitStruct->Mode)
 8001a7a:	7950      	ldrb	r0, [r2, #5]
 8001a7c:	2801      	cmp	r0, #1
 8001a7e:	d01b      	beq.n	8001ab8 <LL_EXTI_Init+0x50>
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d022      	beq.n	8001aca <LL_EXTI_Init+0x62>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d124      	bne.n	8001ad2 <LL_EXTI_Init+0x6a>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001a88:	491e      	ldr	r1, [pc, #120]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001a8a:	684c      	ldr	r4, [r1, #4]
 8001a8c:	439c      	bics	r4, r3
 8001a8e:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001a90:	680c      	ldr	r4, [r1, #0]
 8001a92:	431c      	orrs	r4, r3
 8001a94:	600c      	str	r4, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001a96:	7992      	ldrb	r2, [r2, #6]
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	d00c      	beq.n	8001ab6 <LL_EXTI_Init+0x4e>
      {
        switch (EXTI_InitStruct->Trigger)
 8001a9c:	2a02      	cmp	r2, #2
 8001a9e:	d01a      	beq.n	8001ad6 <LL_EXTI_Init+0x6e>
 8001aa0:	2a03      	cmp	r2, #3
 8001aa2:	d020      	beq.n	8001ae6 <LL_EXTI_Init+0x7e>
 8001aa4:	2a01      	cmp	r2, #1
 8001aa6:	d12a      	bne.n	8001afe <LL_EXTI_Init+0x96>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001aaa:	68d1      	ldr	r1, [r2, #12]
 8001aac:	4399      	bics	r1, r3
 8001aae:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001ab0:	6891      	ldr	r1, [r2, #8]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6093      	str	r3, [r2, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8001ab6:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ab8:	4912      	ldr	r1, [pc, #72]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001aba:	6808      	ldr	r0, [r1, #0]
 8001abc:	4398      	bics	r0, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 8001abe:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ac0:	6848      	ldr	r0, [r1, #4]
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	6048      	str	r0, [r1, #4]
  ErrorStatus status = SUCCESS;
 8001ac6:	2000      	movs	r0, #0
}
 8001ac8:	e7e5      	b.n	8001a96 <LL_EXTI_Init+0x2e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001acc:	6808      	ldr	r0, [r1, #0]
 8001ace:	4318      	orrs	r0, r3
 8001ad0:	e7f5      	b.n	8001abe <LL_EXTI_Init+0x56>
      switch (EXTI_InitStruct->Mode)
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	e7df      	b.n	8001a96 <LL_EXTI_Init+0x2e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001ad8:	6891      	ldr	r1, [r2, #8]
 8001ada:	4399      	bics	r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001adc:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001ade:	68d1      	ldr	r1, [r2, #12]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	e7e7      	b.n	8001ab6 <LL_EXTI_Init+0x4e>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001ae8:	6891      	ldr	r1, [r2, #8]
 8001aea:	4319      	orrs	r1, r3
 8001aec:	e7f6      	b.n	8001adc <LL_EXTI_Init+0x74>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <LL_EXTI_Init+0x9c>)
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	4399      	bics	r1, r3
 8001af4:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001af6:	6851      	ldr	r1, [r2, #4]
 8001af8:	4399      	bics	r1, r3
 8001afa:	6051      	str	r1, [r2, #4]
}
 8001afc:	e7db      	b.n	8001ab6 <LL_EXTI_Init+0x4e>
        switch (EXTI_InitStruct->Trigger)
 8001afe:	2001      	movs	r0, #1
 8001b00:	e7d9      	b.n	8001ab6 <LL_EXTI_Init+0x4e>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40010400 	.word	0x40010400

08001b08 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b0a:	0003      	movs	r3, r0
  uint32_t pinpos     = 0x00000000U;
 8001b0c:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b0e:	680c      	ldr	r4, [r1, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8001b10:	9200      	str	r2, [sp, #0]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b12:	0020      	movs	r0, r4
 8001b14:	9a00      	ldr	r2, [sp, #0]
 8001b16:	40d0      	lsrs	r0, r2
 8001b18:	d100      	bne.n	8001b1c <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
}
 8001b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	9a00      	ldr	r2, [sp, #0]
 8001b20:	4090      	lsls	r0, r2
 8001b22:	0022      	movs	r2, r4
 8001b24:	4002      	ands	r2, r0
    if (currentpin)
 8001b26:	4204      	tst	r4, r0
 8001b28:	d031      	beq.n	8001b8e <LL_GPIO_Init+0x86>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b2a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001b2c:	2503      	movs	r5, #3
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	0010      	movs	r0, r2
 8001b32:	4350      	muls	r0, r2
 8001b34:	4345      	muls	r5, r0
 8001b36:	9e01      	ldr	r6, [sp, #4]
 8001b38:	43ed      	mvns	r5, r5
 8001b3a:	1e77      	subs	r7, r6, #1
 8001b3c:	2f01      	cmp	r7, #1
 8001b3e:	d80b      	bhi.n	8001b58 <LL_GPIO_Init+0x50>
 8001b40:	688f      	ldr	r7, [r1, #8]
 8001b42:	689e      	ldr	r6, [r3, #8]
 8001b44:	4347      	muls	r7, r0
 8001b46:	402e      	ands	r6, r5
 8001b48:	4337      	orrs	r7, r6
 8001b4a:	609f      	str	r7, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b4c:	685f      	ldr	r7, [r3, #4]
 8001b4e:	68ce      	ldr	r6, [r1, #12]
 8001b50:	43a7      	bics	r7, r4
 8001b52:	4374      	muls	r4, r6
 8001b54:	4327      	orrs	r7, r4
 8001b56:	605f      	str	r7, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001b58:	690c      	ldr	r4, [r1, #16]
 8001b5a:	68df      	ldr	r7, [r3, #12]
 8001b5c:	4344      	muls	r4, r0
 8001b5e:	402f      	ands	r7, r5
 8001b60:	433c      	orrs	r4, r7
 8001b62:	60dc      	str	r4, [r3, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b64:	9c01      	ldr	r4, [sp, #4]
 8001b66:	2c02      	cmp	r4, #2
 8001b68:	d10b      	bne.n	8001b82 <LL_GPIO_Init+0x7a>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b6a:	694f      	ldr	r7, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8001b6c:	2aff      	cmp	r2, #255	; 0xff
 8001b6e:	d811      	bhi.n	8001b94 <LL_GPIO_Init+0x8c>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001b70:	0004      	movs	r4, r0
 8001b72:	260f      	movs	r6, #15
 8001b74:	4344      	muls	r4, r0
 8001b76:	4366      	muls	r6, r4
 8001b78:	437c      	muls	r4, r7
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	43b2      	bics	r2, r6
 8001b7e:	4322      	orrs	r2, r4
 8001b80:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001b82:	9c01      	ldr	r4, [sp, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4360      	muls	r0, r4
 8001b88:	402a      	ands	r2, r5
 8001b8a:	4302      	orrs	r2, r0
 8001b8c:	601a      	str	r2, [r3, #0]
    pinpos++;
 8001b8e:	9a00      	ldr	r2, [sp, #0]
 8001b90:	3201      	adds	r2, #1
 8001b92:	e7bc      	b.n	8001b0e <LL_GPIO_Init+0x6>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001b94:	260f      	movs	r6, #15
 8001b96:	0a12      	lsrs	r2, r2, #8
 8001b98:	4352      	muls	r2, r2
 8001b9a:	4352      	muls	r2, r2
 8001b9c:	4356      	muls	r6, r2
 8001b9e:	4357      	muls	r7, r2
 8001ba0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ba2:	43b4      	bics	r4, r6
 8001ba4:	433c      	orrs	r4, r7
 8001ba6:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001ba8:	e7eb      	b.n	8001b82 <LL_GPIO_Init+0x7a>
	...

08001bac <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <LL_SetSystemCoreClock+0x8>)
 8001bae:	6018      	str	r0, [r3, #0]
}
 8001bb0:	4770      	bx	lr
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <lcdWriteByte>:
/**
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 */
static void lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001bba:	250f      	movs	r5, #15
 8001bbc:	2604      	movs	r6, #4
 8001bbe:	4c11      	ldr	r4, [pc, #68]	; (8001c04 <lcdWriteByte+0x4c>)
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <lcdWriteByte+0x50>)
 8001bc2:	79e3      	ldrb	r3, [r4, #7]
 8001bc4:	4318      	orrs	r0, r3
 8001bc6:	780b      	ldrb	r3, [r1, #0]
 8001bc8:	43ab      	bics	r3, r5
 8001bca:	4303      	orrs	r3, r0
 8001bcc:	4333      	orrs	r3, r6
 8001bce:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001bd0:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8001bd2:	780b      	ldrb	r3, [r1, #0]
 8001bd4:	43ab      	bics	r3, r5
 8001bd6:	4303      	orrs	r3, r0
 8001bd8:	7093      	strb	r3, [r2, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001bda:	780b      	ldrb	r3, [r1, #0]
 8001bdc:	40b3      	lsls	r3, r6
 8001bde:	4303      	orrs	r3, r0
 8001be0:	431e      	orrs	r6, r3
 8001be2:	b2f6      	uxtb	r6, r6
 8001be4:	70d6      	strb	r6, [r2, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001be6:	7116      	strb	r6, [r2, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001be8:	780b      	ldrb	r3, [r1, #0]
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	4318      	orrs	r0, r3


    HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, HAL_MAX_DELAY);
 8001bee:	2301      	movs	r3, #1
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001bf0:	7150      	strb	r0, [r2, #5]
    HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, HAL_MAX_DELAY);
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	79a1      	ldrb	r1, [r4, #6]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	3307      	adds	r3, #7
 8001bfc:	f7ff fa82 	bl	8001104 <HAL_I2C_Master_Transmit>
}
 8001c00:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000170 	.word	0x20000170
 8001c08:	20000168 	.word	0x20000168

08001c0c <lcdCommand>:
void lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001c0c:	b513      	push	{r0, r1, r4, lr}
    switch (action) {
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	d03e      	beq.n	8001c90 <lcdCommand+0x84>
 8001c12:	2901      	cmp	r1, #1
 8001c14:	d12a      	bne.n	8001c6c <lcdCommand+0x60>
            switch (command) {
 8001c16:	3801      	subs	r0, #1
 8001c18:	2807      	cmp	r0, #7
 8001c1a:	d827      	bhi.n	8001c6c <lcdCommand+0x60>
 8001c1c:	f7fe fa86 	bl	800012c <__gnu_thumb1_case_uqi>
 8001c20:	17131b04 	.word	0x17131b04
 8001c24:	342b3027 	.word	0x342b3027
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <lcdCommand+0xc4>)
 8001c2a:	7a1a      	ldrb	r2, [r3, #8]
 8001c2c:	2304      	movs	r3, #4
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001c2e:	4313      	orrs	r3, r2
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <lcdCommand+0xc4>)
 8001c32:	7213      	strb	r3, [r2, #8]
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001c34:	2208      	movs	r2, #8
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001c36:	4313      	orrs	r3, r2
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001c38:	466a      	mov	r2, sp
    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	1dd1      	adds	r1, r2, #7
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001c3e:	71d3      	strb	r3, [r2, #7]
    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c40:	f7ff ffba 	bl	8001bb8 <lcdWriteByte>
 8001c44:	e012      	b.n	8001c6c <lcdCommand+0x60>
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <lcdCommand+0xc4>)
 8001c48:	7a1a      	ldrb	r2, [r3, #8]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e7ef      	b.n	8001c2e <lcdCommand+0x22>
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <lcdCommand+0xc4>)
 8001c50:	7a1a      	ldrb	r2, [r3, #8]
 8001c52:	2301      	movs	r3, #1
 8001c54:	e7eb      	b.n	8001c2e <lcdCommand+0x22>
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	466a      	mov	r2, sp
 8001c5a:	71d3      	strb	r3, [r2, #7]
                    lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c5c:	466b      	mov	r3, sp
 8001c5e:	2000      	movs	r0, #0
 8001c60:	1dd9      	adds	r1, r3, #7
 8001c62:	f7ff ffa9 	bl	8001bb8 <lcdWriteByte>
					HAL_Delay(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7fe fec4 	bl	80009f4 <HAL_Delay>
}
 8001c6c:	bd13      	pop	{r0, r1, r4, pc}
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001c6e:	2402      	movs	r4, #2
 8001c70:	466b      	mov	r3, sp
 8001c72:	71dc      	strb	r4, [r3, #7]
                    lcdWriteByte((uint8_t)0x00, &lcdData);
 8001c74:	e7f3      	b.n	8001c5e <lcdCommand+0x52>
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001c76:	2302      	movs	r3, #2
 8001c78:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <lcdCommand+0xc4>)
 8001c7a:	7a51      	ldrb	r1, [r2, #9]
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001c7c:	430b      	orrs	r3, r1
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001c7e:	7253      	strb	r3, [r2, #9]
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <lcdCommand+0xc4>)
 8001c82:	7a5a      	ldrb	r2, [r3, #9]
 8001c84:	2304      	movs	r3, #4
 8001c86:	e7d6      	b.n	8001c36 <lcdCommand+0x2a>
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <lcdCommand+0xc4>)
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	7a51      	ldrb	r1, [r2, #9]
 8001c8e:	e7f5      	b.n	8001c7c <lcdCommand+0x70>
            switch (command) {
 8001c90:	3801      	subs	r0, #1
 8001c92:	2807      	cmp	r0, #7
 8001c94:	d8ea      	bhi.n	8001c6c <lcdCommand+0x60>
 8001c96:	f7fe fa3f 	bl	8000118 <__gnu_thumb1_case_sqi>
 8001c9a:	e904      	.short	0xe904
 8001c9c:	f3e90d09 	.word	0xf3e90d09
 8001ca0:	1611      	.short	0x1611
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <lcdCommand+0xc4>)
 8001ca6:	7a1b      	ldrb	r3, [r3, #8]
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001ca8:	4393      	bics	r3, r2
                    break;
 8001caa:	e7c1      	b.n	8001c30 <lcdCommand+0x24>
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <lcdCommand+0xc4>)
 8001cae:	2202      	movs	r2, #2
 8001cb0:	7a1b      	ldrb	r3, [r3, #8]
 8001cb2:	e7f9      	b.n	8001ca8 <lcdCommand+0x9c>
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <lcdCommand+0xc4>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	7a1b      	ldrb	r3, [r3, #8]
 8001cba:	e7f5      	b.n	8001ca8 <lcdCommand+0x9c>
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <lcdCommand+0xc4>)
 8001cc0:	7a53      	ldrb	r3, [r2, #9]
 8001cc2:	438b      	bics	r3, r1
 8001cc4:	e7db      	b.n	8001c7e <lcdCommand+0x72>
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001cc6:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <lcdCommand+0xc4>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	7a53      	ldrb	r3, [r2, #9]
 8001ccc:	e7f9      	b.n	8001cc2 <lcdCommand+0xb6>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000170 	.word	0x20000170

08001cd4 <lcdInit>:
void lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lcdParams.hi2c      = hi2c;
 8001cd6:	4c28      	ldr	r4, [pc, #160]	; (8001d78 <lcdInit+0xa4>)
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001cd8:	270f      	movs	r7, #15
    lcdParams.columns   = columns;
 8001cda:	7163      	strb	r3, [r4, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001cdc:	2308      	movs	r3, #8
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001cde:	2500      	movs	r5, #0
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001ce0:	4e26      	ldr	r6, [pc, #152]	; (8001d7c <lcdInit+0xa8>)
void lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001ce2:	b085      	sub	sp, #20
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001ce4:	71e3      	strb	r3, [r4, #7]
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001ce6:	332c      	adds	r3, #44	; 0x2c
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001ce8:	446f      	add	r7, sp
    lcdParams.address   = address << 1;
 8001cea:	0049      	lsls	r1, r1, #1
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001cec:	7033      	strb	r3, [r6, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001cee:	7073      	strb	r3, [r6, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001cf0:	3b04      	subs	r3, #4
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8001cf2:	703d      	strb	r5, [r7, #0]
    lcdParams.hi2c      = hi2c;
 8001cf4:	6020      	str	r0, [r4, #0]
    lcdParams.address   = address << 1;
 8001cf6:	71a1      	strb	r1, [r4, #6]
    lcdParams.lines     = lines;
 8001cf8:	7122      	strb	r2, [r4, #4]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001cfa:	70b3      	strb	r3, [r6, #2]
    	HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, HAL_MAX_DELAY);
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	425b      	negs	r3, r3
 8001d00:	79a1      	ldrb	r1, [r4, #6]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	0032      	movs	r2, r6
 8001d06:	6820      	ldr	r0, [r4, #0]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	f7ff f9fb 	bl	8001104 <HAL_I2C_Master_Transmit>
        	HAL_Delay(1);
 8001d0e:	2001      	movs	r0, #1
        if (i == 2) {
 8001d10:	2d02      	cmp	r5, #2
 8001d12:	d000      	beq.n	8001d16 <lcdInit+0x42>
            HAL_Delay(5);
 8001d14:	2005      	movs	r0, #5
    for (uint8_t i = 0; i < 3; ++i) {
 8001d16:	3501      	adds	r5, #1
 8001d18:	b2ed      	uxtb	r5, r5
            HAL_Delay(5);
 8001d1a:	f7fe fe6b 	bl	80009f4 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8001d1e:	2d03      	cmp	r5, #3
 8001d20:	d1ec      	bne.n	8001cfc <lcdInit+0x28>
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001d22:	232c      	movs	r3, #44	; 0x2c
 8001d24:	7033      	strb	r3, [r6, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001d26:	7073      	strb	r3, [r6, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001d28:	3b04      	subs	r3, #4
 8001d2a:	70b3      	strb	r3, [r6, #2]
    HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, HAL_MAX_DELAY);
 8001d2c:	3b29      	subs	r3, #41	; 0x29
 8001d2e:	79a1      	ldrb	r1, [r4, #6]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	0032      	movs	r2, r6
 8001d34:	002b      	movs	r3, r5
 8001d36:	6820      	ldr	r0, [r4, #0]
 8001d38:	f7ff f9e4 	bl	8001104 <HAL_I2C_Master_Transmit>
    lcdData |= LCD_MODE_4BITS;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	703b      	strb	r3, [r7, #0]
    if (lcdParams.lines > 1) {
 8001d40:	7923      	ldrb	r3, [r4, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d901      	bls.n	8001d4a <lcdInit+0x76>
        lcdData |= LCD_BIT_2LINE;
 8001d46:	230a      	movs	r3, #10
 8001d48:	703b      	strb	r3, [r7, #0]
    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001d4a:	0039      	movs	r1, r7
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ff33 	bl	8001bb8 <lcdWriteByte>
    lcdDisplayOn();
 8001d52:	2101      	movs	r1, #1
 8001d54:	0008      	movs	r0, r1
 8001d56:	f7ff ff59 	bl	8001c0c <lcdCommand>
    lcdCursorDirToRight();
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2007      	movs	r0, #7
 8001d5e:	f7ff ff55 	bl	8001c0c <lcdCommand>
    lcdDisplayClear();
 8001d62:	2101      	movs	r1, #1
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff ff51 	bl	8001c0c <lcdCommand>
    lcdCursorHome();
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2005      	movs	r0, #5
 8001d6e:	f7ff ff4d 	bl	8001c0c <lcdCommand>
}
 8001d72:	b005      	add	sp, #20
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20000170 	.word	0x20000170
 8001d7c:	20000168 	.word	0x20000168

08001d80 <lcdPrintStr>:
void lcdPrintStr(char * data) {
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	0005      	movs	r5, r0
    for (uint8_t i = 0; i < strlen(data); ++i) {
 8001d84:	2400      	movs	r4, #0
 8001d86:	0028      	movs	r0, r5
 8001d88:	f7fe f9be 	bl	8000108 <strlen>
 8001d8c:	4284      	cmp	r4, r0
 8001d8e:	d300      	bcc.n	8001d92 <lcdPrintStr+0x12>
}
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
        lcdWriteByte(LCD_BIT_RS, (uint8_t*)&data[i]);
 8001d92:	1929      	adds	r1, r5, r4
 8001d94:	2001      	movs	r0, #1
    for (uint8_t i = 0; i < strlen(data); ++i) {
 8001d96:	3401      	adds	r4, #1
        lcdWriteByte(LCD_BIT_RS, (uint8_t*)&data[i]);
 8001d98:	f7ff ff0e 	bl	8001bb8 <lcdWriteByte>
    for (uint8_t i = 0; i < strlen(data); ++i) {
 8001d9c:	b2e4      	uxtb	r4, r4
 8001d9e:	e7f2      	b.n	8001d86 <lcdPrintStr+0x6>

08001da0 <user_main>:

// Accurate within 20%
#define DELAY_US(t) do {for(uint32_t delay_i = 0; delay_i < (t)*4; delay_i++) __asm__("NOP");} while (0);


void user_main(void) {
 8001da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	lcdInit(&hi2c1, 0x27, 2, 16);
 8001da2:	2310      	movs	r3, #16
 8001da4:	2202      	movs	r2, #2
 8001da6:	2127      	movs	r1, #39	; 0x27
 8001da8:	4810      	ldr	r0, [pc, #64]	; (8001dec <user_main+0x4c>)
 8001daa:	f7ff ff93 	bl	8001cd4 <lcdInit>
	char str[] = "Hello, world!";
 8001dae:	220e      	movs	r2, #14
 8001db0:	490f      	ldr	r1, [pc, #60]	; (8001df0 <user_main+0x50>)
 8001db2:	4668      	mov	r0, sp
 8001db4:	f000 f888 	bl	8001ec8 <memcpy>
	lcdPrintStr(str);
 8001db8:	4668      	mov	r0, sp
 8001dba:	f7ff ffe1 	bl	8001d80 <lcdPrintStr>
	HAL_TIM_Base_Start(&htim2);
 8001dbe:	4c0d      	ldr	r4, [pc, #52]	; (8001df4 <user_main+0x54>)
 8001dc0:	0020      	movs	r0, r4
 8001dc2:	f7ff fb03 	bl	80013cc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	0020      	movs	r0, r4
 8001dca:	f7ff fc06 	bl	80015da <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001dce:	2104      	movs	r1, #4
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	f7ff fb7b 	bl	80014cc <HAL_TIM_OC_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 980);
 8001dd6:	22f5      	movs	r2, #245	; 0xf5
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 980);
	sprintf(str, "%d test", 56);
 8001dde:	4668      	mov	r0, sp
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 980);
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
	sprintf(str, "%d test", 56);
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <user_main+0x58>)
 8001de4:	2238      	movs	r2, #56	; 0x38
 8001de6:	f000 f81b 	bl	8001e20 <siprintf>
	while (true);
 8001dea:	e7fe      	b.n	8001dea <user_main+0x4a>
 8001dec:	200000d4 	.word	0x200000d4
 8001df0:	0800278c 	.word	0x0800278c
 8001df4:	20000124 	.word	0x20000124
 8001df8:	08002784 	.word	0x08002784

08001dfc <HAL_TIM_OC_DelayElapsedCallback>:
	default:
		assert(false);
	}
}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dfc:	23c8      	movs	r3, #200	; 0xc8
	DELAY_US(50);
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	3b01      	subs	r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1fb      	bne.n	8001dfe <HAL_TIM_OC_DelayElapsedCallback+0x2>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e06:	22a0      	movs	r2, #160	; 0xa0
 8001e08:	3308      	adds	r3, #8
 8001e0a:	05d2      	lsls	r2, r2, #23
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	33c0      	adds	r3, #192	; 0xc0
	LL_GPIO_SetOutputPin(OC_TEST_GPIO_Port, OC_TEST_Pin);
	DELAY_US(50);
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	3b01      	subs	r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1fb      	bne.n	8001e10 <HAL_TIM_OC_DelayElapsedCallback+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e18:	3308      	adds	r3, #8
 8001e1a:	6293      	str	r3, [r2, #40]	; 0x28
	LL_GPIO_ResetOutputPin(OC_TEST_GPIO_Port, OC_TEST_Pin);

}
 8001e1c:	4770      	bx	lr
	...

08001e20 <siprintf>:
 8001e20:	b40e      	push	{r1, r2, r3}
 8001e22:	b500      	push	{lr}
 8001e24:	490b      	ldr	r1, [pc, #44]	; (8001e54 <siprintf+0x34>)
 8001e26:	b09c      	sub	sp, #112	; 0x70
 8001e28:	ab1d      	add	r3, sp, #116	; 0x74
 8001e2a:	9002      	str	r0, [sp, #8]
 8001e2c:	9006      	str	r0, [sp, #24]
 8001e2e:	9107      	str	r1, [sp, #28]
 8001e30:	9104      	str	r1, [sp, #16]
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <siprintf+0x38>)
 8001e34:	4909      	ldr	r1, [pc, #36]	; (8001e5c <siprintf+0x3c>)
 8001e36:	cb04      	ldmia	r3!, {r2}
 8001e38:	9105      	str	r1, [sp, #20]
 8001e3a:	6800      	ldr	r0, [r0, #0]
 8001e3c:	a902      	add	r1, sp, #8
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f000 f9ac 	bl	800219c <_svfiprintf_r>
 8001e44:	2200      	movs	r2, #0
 8001e46:	9b02      	ldr	r3, [sp, #8]
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	b01c      	add	sp, #112	; 0x70
 8001e4c:	bc08      	pop	{r3}
 8001e4e:	b003      	add	sp, #12
 8001e50:	4718      	bx	r3
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	7fffffff 	.word	0x7fffffff
 8001e58:	20000058 	.word	0x20000058
 8001e5c:	ffff0208 	.word	0xffff0208

08001e60 <memset>:
 8001e60:	0003      	movs	r3, r0
 8001e62:	1882      	adds	r2, r0, r2
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d100      	bne.n	8001e6a <memset+0xa>
 8001e68:	4770      	bx	lr
 8001e6a:	7019      	strb	r1, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	e7f9      	b.n	8001e64 <memset+0x4>

08001e70 <__errno>:
 8001e70:	4b01      	ldr	r3, [pc, #4]	; (8001e78 <__errno+0x8>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	4770      	bx	lr
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000058 	.word	0x20000058

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	2600      	movs	r6, #0
 8001e80:	4c0c      	ldr	r4, [pc, #48]	; (8001eb4 <__libc_init_array+0x38>)
 8001e82:	4d0d      	ldr	r5, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e84:	1b64      	subs	r4, r4, r5
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	42a6      	cmp	r6, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	2600      	movs	r6, #0
 8001e8e:	f000 fc6d 	bl	800276c <_init>
 8001e92:	4c0a      	ldr	r4, [pc, #40]	; (8001ebc <__libc_init_array+0x40>)
 8001e94:	4d0a      	ldr	r5, [pc, #40]	; (8001ec0 <__libc_init_array+0x44>)
 8001e96:	1b64      	subs	r4, r4, r5
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	42a6      	cmp	r6, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	00b3      	lsls	r3, r6, #2
 8001ea2:	58eb      	ldr	r3, [r5, r3]
 8001ea4:	4798      	blx	r3
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	00b3      	lsls	r3, r6, #2
 8001eac:	58eb      	ldr	r3, [r5, r3]
 8001eae:	4798      	blx	r3
 8001eb0:	3601      	adds	r6, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	080027d0 	.word	0x080027d0
 8001eb8:	080027d0 	.word	0x080027d0
 8001ebc:	080027d4 	.word	0x080027d4
 8001ec0:	080027d0 	.word	0x080027d0

08001ec4 <__retarget_lock_acquire_recursive>:
 8001ec4:	4770      	bx	lr

08001ec6 <__retarget_lock_release_recursive>:
 8001ec6:	4770      	bx	lr

08001ec8 <memcpy>:
 8001ec8:	2300      	movs	r3, #0
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d100      	bne.n	8001ed2 <memcpy+0xa>
 8001ed0:	bd10      	pop	{r4, pc}
 8001ed2:	5ccc      	ldrb	r4, [r1, r3]
 8001ed4:	54c4      	strb	r4, [r0, r3]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	e7f8      	b.n	8001ecc <memcpy+0x4>
	...

08001edc <_free_r>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	0005      	movs	r5, r0
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	d010      	beq.n	8001f06 <_free_r+0x2a>
 8001ee4:	1f0c      	subs	r4, r1, #4
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da00      	bge.n	8001eee <_free_r+0x12>
 8001eec:	18e4      	adds	r4, r4, r3
 8001eee:	0028      	movs	r0, r5
 8001ef0:	f000 f8e2 	bl	80020b8 <__malloc_lock>
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <_free_r+0x90>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <_free_r+0x2c>
 8001efc:	6063      	str	r3, [r4, #4]
 8001efe:	6014      	str	r4, [r2, #0]
 8001f00:	0028      	movs	r0, r5
 8001f02:	f000 f8e1 	bl	80020c8 <__malloc_unlock>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	42a3      	cmp	r3, r4
 8001f0a:	d908      	bls.n	8001f1e <_free_r+0x42>
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	1821      	adds	r1, r4, r0
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d1f3      	bne.n	8001efc <_free_r+0x20>
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	1809      	adds	r1, r1, r0
 8001f1a:	6021      	str	r1, [r4, #0]
 8001f1c:	e7ee      	b.n	8001efc <_free_r+0x20>
 8001f1e:	001a      	movs	r2, r3
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_free_r+0x4e>
 8001f26:	42a3      	cmp	r3, r4
 8001f28:	d9f9      	bls.n	8001f1e <_free_r+0x42>
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	1850      	adds	r0, r2, r1
 8001f2e:	42a0      	cmp	r0, r4
 8001f30:	d10b      	bne.n	8001f4a <_free_r+0x6e>
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	1809      	adds	r1, r1, r0
 8001f36:	1850      	adds	r0, r2, r1
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	4283      	cmp	r3, r0
 8001f3c:	d1e0      	bne.n	8001f00 <_free_r+0x24>
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	1841      	adds	r1, r0, r1
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	6053      	str	r3, [r2, #4]
 8001f48:	e7da      	b.n	8001f00 <_free_r+0x24>
 8001f4a:	42a0      	cmp	r0, r4
 8001f4c:	d902      	bls.n	8001f54 <_free_r+0x78>
 8001f4e:	230c      	movs	r3, #12
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	e7d5      	b.n	8001f00 <_free_r+0x24>
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	1821      	adds	r1, r4, r0
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d103      	bne.n	8001f64 <_free_r+0x88>
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	1809      	adds	r1, r1, r0
 8001f62:	6021      	str	r1, [r4, #0]
 8001f64:	6063      	str	r3, [r4, #4]
 8001f66:	6054      	str	r4, [r2, #4]
 8001f68:	e7ca      	b.n	8001f00 <_free_r+0x24>
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	200002bc 	.word	0x200002bc

08001f70 <sbrk_aligned>:
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	4e0f      	ldr	r6, [pc, #60]	; (8001fb0 <sbrk_aligned+0x40>)
 8001f74:	000d      	movs	r5, r1
 8001f76:	6831      	ldr	r1, [r6, #0]
 8001f78:	0004      	movs	r4, r0
 8001f7a:	2900      	cmp	r1, #0
 8001f7c:	d102      	bne.n	8001f84 <sbrk_aligned+0x14>
 8001f7e:	f000 fba1 	bl	80026c4 <_sbrk_r>
 8001f82:	6030      	str	r0, [r6, #0]
 8001f84:	0029      	movs	r1, r5
 8001f86:	0020      	movs	r0, r4
 8001f88:	f000 fb9c 	bl	80026c4 <_sbrk_r>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d00a      	beq.n	8001fa6 <sbrk_aligned+0x36>
 8001f90:	2303      	movs	r3, #3
 8001f92:	1cc5      	adds	r5, r0, #3
 8001f94:	439d      	bics	r5, r3
 8001f96:	42a8      	cmp	r0, r5
 8001f98:	d007      	beq.n	8001faa <sbrk_aligned+0x3a>
 8001f9a:	1a29      	subs	r1, r5, r0
 8001f9c:	0020      	movs	r0, r4
 8001f9e:	f000 fb91 	bl	80026c4 <_sbrk_r>
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	d101      	bne.n	8001faa <sbrk_aligned+0x3a>
 8001fa6:	2501      	movs	r5, #1
 8001fa8:	426d      	negs	r5, r5
 8001faa:	0028      	movs	r0, r5
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200002c0 	.word	0x200002c0

08001fb4 <_malloc_r>:
 8001fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	1ccb      	adds	r3, r1, #3
 8001fba:	4393      	bics	r3, r2
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	0006      	movs	r6, r0
 8001fc0:	001f      	movs	r7, r3
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d238      	bcs.n	8002038 <_malloc_r+0x84>
 8001fc6:	270c      	movs	r7, #12
 8001fc8:	42b9      	cmp	r1, r7
 8001fca:	d837      	bhi.n	800203c <_malloc_r+0x88>
 8001fcc:	0030      	movs	r0, r6
 8001fce:	f000 f873 	bl	80020b8 <__malloc_lock>
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <_malloc_r+0x100>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	001c      	movs	r4, r3
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d133      	bne.n	8002046 <_malloc_r+0x92>
 8001fde:	0039      	movs	r1, r7
 8001fe0:	0030      	movs	r0, r6
 8001fe2:	f7ff ffc5 	bl	8001f70 <sbrk_aligned>
 8001fe6:	0004      	movs	r4, r0
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	d15e      	bne.n	80020aa <_malloc_r+0xf6>
 8001fec:	9b00      	ldr	r3, [sp, #0]
 8001fee:	681c      	ldr	r4, [r3, #0]
 8001ff0:	0025      	movs	r5, r4
 8001ff2:	2d00      	cmp	r5, #0
 8001ff4:	d14e      	bne.n	8002094 <_malloc_r+0xe0>
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d051      	beq.n	800209e <_malloc_r+0xea>
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	0029      	movs	r1, r5
 8001ffe:	18e3      	adds	r3, r4, r3
 8002000:	0030      	movs	r0, r6
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	f000 fb5e 	bl	80026c4 <_sbrk_r>
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	4283      	cmp	r3, r0
 800200c:	d147      	bne.n	800209e <_malloc_r+0xea>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	0030      	movs	r0, r6
 8002012:	1aff      	subs	r7, r7, r3
 8002014:	0039      	movs	r1, r7
 8002016:	f7ff ffab 	bl	8001f70 <sbrk_aligned>
 800201a:	3001      	adds	r0, #1
 800201c:	d03f      	beq.n	800209e <_malloc_r+0xea>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	19db      	adds	r3, r3, r7
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	9b00      	ldr	r3, [sp, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d040      	beq.n	80020ae <_malloc_r+0xfa>
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	42a2      	cmp	r2, r4
 8002030:	d133      	bne.n	800209a <_malloc_r+0xe6>
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e014      	b.n	8002062 <_malloc_r+0xae>
 8002038:	2b00      	cmp	r3, #0
 800203a:	dac5      	bge.n	8001fc8 <_malloc_r+0x14>
 800203c:	230c      	movs	r3, #12
 800203e:	2500      	movs	r5, #0
 8002040:	6033      	str	r3, [r6, #0]
 8002042:	0028      	movs	r0, r5
 8002044:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002046:	6821      	ldr	r1, [r4, #0]
 8002048:	1bc9      	subs	r1, r1, r7
 800204a:	d420      	bmi.n	800208e <_malloc_r+0xda>
 800204c:	290b      	cmp	r1, #11
 800204e:	d918      	bls.n	8002082 <_malloc_r+0xce>
 8002050:	19e2      	adds	r2, r4, r7
 8002052:	6027      	str	r7, [r4, #0]
 8002054:	42a3      	cmp	r3, r4
 8002056:	d112      	bne.n	800207e <_malloc_r+0xca>
 8002058:	9b00      	ldr	r3, [sp, #0]
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	6863      	ldr	r3, [r4, #4]
 800205e:	6011      	str	r1, [r2, #0]
 8002060:	6053      	str	r3, [r2, #4]
 8002062:	0030      	movs	r0, r6
 8002064:	0025      	movs	r5, r4
 8002066:	f000 f82f 	bl	80020c8 <__malloc_unlock>
 800206a:	2207      	movs	r2, #7
 800206c:	350b      	adds	r5, #11
 800206e:	1d23      	adds	r3, r4, #4
 8002070:	4395      	bics	r5, r2
 8002072:	1aea      	subs	r2, r5, r3
 8002074:	429d      	cmp	r5, r3
 8002076:	d0e4      	beq.n	8002042 <_malloc_r+0x8e>
 8002078:	1b5b      	subs	r3, r3, r5
 800207a:	50a3      	str	r3, [r4, r2]
 800207c:	e7e1      	b.n	8002042 <_malloc_r+0x8e>
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e7ec      	b.n	800205c <_malloc_r+0xa8>
 8002082:	6862      	ldr	r2, [r4, #4]
 8002084:	42a3      	cmp	r3, r4
 8002086:	d1d5      	bne.n	8002034 <_malloc_r+0x80>
 8002088:	9b00      	ldr	r3, [sp, #0]
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e7e9      	b.n	8002062 <_malloc_r+0xae>
 800208e:	0023      	movs	r3, r4
 8002090:	6864      	ldr	r4, [r4, #4]
 8002092:	e7a2      	b.n	8001fda <_malloc_r+0x26>
 8002094:	002c      	movs	r4, r5
 8002096:	686d      	ldr	r5, [r5, #4]
 8002098:	e7ab      	b.n	8001ff2 <_malloc_r+0x3e>
 800209a:	0013      	movs	r3, r2
 800209c:	e7c4      	b.n	8002028 <_malloc_r+0x74>
 800209e:	230c      	movs	r3, #12
 80020a0:	0030      	movs	r0, r6
 80020a2:	6033      	str	r3, [r6, #0]
 80020a4:	f000 f810 	bl	80020c8 <__malloc_unlock>
 80020a8:	e7cb      	b.n	8002042 <_malloc_r+0x8e>
 80020aa:	6027      	str	r7, [r4, #0]
 80020ac:	e7d9      	b.n	8002062 <_malloc_r+0xae>
 80020ae:	605b      	str	r3, [r3, #4]
 80020b0:	deff      	udf	#255	; 0xff
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	200002bc 	.word	0x200002bc

080020b8 <__malloc_lock>:
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <__malloc_lock+0xc>)
 80020bc:	f7ff ff02 	bl	8001ec4 <__retarget_lock_acquire_recursive>
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	200002b8 	.word	0x200002b8

080020c8 <__malloc_unlock>:
 80020c8:	b510      	push	{r4, lr}
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <__malloc_unlock+0xc>)
 80020cc:	f7ff fefb 	bl	8001ec6 <__retarget_lock_release_recursive>
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	200002b8 	.word	0x200002b8

080020d8 <__ssputs_r>:
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b085      	sub	sp, #20
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9203      	str	r2, [sp, #12]
 80020e0:	688e      	ldr	r6, [r1, #8]
 80020e2:	9a01      	ldr	r2, [sp, #4]
 80020e4:	0007      	movs	r7, r0
 80020e6:	000c      	movs	r4, r1
 80020e8:	680b      	ldr	r3, [r1, #0]
 80020ea:	4296      	cmp	r6, r2
 80020ec:	d831      	bhi.n	8002152 <__ssputs_r+0x7a>
 80020ee:	898a      	ldrh	r2, [r1, #12]
 80020f0:	2190      	movs	r1, #144	; 0x90
 80020f2:	00c9      	lsls	r1, r1, #3
 80020f4:	420a      	tst	r2, r1
 80020f6:	d029      	beq.n	800214c <__ssputs_r+0x74>
 80020f8:	2003      	movs	r0, #3
 80020fa:	6921      	ldr	r1, [r4, #16]
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	6963      	ldr	r3, [r4, #20]
 8002102:	4343      	muls	r3, r0
 8002104:	0fdd      	lsrs	r5, r3, #31
 8002106:	18ed      	adds	r5, r5, r3
 8002108:	9b01      	ldr	r3, [sp, #4]
 800210a:	9802      	ldr	r0, [sp, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	181b      	adds	r3, r3, r0
 8002110:	106d      	asrs	r5, r5, #1
 8002112:	42ab      	cmp	r3, r5
 8002114:	d900      	bls.n	8002118 <__ssputs_r+0x40>
 8002116:	001d      	movs	r5, r3
 8002118:	0552      	lsls	r2, r2, #21
 800211a:	d529      	bpl.n	8002170 <__ssputs_r+0x98>
 800211c:	0029      	movs	r1, r5
 800211e:	0038      	movs	r0, r7
 8002120:	f7ff ff48 	bl	8001fb4 <_malloc_r>
 8002124:	1e06      	subs	r6, r0, #0
 8002126:	d02d      	beq.n	8002184 <__ssputs_r+0xac>
 8002128:	9a02      	ldr	r2, [sp, #8]
 800212a:	6921      	ldr	r1, [r4, #16]
 800212c:	f7ff fecc 	bl	8001ec8 <memcpy>
 8002130:	89a2      	ldrh	r2, [r4, #12]
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <__ssputs_r+0xc0>)
 8002134:	401a      	ands	r2, r3
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	4313      	orrs	r3, r2
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	9b02      	ldr	r3, [sp, #8]
 800213e:	6126      	str	r6, [r4, #16]
 8002140:	18f6      	adds	r6, r6, r3
 8002142:	6026      	str	r6, [r4, #0]
 8002144:	6165      	str	r5, [r4, #20]
 8002146:	9e01      	ldr	r6, [sp, #4]
 8002148:	1aed      	subs	r5, r5, r3
 800214a:	60a5      	str	r5, [r4, #8]
 800214c:	9b01      	ldr	r3, [sp, #4]
 800214e:	429e      	cmp	r6, r3
 8002150:	d900      	bls.n	8002154 <__ssputs_r+0x7c>
 8002152:	9e01      	ldr	r6, [sp, #4]
 8002154:	0032      	movs	r2, r6
 8002156:	9903      	ldr	r1, [sp, #12]
 8002158:	6820      	ldr	r0, [r4, #0]
 800215a:	f000 fa9f 	bl	800269c <memmove>
 800215e:	2000      	movs	r0, #0
 8002160:	68a3      	ldr	r3, [r4, #8]
 8002162:	1b9b      	subs	r3, r3, r6
 8002164:	60a3      	str	r3, [r4, #8]
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	199b      	adds	r3, r3, r6
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	b005      	add	sp, #20
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002170:	002a      	movs	r2, r5
 8002172:	0038      	movs	r0, r7
 8002174:	f000 fac3 	bl	80026fe <_realloc_r>
 8002178:	1e06      	subs	r6, r0, #0
 800217a:	d1df      	bne.n	800213c <__ssputs_r+0x64>
 800217c:	0038      	movs	r0, r7
 800217e:	6921      	ldr	r1, [r4, #16]
 8002180:	f7ff feac 	bl	8001edc <_free_r>
 8002184:	230c      	movs	r3, #12
 8002186:	2001      	movs	r0, #1
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	89a2      	ldrh	r2, [r4, #12]
 800218c:	3334      	adds	r3, #52	; 0x34
 800218e:	4313      	orrs	r3, r2
 8002190:	81a3      	strh	r3, [r4, #12]
 8002192:	4240      	negs	r0, r0
 8002194:	e7ea      	b.n	800216c <__ssputs_r+0x94>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	fffffb7f 	.word	0xfffffb7f

0800219c <_svfiprintf_r>:
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b0a1      	sub	sp, #132	; 0x84
 80021a0:	9003      	str	r0, [sp, #12]
 80021a2:	001d      	movs	r5, r3
 80021a4:	898b      	ldrh	r3, [r1, #12]
 80021a6:	000f      	movs	r7, r1
 80021a8:	0016      	movs	r6, r2
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	d511      	bpl.n	80021d2 <_svfiprintf_r+0x36>
 80021ae:	690b      	ldr	r3, [r1, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10e      	bne.n	80021d2 <_svfiprintf_r+0x36>
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	f7ff fefd 	bl	8001fb4 <_malloc_r>
 80021ba:	6038      	str	r0, [r7, #0]
 80021bc:	6138      	str	r0, [r7, #16]
 80021be:	2800      	cmp	r0, #0
 80021c0:	d105      	bne.n	80021ce <_svfiprintf_r+0x32>
 80021c2:	230c      	movs	r3, #12
 80021c4:	9a03      	ldr	r2, [sp, #12]
 80021c6:	3801      	subs	r0, #1
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	b021      	add	sp, #132	; 0x84
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ce:	2340      	movs	r3, #64	; 0x40
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	ac08      	add	r4, sp, #32
 80021d6:	6163      	str	r3, [r4, #20]
 80021d8:	3320      	adds	r3, #32
 80021da:	7663      	strb	r3, [r4, #25]
 80021dc:	3310      	adds	r3, #16
 80021de:	76a3      	strb	r3, [r4, #26]
 80021e0:	9507      	str	r5, [sp, #28]
 80021e2:	0035      	movs	r5, r6
 80021e4:	782b      	ldrb	r3, [r5, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <_svfiprintf_r+0x52>
 80021ea:	2b25      	cmp	r3, #37	; 0x25
 80021ec:	d148      	bne.n	8002280 <_svfiprintf_r+0xe4>
 80021ee:	1bab      	subs	r3, r5, r6
 80021f0:	9305      	str	r3, [sp, #20]
 80021f2:	42b5      	cmp	r5, r6
 80021f4:	d00b      	beq.n	800220e <_svfiprintf_r+0x72>
 80021f6:	0032      	movs	r2, r6
 80021f8:	0039      	movs	r1, r7
 80021fa:	9803      	ldr	r0, [sp, #12]
 80021fc:	f7ff ff6c 	bl	80020d8 <__ssputs_r>
 8002200:	3001      	adds	r0, #1
 8002202:	d100      	bne.n	8002206 <_svfiprintf_r+0x6a>
 8002204:	e0af      	b.n	8002366 <_svfiprintf_r+0x1ca>
 8002206:	6963      	ldr	r3, [r4, #20]
 8002208:	9a05      	ldr	r2, [sp, #20]
 800220a:	189b      	adds	r3, r3, r2
 800220c:	6163      	str	r3, [r4, #20]
 800220e:	782b      	ldrb	r3, [r5, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <_svfiprintf_r+0x7a>
 8002214:	e0a7      	b.n	8002366 <_svfiprintf_r+0x1ca>
 8002216:	2201      	movs	r2, #1
 8002218:	2300      	movs	r3, #0
 800221a:	4252      	negs	r2, r2
 800221c:	6062      	str	r2, [r4, #4]
 800221e:	a904      	add	r1, sp, #16
 8002220:	3254      	adds	r2, #84	; 0x54
 8002222:	1852      	adds	r2, r2, r1
 8002224:	1c6e      	adds	r6, r5, #1
 8002226:	6023      	str	r3, [r4, #0]
 8002228:	60e3      	str	r3, [r4, #12]
 800222a:	60a3      	str	r3, [r4, #8]
 800222c:	7013      	strb	r3, [r2, #0]
 800222e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002230:	4b55      	ldr	r3, [pc, #340]	; (8002388 <_svfiprintf_r+0x1ec>)
 8002232:	2205      	movs	r2, #5
 8002234:	0018      	movs	r0, r3
 8002236:	7831      	ldrb	r1, [r6, #0]
 8002238:	9305      	str	r3, [sp, #20]
 800223a:	f000 fa55 	bl	80026e8 <memchr>
 800223e:	1c75      	adds	r5, r6, #1
 8002240:	2800      	cmp	r0, #0
 8002242:	d11f      	bne.n	8002284 <_svfiprintf_r+0xe8>
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	06d3      	lsls	r3, r2, #27
 8002248:	d504      	bpl.n	8002254 <_svfiprintf_r+0xb8>
 800224a:	2353      	movs	r3, #83	; 0x53
 800224c:	a904      	add	r1, sp, #16
 800224e:	185b      	adds	r3, r3, r1
 8002250:	2120      	movs	r1, #32
 8002252:	7019      	strb	r1, [r3, #0]
 8002254:	0713      	lsls	r3, r2, #28
 8002256:	d504      	bpl.n	8002262 <_svfiprintf_r+0xc6>
 8002258:	2353      	movs	r3, #83	; 0x53
 800225a:	a904      	add	r1, sp, #16
 800225c:	185b      	adds	r3, r3, r1
 800225e:	212b      	movs	r1, #43	; 0x2b
 8002260:	7019      	strb	r1, [r3, #0]
 8002262:	7833      	ldrb	r3, [r6, #0]
 8002264:	2b2a      	cmp	r3, #42	; 0x2a
 8002266:	d016      	beq.n	8002296 <_svfiprintf_r+0xfa>
 8002268:	0035      	movs	r5, r6
 800226a:	2100      	movs	r1, #0
 800226c:	200a      	movs	r0, #10
 800226e:	68e3      	ldr	r3, [r4, #12]
 8002270:	782a      	ldrb	r2, [r5, #0]
 8002272:	1c6e      	adds	r6, r5, #1
 8002274:	3a30      	subs	r2, #48	; 0x30
 8002276:	2a09      	cmp	r2, #9
 8002278:	d94e      	bls.n	8002318 <_svfiprintf_r+0x17c>
 800227a:	2900      	cmp	r1, #0
 800227c:	d111      	bne.n	80022a2 <_svfiprintf_r+0x106>
 800227e:	e017      	b.n	80022b0 <_svfiprintf_r+0x114>
 8002280:	3501      	adds	r5, #1
 8002282:	e7af      	b.n	80021e4 <_svfiprintf_r+0x48>
 8002284:	9b05      	ldr	r3, [sp, #20]
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	1ac0      	subs	r0, r0, r3
 800228a:	2301      	movs	r3, #1
 800228c:	4083      	lsls	r3, r0
 800228e:	4313      	orrs	r3, r2
 8002290:	002e      	movs	r6, r5
 8002292:	6023      	str	r3, [r4, #0]
 8002294:	e7cc      	b.n	8002230 <_svfiprintf_r+0x94>
 8002296:	9b07      	ldr	r3, [sp, #28]
 8002298:	1d19      	adds	r1, r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	9107      	str	r1, [sp, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db01      	blt.n	80022a6 <_svfiprintf_r+0x10a>
 80022a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80022a4:	e004      	b.n	80022b0 <_svfiprintf_r+0x114>
 80022a6:	425b      	negs	r3, r3
 80022a8:	60e3      	str	r3, [r4, #12]
 80022aa:	2302      	movs	r3, #2
 80022ac:	4313      	orrs	r3, r2
 80022ae:	6023      	str	r3, [r4, #0]
 80022b0:	782b      	ldrb	r3, [r5, #0]
 80022b2:	2b2e      	cmp	r3, #46	; 0x2e
 80022b4:	d10a      	bne.n	80022cc <_svfiprintf_r+0x130>
 80022b6:	786b      	ldrb	r3, [r5, #1]
 80022b8:	2b2a      	cmp	r3, #42	; 0x2a
 80022ba:	d135      	bne.n	8002328 <_svfiprintf_r+0x18c>
 80022bc:	9b07      	ldr	r3, [sp, #28]
 80022be:	3502      	adds	r5, #2
 80022c0:	1d1a      	adds	r2, r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	9207      	str	r2, [sp, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db2b      	blt.n	8002322 <_svfiprintf_r+0x186>
 80022ca:	9309      	str	r3, [sp, #36]	; 0x24
 80022cc:	4e2f      	ldr	r6, [pc, #188]	; (800238c <_svfiprintf_r+0x1f0>)
 80022ce:	2203      	movs	r2, #3
 80022d0:	0030      	movs	r0, r6
 80022d2:	7829      	ldrb	r1, [r5, #0]
 80022d4:	f000 fa08 	bl	80026e8 <memchr>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d006      	beq.n	80022ea <_svfiprintf_r+0x14e>
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	1b80      	subs	r0, r0, r6
 80022e0:	4083      	lsls	r3, r0
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	3501      	adds	r5, #1
 80022e6:	4313      	orrs	r3, r2
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	7829      	ldrb	r1, [r5, #0]
 80022ec:	2206      	movs	r2, #6
 80022ee:	4828      	ldr	r0, [pc, #160]	; (8002390 <_svfiprintf_r+0x1f4>)
 80022f0:	1c6e      	adds	r6, r5, #1
 80022f2:	7621      	strb	r1, [r4, #24]
 80022f4:	f000 f9f8 	bl	80026e8 <memchr>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d03c      	beq.n	8002376 <_svfiprintf_r+0x1da>
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <_svfiprintf_r+0x1f8>)
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d125      	bne.n	800234e <_svfiprintf_r+0x1b2>
 8002302:	2207      	movs	r2, #7
 8002304:	9b07      	ldr	r3, [sp, #28]
 8002306:	3307      	adds	r3, #7
 8002308:	4393      	bics	r3, r2
 800230a:	3308      	adds	r3, #8
 800230c:	9307      	str	r3, [sp, #28]
 800230e:	6963      	ldr	r3, [r4, #20]
 8002310:	9a04      	ldr	r2, [sp, #16]
 8002312:	189b      	adds	r3, r3, r2
 8002314:	6163      	str	r3, [r4, #20]
 8002316:	e764      	b.n	80021e2 <_svfiprintf_r+0x46>
 8002318:	4343      	muls	r3, r0
 800231a:	0035      	movs	r5, r6
 800231c:	2101      	movs	r1, #1
 800231e:	189b      	adds	r3, r3, r2
 8002320:	e7a6      	b.n	8002270 <_svfiprintf_r+0xd4>
 8002322:	2301      	movs	r3, #1
 8002324:	425b      	negs	r3, r3
 8002326:	e7d0      	b.n	80022ca <_svfiprintf_r+0x12e>
 8002328:	2300      	movs	r3, #0
 800232a:	200a      	movs	r0, #10
 800232c:	001a      	movs	r2, r3
 800232e:	3501      	adds	r5, #1
 8002330:	6063      	str	r3, [r4, #4]
 8002332:	7829      	ldrb	r1, [r5, #0]
 8002334:	1c6e      	adds	r6, r5, #1
 8002336:	3930      	subs	r1, #48	; 0x30
 8002338:	2909      	cmp	r1, #9
 800233a:	d903      	bls.n	8002344 <_svfiprintf_r+0x1a8>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0c5      	beq.n	80022cc <_svfiprintf_r+0x130>
 8002340:	9209      	str	r2, [sp, #36]	; 0x24
 8002342:	e7c3      	b.n	80022cc <_svfiprintf_r+0x130>
 8002344:	4342      	muls	r2, r0
 8002346:	0035      	movs	r5, r6
 8002348:	2301      	movs	r3, #1
 800234a:	1852      	adds	r2, r2, r1
 800234c:	e7f1      	b.n	8002332 <_svfiprintf_r+0x196>
 800234e:	aa07      	add	r2, sp, #28
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	0021      	movs	r1, r4
 8002354:	003a      	movs	r2, r7
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_svfiprintf_r+0x1fc>)
 8002358:	9803      	ldr	r0, [sp, #12]
 800235a:	e000      	b.n	800235e <_svfiprintf_r+0x1c2>
 800235c:	bf00      	nop
 800235e:	9004      	str	r0, [sp, #16]
 8002360:	9b04      	ldr	r3, [sp, #16]
 8002362:	3301      	adds	r3, #1
 8002364:	d1d3      	bne.n	800230e <_svfiprintf_r+0x172>
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	980d      	ldr	r0, [sp, #52]	; 0x34
 800236a:	065b      	lsls	r3, r3, #25
 800236c:	d400      	bmi.n	8002370 <_svfiprintf_r+0x1d4>
 800236e:	e72c      	b.n	80021ca <_svfiprintf_r+0x2e>
 8002370:	2001      	movs	r0, #1
 8002372:	4240      	negs	r0, r0
 8002374:	e729      	b.n	80021ca <_svfiprintf_r+0x2e>
 8002376:	aa07      	add	r2, sp, #28
 8002378:	9200      	str	r2, [sp, #0]
 800237a:	0021      	movs	r1, r4
 800237c:	003a      	movs	r2, r7
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <_svfiprintf_r+0x1fc>)
 8002380:	9803      	ldr	r0, [sp, #12]
 8002382:	f000 f87b 	bl	800247c <_printf_i>
 8002386:	e7ea      	b.n	800235e <_svfiprintf_r+0x1c2>
 8002388:	0800279a 	.word	0x0800279a
 800238c:	080027a0 	.word	0x080027a0
 8002390:	080027a4 	.word	0x080027a4
 8002394:	00000000 	.word	0x00000000
 8002398:	080020d9 	.word	0x080020d9

0800239c <_printf_common>:
 800239c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800239e:	0016      	movs	r6, r2
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	688a      	ldr	r2, [r1, #8]
 80023a4:	690b      	ldr	r3, [r1, #16]
 80023a6:	000c      	movs	r4, r1
 80023a8:	9000      	str	r0, [sp, #0]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	da00      	bge.n	80023b0 <_printf_common+0x14>
 80023ae:	0013      	movs	r3, r2
 80023b0:	0022      	movs	r2, r4
 80023b2:	6033      	str	r3, [r6, #0]
 80023b4:	3243      	adds	r2, #67	; 0x43
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	2a00      	cmp	r2, #0
 80023ba:	d001      	beq.n	80023c0 <_printf_common+0x24>
 80023bc:	3301      	adds	r3, #1
 80023be:	6033      	str	r3, [r6, #0]
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	d502      	bpl.n	80023cc <_printf_common+0x30>
 80023c6:	6833      	ldr	r3, [r6, #0]
 80023c8:	3302      	adds	r3, #2
 80023ca:	6033      	str	r3, [r6, #0]
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	2306      	movs	r3, #6
 80023d0:	0015      	movs	r5, r2
 80023d2:	401d      	ands	r5, r3
 80023d4:	421a      	tst	r2, r3
 80023d6:	d027      	beq.n	8002428 <_printf_common+0x8c>
 80023d8:	0023      	movs	r3, r4
 80023da:	3343      	adds	r3, #67	; 0x43
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	4193      	sbcs	r3, r2
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	0692      	lsls	r2, r2, #26
 80023e6:	d430      	bmi.n	800244a <_printf_common+0xae>
 80023e8:	0022      	movs	r2, r4
 80023ea:	9901      	ldr	r1, [sp, #4]
 80023ec:	9800      	ldr	r0, [sp, #0]
 80023ee:	9d08      	ldr	r5, [sp, #32]
 80023f0:	3243      	adds	r2, #67	; 0x43
 80023f2:	47a8      	blx	r5
 80023f4:	3001      	adds	r0, #1
 80023f6:	d025      	beq.n	8002444 <_printf_common+0xa8>
 80023f8:	2206      	movs	r2, #6
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	2500      	movs	r5, #0
 80023fe:	4013      	ands	r3, r2
 8002400:	2b04      	cmp	r3, #4
 8002402:	d105      	bne.n	8002410 <_printf_common+0x74>
 8002404:	6833      	ldr	r3, [r6, #0]
 8002406:	68e5      	ldr	r5, [r4, #12]
 8002408:	1aed      	subs	r5, r5, r3
 800240a:	43eb      	mvns	r3, r5
 800240c:	17db      	asrs	r3, r3, #31
 800240e:	401d      	ands	r5, r3
 8002410:	68a3      	ldr	r3, [r4, #8]
 8002412:	6922      	ldr	r2, [r4, #16]
 8002414:	4293      	cmp	r3, r2
 8002416:	dd01      	ble.n	800241c <_printf_common+0x80>
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	18ed      	adds	r5, r5, r3
 800241c:	2600      	movs	r6, #0
 800241e:	42b5      	cmp	r5, r6
 8002420:	d120      	bne.n	8002464 <_printf_common+0xc8>
 8002422:	2000      	movs	r0, #0
 8002424:	e010      	b.n	8002448 <_printf_common+0xac>
 8002426:	3501      	adds	r5, #1
 8002428:	68e3      	ldr	r3, [r4, #12]
 800242a:	6832      	ldr	r2, [r6, #0]
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	42ab      	cmp	r3, r5
 8002430:	ddd2      	ble.n	80023d8 <_printf_common+0x3c>
 8002432:	0022      	movs	r2, r4
 8002434:	2301      	movs	r3, #1
 8002436:	9901      	ldr	r1, [sp, #4]
 8002438:	9800      	ldr	r0, [sp, #0]
 800243a:	9f08      	ldr	r7, [sp, #32]
 800243c:	3219      	adds	r2, #25
 800243e:	47b8      	blx	r7
 8002440:	3001      	adds	r0, #1
 8002442:	d1f0      	bne.n	8002426 <_printf_common+0x8a>
 8002444:	2001      	movs	r0, #1
 8002446:	4240      	negs	r0, r0
 8002448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800244a:	2030      	movs	r0, #48	; 0x30
 800244c:	18e1      	adds	r1, r4, r3
 800244e:	3143      	adds	r1, #67	; 0x43
 8002450:	7008      	strb	r0, [r1, #0]
 8002452:	0021      	movs	r1, r4
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	3145      	adds	r1, #69	; 0x45
 8002458:	7809      	ldrb	r1, [r1, #0]
 800245a:	18a2      	adds	r2, r4, r2
 800245c:	3243      	adds	r2, #67	; 0x43
 800245e:	3302      	adds	r3, #2
 8002460:	7011      	strb	r1, [r2, #0]
 8002462:	e7c1      	b.n	80023e8 <_printf_common+0x4c>
 8002464:	0022      	movs	r2, r4
 8002466:	2301      	movs	r3, #1
 8002468:	9901      	ldr	r1, [sp, #4]
 800246a:	9800      	ldr	r0, [sp, #0]
 800246c:	9f08      	ldr	r7, [sp, #32]
 800246e:	321a      	adds	r2, #26
 8002470:	47b8      	blx	r7
 8002472:	3001      	adds	r0, #1
 8002474:	d0e6      	beq.n	8002444 <_printf_common+0xa8>
 8002476:	3601      	adds	r6, #1
 8002478:	e7d1      	b.n	800241e <_printf_common+0x82>
	...

0800247c <_printf_i>:
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b08b      	sub	sp, #44	; 0x2c
 8002480:	9206      	str	r2, [sp, #24]
 8002482:	000a      	movs	r2, r1
 8002484:	3243      	adds	r2, #67	; 0x43
 8002486:	9307      	str	r3, [sp, #28]
 8002488:	9005      	str	r0, [sp, #20]
 800248a:	9204      	str	r2, [sp, #16]
 800248c:	7e0a      	ldrb	r2, [r1, #24]
 800248e:	000c      	movs	r4, r1
 8002490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002492:	2a78      	cmp	r2, #120	; 0x78
 8002494:	d809      	bhi.n	80024aa <_printf_i+0x2e>
 8002496:	2a62      	cmp	r2, #98	; 0x62
 8002498:	d80b      	bhi.n	80024b2 <_printf_i+0x36>
 800249a:	2a00      	cmp	r2, #0
 800249c:	d100      	bne.n	80024a0 <_printf_i+0x24>
 800249e:	e0be      	b.n	800261e <_printf_i+0x1a2>
 80024a0:	497c      	ldr	r1, [pc, #496]	; (8002694 <_printf_i+0x218>)
 80024a2:	9103      	str	r1, [sp, #12]
 80024a4:	2a58      	cmp	r2, #88	; 0x58
 80024a6:	d100      	bne.n	80024aa <_printf_i+0x2e>
 80024a8:	e093      	b.n	80025d2 <_printf_i+0x156>
 80024aa:	0026      	movs	r6, r4
 80024ac:	3642      	adds	r6, #66	; 0x42
 80024ae:	7032      	strb	r2, [r6, #0]
 80024b0:	e022      	b.n	80024f8 <_printf_i+0x7c>
 80024b2:	0010      	movs	r0, r2
 80024b4:	3863      	subs	r0, #99	; 0x63
 80024b6:	2815      	cmp	r0, #21
 80024b8:	d8f7      	bhi.n	80024aa <_printf_i+0x2e>
 80024ba:	f7fd fe41 	bl	8000140 <__gnu_thumb1_case_shi>
 80024be:	0016      	.short	0x0016
 80024c0:	fff6001f 	.word	0xfff6001f
 80024c4:	fff6fff6 	.word	0xfff6fff6
 80024c8:	001ffff6 	.word	0x001ffff6
 80024cc:	fff6fff6 	.word	0xfff6fff6
 80024d0:	fff6fff6 	.word	0xfff6fff6
 80024d4:	003600a3 	.word	0x003600a3
 80024d8:	fff60083 	.word	0xfff60083
 80024dc:	00b4fff6 	.word	0x00b4fff6
 80024e0:	0036fff6 	.word	0x0036fff6
 80024e4:	fff6fff6 	.word	0xfff6fff6
 80024e8:	0087      	.short	0x0087
 80024ea:	0026      	movs	r6, r4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	3642      	adds	r6, #66	; 0x42
 80024f0:	1d11      	adds	r1, r2, #4
 80024f2:	6019      	str	r1, [r3, #0]
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	7033      	strb	r3, [r6, #0]
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0a2      	b.n	8002642 <_printf_i+0x1c6>
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	6809      	ldr	r1, [r1, #0]
 8002500:	1d02      	adds	r2, r0, #4
 8002502:	060d      	lsls	r5, r1, #24
 8002504:	d50b      	bpl.n	800251e <_printf_i+0xa2>
 8002506:	6805      	ldr	r5, [r0, #0]
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	2d00      	cmp	r5, #0
 800250c:	da03      	bge.n	8002516 <_printf_i+0x9a>
 800250e:	232d      	movs	r3, #45	; 0x2d
 8002510:	9a04      	ldr	r2, [sp, #16]
 8002512:	426d      	negs	r5, r5
 8002514:	7013      	strb	r3, [r2, #0]
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <_printf_i+0x218>)
 8002518:	270a      	movs	r7, #10
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	e01b      	b.n	8002556 <_printf_i+0xda>
 800251e:	6805      	ldr	r5, [r0, #0]
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	0649      	lsls	r1, r1, #25
 8002524:	d5f1      	bpl.n	800250a <_printf_i+0x8e>
 8002526:	b22d      	sxth	r5, r5
 8002528:	e7ef      	b.n	800250a <_printf_i+0x8e>
 800252a:	680d      	ldr	r5, [r1, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	1d08      	adds	r0, r1, #4
 8002530:	6018      	str	r0, [r3, #0]
 8002532:	062e      	lsls	r6, r5, #24
 8002534:	d501      	bpl.n	800253a <_printf_i+0xbe>
 8002536:	680d      	ldr	r5, [r1, #0]
 8002538:	e003      	b.n	8002542 <_printf_i+0xc6>
 800253a:	066d      	lsls	r5, r5, #25
 800253c:	d5fb      	bpl.n	8002536 <_printf_i+0xba>
 800253e:	680d      	ldr	r5, [r1, #0]
 8002540:	b2ad      	uxth	r5, r5
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <_printf_i+0x218>)
 8002544:	2708      	movs	r7, #8
 8002546:	9303      	str	r3, [sp, #12]
 8002548:	2a6f      	cmp	r2, #111	; 0x6f
 800254a:	d000      	beq.n	800254e <_printf_i+0xd2>
 800254c:	3702      	adds	r7, #2
 800254e:	0023      	movs	r3, r4
 8002550:	2200      	movs	r2, #0
 8002552:	3343      	adds	r3, #67	; 0x43
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	60a3      	str	r3, [r4, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db03      	blt.n	8002566 <_printf_i+0xea>
 800255e:	2104      	movs	r1, #4
 8002560:	6822      	ldr	r2, [r4, #0]
 8002562:	438a      	bics	r2, r1
 8002564:	6022      	str	r2, [r4, #0]
 8002566:	2d00      	cmp	r5, #0
 8002568:	d102      	bne.n	8002570 <_printf_i+0xf4>
 800256a:	9e04      	ldr	r6, [sp, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00c      	beq.n	800258a <_printf_i+0x10e>
 8002570:	9e04      	ldr	r6, [sp, #16]
 8002572:	0028      	movs	r0, r5
 8002574:	0039      	movs	r1, r7
 8002576:	f7fd fe73 	bl	8000260 <__aeabi_uidivmod>
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	3e01      	subs	r6, #1
 800257e:	5c5b      	ldrb	r3, [r3, r1]
 8002580:	7033      	strb	r3, [r6, #0]
 8002582:	002b      	movs	r3, r5
 8002584:	0005      	movs	r5, r0
 8002586:	429f      	cmp	r7, r3
 8002588:	d9f3      	bls.n	8002572 <_printf_i+0xf6>
 800258a:	2f08      	cmp	r7, #8
 800258c:	d109      	bne.n	80025a2 <_printf_i+0x126>
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	07db      	lsls	r3, r3, #31
 8002592:	d506      	bpl.n	80025a2 <_printf_i+0x126>
 8002594:	6862      	ldr	r2, [r4, #4]
 8002596:	6923      	ldr	r3, [r4, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	dc02      	bgt.n	80025a2 <_printf_i+0x126>
 800259c:	2330      	movs	r3, #48	; 0x30
 800259e:	3e01      	subs	r6, #1
 80025a0:	7033      	strb	r3, [r6, #0]
 80025a2:	9b04      	ldr	r3, [sp, #16]
 80025a4:	1b9b      	subs	r3, r3, r6
 80025a6:	6123      	str	r3, [r4, #16]
 80025a8:	9b07      	ldr	r3, [sp, #28]
 80025aa:	0021      	movs	r1, r4
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	9805      	ldr	r0, [sp, #20]
 80025b0:	9b06      	ldr	r3, [sp, #24]
 80025b2:	aa09      	add	r2, sp, #36	; 0x24
 80025b4:	f7ff fef2 	bl	800239c <_printf_common>
 80025b8:	3001      	adds	r0, #1
 80025ba:	d147      	bne.n	800264c <_printf_i+0x1d0>
 80025bc:	2001      	movs	r0, #1
 80025be:	4240      	negs	r0, r0
 80025c0:	b00b      	add	sp, #44	; 0x2c
 80025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c4:	2220      	movs	r2, #32
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	6022      	str	r2, [r4, #0]
 80025cc:	2278      	movs	r2, #120	; 0x78
 80025ce:	4932      	ldr	r1, [pc, #200]	; (8002698 <_printf_i+0x21c>)
 80025d0:	9103      	str	r1, [sp, #12]
 80025d2:	0021      	movs	r1, r4
 80025d4:	3145      	adds	r1, #69	; 0x45
 80025d6:	700a      	strb	r2, [r1, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	c920      	ldmia	r1!, {r5}
 80025de:	0610      	lsls	r0, r2, #24
 80025e0:	d402      	bmi.n	80025e8 <_printf_i+0x16c>
 80025e2:	0650      	lsls	r0, r2, #25
 80025e4:	d500      	bpl.n	80025e8 <_printf_i+0x16c>
 80025e6:	b2ad      	uxth	r5, r5
 80025e8:	6019      	str	r1, [r3, #0]
 80025ea:	07d3      	lsls	r3, r2, #31
 80025ec:	d502      	bpl.n	80025f4 <_printf_i+0x178>
 80025ee:	2320      	movs	r3, #32
 80025f0:	4313      	orrs	r3, r2
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	2710      	movs	r7, #16
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d1a9      	bne.n	800254e <_printf_i+0xd2>
 80025fa:	2220      	movs	r2, #32
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	4393      	bics	r3, r2
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	e7a4      	b.n	800254e <_printf_i+0xd2>
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	680d      	ldr	r5, [r1, #0]
 8002608:	1d10      	adds	r0, r2, #4
 800260a:	6949      	ldr	r1, [r1, #20]
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	062e      	lsls	r6, r5, #24
 8002612:	d501      	bpl.n	8002618 <_printf_i+0x19c>
 8002614:	6019      	str	r1, [r3, #0]
 8002616:	e002      	b.n	800261e <_printf_i+0x1a2>
 8002618:	066d      	lsls	r5, r5, #25
 800261a:	d5fb      	bpl.n	8002614 <_printf_i+0x198>
 800261c:	8019      	strh	r1, [r3, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	9e04      	ldr	r6, [sp, #16]
 8002622:	6123      	str	r3, [r4, #16]
 8002624:	e7c0      	b.n	80025a8 <_printf_i+0x12c>
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	1d11      	adds	r1, r2, #4
 800262a:	6019      	str	r1, [r3, #0]
 800262c:	6816      	ldr	r6, [r2, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	0030      	movs	r0, r6
 8002632:	6862      	ldr	r2, [r4, #4]
 8002634:	f000 f858 	bl	80026e8 <memchr>
 8002638:	2800      	cmp	r0, #0
 800263a:	d001      	beq.n	8002640 <_printf_i+0x1c4>
 800263c:	1b80      	subs	r0, r0, r6
 800263e:	6060      	str	r0, [r4, #4]
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	6123      	str	r3, [r4, #16]
 8002644:	2300      	movs	r3, #0
 8002646:	9a04      	ldr	r2, [sp, #16]
 8002648:	7013      	strb	r3, [r2, #0]
 800264a:	e7ad      	b.n	80025a8 <_printf_i+0x12c>
 800264c:	0032      	movs	r2, r6
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	9906      	ldr	r1, [sp, #24]
 8002652:	9805      	ldr	r0, [sp, #20]
 8002654:	9d07      	ldr	r5, [sp, #28]
 8002656:	47a8      	blx	r5
 8002658:	3001      	adds	r0, #1
 800265a:	d0af      	beq.n	80025bc <_printf_i+0x140>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	079b      	lsls	r3, r3, #30
 8002660:	d415      	bmi.n	800268e <_printf_i+0x212>
 8002662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002664:	68e0      	ldr	r0, [r4, #12]
 8002666:	4298      	cmp	r0, r3
 8002668:	daaa      	bge.n	80025c0 <_printf_i+0x144>
 800266a:	0018      	movs	r0, r3
 800266c:	e7a8      	b.n	80025c0 <_printf_i+0x144>
 800266e:	0022      	movs	r2, r4
 8002670:	2301      	movs	r3, #1
 8002672:	9906      	ldr	r1, [sp, #24]
 8002674:	9805      	ldr	r0, [sp, #20]
 8002676:	9e07      	ldr	r6, [sp, #28]
 8002678:	3219      	adds	r2, #25
 800267a:	47b0      	blx	r6
 800267c:	3001      	adds	r0, #1
 800267e:	d09d      	beq.n	80025bc <_printf_i+0x140>
 8002680:	3501      	adds	r5, #1
 8002682:	68e3      	ldr	r3, [r4, #12]
 8002684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	42ab      	cmp	r3, r5
 800268a:	dcf0      	bgt.n	800266e <_printf_i+0x1f2>
 800268c:	e7e9      	b.n	8002662 <_printf_i+0x1e6>
 800268e:	2500      	movs	r5, #0
 8002690:	e7f7      	b.n	8002682 <_printf_i+0x206>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	080027ab 	.word	0x080027ab
 8002698:	080027bc 	.word	0x080027bc

0800269c <memmove>:
 800269c:	b510      	push	{r4, lr}
 800269e:	4288      	cmp	r0, r1
 80026a0:	d902      	bls.n	80026a8 <memmove+0xc>
 80026a2:	188b      	adds	r3, r1, r2
 80026a4:	4298      	cmp	r0, r3
 80026a6:	d303      	bcc.n	80026b0 <memmove+0x14>
 80026a8:	2300      	movs	r3, #0
 80026aa:	e007      	b.n	80026bc <memmove+0x20>
 80026ac:	5c8b      	ldrb	r3, [r1, r2]
 80026ae:	5483      	strb	r3, [r0, r2]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	d2fb      	bcs.n	80026ac <memmove+0x10>
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	5ccc      	ldrb	r4, [r1, r3]
 80026b8:	54c4      	strb	r4, [r0, r3]
 80026ba:	3301      	adds	r3, #1
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1fa      	bne.n	80026b6 <memmove+0x1a>
 80026c0:	e7f8      	b.n	80026b4 <memmove+0x18>
	...

080026c4 <_sbrk_r>:
 80026c4:	2300      	movs	r3, #0
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	4d06      	ldr	r5, [pc, #24]	; (80026e4 <_sbrk_r+0x20>)
 80026ca:	0004      	movs	r4, r0
 80026cc:	0008      	movs	r0, r1
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	f7fe f83a 	bl	8000748 <_sbrk>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d103      	bne.n	80026e0 <_sbrk_r+0x1c>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d000      	beq.n	80026e0 <_sbrk_r+0x1c>
 80026de:	6023      	str	r3, [r4, #0]
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	200002b4 	.word	0x200002b4

080026e8 <memchr>:
 80026e8:	b2c9      	uxtb	r1, r1
 80026ea:	1882      	adds	r2, r0, r2
 80026ec:	4290      	cmp	r0, r2
 80026ee:	d101      	bne.n	80026f4 <memchr+0xc>
 80026f0:	2000      	movs	r0, #0
 80026f2:	4770      	bx	lr
 80026f4:	7803      	ldrb	r3, [r0, #0]
 80026f6:	428b      	cmp	r3, r1
 80026f8:	d0fb      	beq.n	80026f2 <memchr+0xa>
 80026fa:	3001      	adds	r0, #1
 80026fc:	e7f6      	b.n	80026ec <memchr+0x4>

080026fe <_realloc_r>:
 80026fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002700:	0007      	movs	r7, r0
 8002702:	000e      	movs	r6, r1
 8002704:	0014      	movs	r4, r2
 8002706:	2900      	cmp	r1, #0
 8002708:	d105      	bne.n	8002716 <_realloc_r+0x18>
 800270a:	0011      	movs	r1, r2
 800270c:	f7ff fc52 	bl	8001fb4 <_malloc_r>
 8002710:	0005      	movs	r5, r0
 8002712:	0028      	movs	r0, r5
 8002714:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002716:	2a00      	cmp	r2, #0
 8002718:	d103      	bne.n	8002722 <_realloc_r+0x24>
 800271a:	f7ff fbdf 	bl	8001edc <_free_r>
 800271e:	0025      	movs	r5, r4
 8002720:	e7f7      	b.n	8002712 <_realloc_r+0x14>
 8002722:	f000 f81b 	bl	800275c <_malloc_usable_size_r>
 8002726:	9001      	str	r0, [sp, #4]
 8002728:	4284      	cmp	r4, r0
 800272a:	d803      	bhi.n	8002734 <_realloc_r+0x36>
 800272c:	0035      	movs	r5, r6
 800272e:	0843      	lsrs	r3, r0, #1
 8002730:	42a3      	cmp	r3, r4
 8002732:	d3ee      	bcc.n	8002712 <_realloc_r+0x14>
 8002734:	0021      	movs	r1, r4
 8002736:	0038      	movs	r0, r7
 8002738:	f7ff fc3c 	bl	8001fb4 <_malloc_r>
 800273c:	1e05      	subs	r5, r0, #0
 800273e:	d0e8      	beq.n	8002712 <_realloc_r+0x14>
 8002740:	9b01      	ldr	r3, [sp, #4]
 8002742:	0022      	movs	r2, r4
 8002744:	429c      	cmp	r4, r3
 8002746:	d900      	bls.n	800274a <_realloc_r+0x4c>
 8002748:	001a      	movs	r2, r3
 800274a:	0031      	movs	r1, r6
 800274c:	0028      	movs	r0, r5
 800274e:	f7ff fbbb 	bl	8001ec8 <memcpy>
 8002752:	0031      	movs	r1, r6
 8002754:	0038      	movs	r0, r7
 8002756:	f7ff fbc1 	bl	8001edc <_free_r>
 800275a:	e7da      	b.n	8002712 <_realloc_r+0x14>

0800275c <_malloc_usable_size_r>:
 800275c:	1f0b      	subs	r3, r1, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	1f18      	subs	r0, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	da01      	bge.n	800276a <_malloc_usable_size_r+0xe>
 8002766:	580b      	ldr	r3, [r1, r0]
 8002768:	18c0      	adds	r0, r0, r3
 800276a:	4770      	bx	lr

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
